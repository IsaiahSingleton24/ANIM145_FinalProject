;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD10_centroid      0   xyzw        0     NONE   float   xyz 
; TEXCOORD11_centroid      0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xyzw        2     NONE   float   xy  
; PRIMITIVE_ID             0   x           3     NONE    uint   x   
; SV_IsFrontFace           0    y          3    FFACE    uint       
; TEXCOORD                 9   xyz         4     NONE   float   xyz 
; SV_Position              0   xyzw        5      POS   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: 09519f5af6149cce82b5cfc877b30c54
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD10_centroid      0                 linear       
; TEXCOORD11_centroid      0                 linear       
; TEXCOORD                 0                 linear       
; PRIMITIVE_ID             0        nointerpolation       
; TEXCOORD                 9                 linear       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_TranslucentBasePass
; {
;
;   struct hostlayout.UniformBufferConstants_TranslucentBasePass
;   {
;
;       uint TranslucentBasePass_Shared_Forward_NumLocalLights;; Offset:    0
;       uint TranslucentBasePass_Shared_Forward_NumReflectionCaptures;; Offset:    4
;       uint TranslucentBasePass_Shared_Forward_HasDirectionalLight;; Offset:    8
;       uint TranslucentBasePass_Shared_Forward_NumGridCells;; Offset:   12
;       int3 TranslucentBasePass_Shared_Forward_CulledGridSize;; Offset:   16
;       uint TranslucentBasePass_Shared_Forward_MaxCulledLightsPerCell;; Offset:   28
;       uint TranslucentBasePass_Shared_Forward_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_TranslucentBasePass_Shared_Forward_36;; Offset:   36
;       uint PrePadding_TranslucentBasePass_Shared_Forward_40;; Offset:   40
;       uint PrePadding_TranslucentBasePass_Shared_Forward_44;; Offset:   44
;       float3 TranslucentBasePass_Shared_Forward_LightGridZParams;; Offset:   48
;       float PrePadding_TranslucentBasePass_Shared_Forward_60;; Offset:   60
;       float3 TranslucentBasePass_Shared_Forward_DirectionalLightDirection;; Offset:   64
;       float TranslucentBasePass_Shared_Forward_DirectionalLightSourceRadius;; Offset:   76
;       float3 TranslucentBasePass_Shared_Forward_DirectionalLightColor;; Offset:   80
;       float TranslucentBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint TranslucentBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_TranslucentBasePass_Shared_Forward_100;; Offset:  100
;       float2 TranslucentBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint TranslucentBasePass_Shared_Forward_NumDirectionalLightCascades;; Offset:  112
;       int TranslucentBasePass_Shared_Forward_DirectionalLightVSM;; Offset:  116
;       int PrePadding_TranslucentBasePass_Shared_Forward_120;; Offset:  120
;       int PrePadding_TranslucentBasePass_Shared_Forward_124;; Offset:  124
;       float4 TranslucentBasePass_Shared_Forward_CascadeEndDepths;; Offset:  128
;       row_major float4x4 TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float TranslucentBasePass_Shared_Forward_DirectionalLightDepthBias;; Offset:  480
;       uint TranslucentBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint TranslucentBasePass_Shared_Forward_SimpleLightsEndIndex;; Offset:  488
;       uint TranslucentBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint TranslucentBasePass_Shared_Forward_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_TranslucentBasePass_Shared_Forward_500;; Offset:  500
;       uint PrePadding_TranslucentBasePass_Shared_Forward_504;; Offset:  504
;       uint PrePadding_TranslucentBasePass_Shared_Forward_508;; Offset:  508
;       float4 TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint TranslucentBasePass_Shared_Forward_DirectLightingShowFlag;; Offset:  592
;       float PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;; Offset:  604
;       float TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_TranslucentBasePass_Shared_Forward_644;; Offset:  644
;       uint PrePadding_TranslucentBasePass_Shared_Forward_648;; Offset:  648
;       uint PrePadding_TranslucentBasePass_Shared_Forward_652;; Offset:  652
;       uint BindlessResource_TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_TranslucentBasePass_Shared_Forward_660;; Offset:  660
;       uint BindlessSampler_TranslucentBasePass_Shared_Forward_ShadowmapSampler;; Offset:  664
;       uint PrePadding_TranslucentBasePass_Shared_Forward_668;; Offset:  668
;       uint BindlessResource_TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_TranslucentBasePass_Shared_Forward_676;; Offset:  676
;       uint BindlessSampler_TranslucentBasePass_Shared_Forward_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_TranslucentBasePass_Shared_Forward_684;; Offset:  684
;       uint BindlessResource_TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_TranslucentBasePass_Shared_Forward_692;; Offset:  692
;       uint BindlessResource_TranslucentBasePass_Shared_Forward_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_TranslucentBasePass_Shared_Forward_700;; Offset:  700
;       uint BindlessResource_TranslucentBasePass_Shared_Forward_CulledLightDataGrid32Bit;; Offset:  704
;       uint PrePadding_TranslucentBasePass_Shared_Forward_708;; Offset:  708
;       uint BindlessResource_TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit;; Offset:  712
;       float PrePadding_TranslucentBasePass_Shared_ForwardISR_716;; Offset:  716
;       uint TranslucentBasePass_Shared_ForwardISR_NumLocalLights;; Offset:  720
;       uint TranslucentBasePass_Shared_ForwardISR_NumReflectionCaptures;; Offset:  724
;       uint TranslucentBasePass_Shared_ForwardISR_HasDirectionalLight;; Offset:  728
;       uint TranslucentBasePass_Shared_ForwardISR_NumGridCells;; Offset:  732
;       int3 TranslucentBasePass_Shared_ForwardISR_CulledGridSize;; Offset:  736
;       uint TranslucentBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;; Offset:  748
;       uint TranslucentBasePass_Shared_ForwardISR_LightGridPixelSizeShift;; Offset:  752
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_756;; Offset:  756
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_760;; Offset:  760
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_764;; Offset:  764
;       float3 TranslucentBasePass_Shared_ForwardISR_LightGridZParams;; Offset:  768
;       float PrePadding_TranslucentBasePass_Shared_ForwardISR_780;; Offset:  780
;       float3 TranslucentBasePass_Shared_ForwardISR_DirectionalLightDirection;; Offset:  784
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;; Offset:  796
;       float3 TranslucentBasePass_Shared_ForwardISR_DirectionalLightColor;; Offset:  800
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;; Offset:  812
;       uint TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;; Offset:  816
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_820;; Offset:  820
;       float2 TranslucentBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;; Offset:  824
;       uint TranslucentBasePass_Shared_ForwardISR_NumDirectionalLightCascades;; Offset:  832
;       int TranslucentBasePass_Shared_ForwardISR_DirectionalLightVSM;; Offset:  836
;       int PrePadding_TranslucentBasePass_Shared_ForwardISR_840;; Offset:  840
;       int PrePadding_TranslucentBasePass_Shared_ForwardISR_844;; Offset:  844
;       float4 TranslucentBasePass_Shared_ForwardISR_CascadeEndDepths;; Offset:  848
;       row_major float4x4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  864
;       float4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];; Offset: 1120
;       float4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;; Offset: 1184
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightDepthBias;; Offset: 1200
;       uint TranslucentBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;; Offset: 1204
;       uint TranslucentBasePass_Shared_ForwardISR_SimpleLightsEndIndex;; Offset: 1208
;       uint TranslucentBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;; Offset: 1212
;       uint TranslucentBasePass_Shared_ForwardISR_LumenSupportedStartIndex;; Offset: 1216
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1220;; Offset: 1220
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1224;; Offset: 1224
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1228;; Offset: 1228
;       float4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;; Offset: 1232
;       row_major float4x4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;; Offset: 1248
;       uint TranslucentBasePass_Shared_ForwardISR_DirectLightingShowFlag;; Offset: 1312
;       float PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;; Offset: 1316
;       float PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;; Offset: 1320
;       float PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;; Offset: 1324
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;; Offset: 1328
;       int TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;; Offset: 1332
;       int TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset: 1336
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset: 1340
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset: 1344
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset: 1348
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset: 1352
;       float TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset: 1356
;       uint TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset: 1360
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1364;; Offset: 1364
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1368;; Offset: 1368
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1372;; Offset: 1372
;       uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas;; Offset: 1376
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1380;; Offset: 1380
;       uint BindlessSampler_TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler;; Offset: 1384
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1388;; Offset: 1388
;       uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap;; Offset: 1392
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1396;; Offset: 1396
;       uint BindlessSampler_TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler;; Offset: 1400
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1404;; Offset: 1404
;       uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer;; Offset: 1408
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1412;; Offset: 1412
;       uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid;; Offset: 1416
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1420;; Offset: 1420
;       uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit;; Offset: 1424
;       uint PrePadding_TranslucentBasePass_Shared_ForwardISR_1428;; Offset: 1428
;       uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit;; Offset: 1432
;       float PrePadding_TranslucentBasePass_Shared_Reflection_1436;; Offset: 1436
;       float4 TranslucentBasePass_Shared_Reflection_SkyLightParameters;; Offset: 1440
;       uint BindlessResource_TranslucentBasePass_Shared_Reflection_SkyLightCubemap;; Offset: 1456
;       uint PrePadding_TranslucentBasePass_Shared_Reflection_1460;; Offset: 1460
;       uint BindlessSampler_TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler;; Offset: 1464
;       uint PrePadding_TranslucentBasePass_Shared_Reflection_1468;; Offset: 1468
;       uint BindlessResource_TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap;; Offset: 1472
;       uint PrePadding_TranslucentBasePass_Shared_Reflection_1476;; Offset: 1476
;       uint BindlessSampler_TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler;; Offset: 1480
;       uint PrePadding_TranslucentBasePass_Shared_Reflection_1484;; Offset: 1484
;       uint BindlessResource_TranslucentBasePass_Shared_Reflection_ReflectionCubemap;; Offset: 1488
;       uint PrePadding_TranslucentBasePass_Shared_Reflection_1492;; Offset: 1492
;       uint BindlessSampler_TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler;; Offset: 1496
;       uint PrePadding_TranslucentBasePass_Shared_Reflection_1500;; Offset: 1500
;       uint BindlessResource_TranslucentBasePass_Shared_Reflection_PreIntegratedGF;; Offset: 1504
;       uint PrePadding_TranslucentBasePass_Shared_Reflection_1508;; Offset: 1508
;       uint BindlessSampler_TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler;; Offset: 1512
;       float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1516;; Offset: 1516
;       float4 TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane;; Offset: 1520
;       float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;; Offset: 1536
;       float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;; Offset: 1552
;       float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;; Offset: 1568
;       row_major float3x4 TranslucentBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;; Offset: 1584
;       float3 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters;; Offset: 1632
;       float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1644;; Offset: 1644
;       float2 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;; Offset: 1648
;       float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1656;; Offset: 1656
;       float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1660;; Offset: 1660
;       row_major float4x4 TranslucentBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];; Offset: 1664
;       float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];; Offset: 1792
;       float2 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;; Offset: 1824
;       uint TranslucentBasePass_Shared_PlanarReflection_bIsStereo;; Offset: 1832
;       uint PrePadding_TranslucentBasePass_Shared_PlanarReflection_1836;; Offset: 1836
;       uint BindlessResource_TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture;; Offset: 1840
;       uint PrePadding_TranslucentBasePass_Shared_PlanarReflection_1844;; Offset: 1844
;       uint BindlessSampler_TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler;; Offset: 1848
;       float PrePadding_TranslucentBasePass_Shared_Fog_1852;; Offset: 1852
;       float4 TranslucentBasePass_Shared_Fog_ExponentialFogParameters;; Offset: 1856
;       float4 TranslucentBasePass_Shared_Fog_ExponentialFogParameters2;; Offset: 1872
;       float4 TranslucentBasePass_Shared_Fog_ExponentialFogColorParameter;; Offset: 1888
;       float4 TranslucentBasePass_Shared_Fog_ExponentialFogParameters3;; Offset: 1904
;       float4 TranslucentBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;; Offset: 1920
;       float4 TranslucentBasePass_Shared_Fog_InscatteringLightDirection;; Offset: 1936
;       float4 TranslucentBasePass_Shared_Fog_DirectionalInscatteringColor;; Offset: 1952
;       float2 TranslucentBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;; Offset: 1968
;       float PrePadding_TranslucentBasePass_Shared_Fog_1976;; Offset: 1976
;       float PrePadding_TranslucentBasePass_Shared_Fog_1980;; Offset: 1980
;       float3 TranslucentBasePass_Shared_Fog_FogInscatteringTextureParameters;; Offset: 1984
;       float TranslucentBasePass_Shared_Fog_ApplyVolumetricFog;; Offset: 1996
;       float TranslucentBasePass_Shared_Fog_VolumetricFogStartDistance;; Offset: 2000
;       float TranslucentBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;; Offset: 2004
;       uint BindlessResource_TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap;; Offset: 2008
;       uint PrePadding_TranslucentBasePass_Shared_Fog_2012;; Offset: 2012
;       uint BindlessSampler_TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler;; Offset: 2016
;       uint PrePadding_TranslucentBasePass_Shared_Fog_2020;; Offset: 2020
;       uint BindlessResource_TranslucentBasePass_Shared_Fog_IntegratedLightScattering;; Offset: 2024
;       uint PrePadding_TranslucentBasePass_Shared_Fog_2028;; Offset: 2028
;       uint BindlessSampler_TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler;; Offset: 2032
;       float PrePadding_TranslucentBasePass_Shared_FogISR_2036;; Offset: 2036
;       float PrePadding_TranslucentBasePass_Shared_FogISR_2040;; Offset: 2040
;       float PrePadding_TranslucentBasePass_Shared_FogISR_2044;; Offset: 2044
;       float4 TranslucentBasePass_Shared_FogISR_ExponentialFogParameters;; Offset: 2048
;       float4 TranslucentBasePass_Shared_FogISR_ExponentialFogParameters2;; Offset: 2064
;       float4 TranslucentBasePass_Shared_FogISR_ExponentialFogColorParameter;; Offset: 2080
;       float4 TranslucentBasePass_Shared_FogISR_ExponentialFogParameters3;; Offset: 2096
;       float4 TranslucentBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;; Offset: 2112
;       float4 TranslucentBasePass_Shared_FogISR_InscatteringLightDirection;; Offset: 2128
;       float4 TranslucentBasePass_Shared_FogISR_DirectionalInscatteringColor;; Offset: 2144
;       float2 TranslucentBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;; Offset: 2160
;       float PrePadding_TranslucentBasePass_Shared_FogISR_2168;; Offset: 2168
;       float PrePadding_TranslucentBasePass_Shared_FogISR_2172;; Offset: 2172
;       float3 TranslucentBasePass_Shared_FogISR_FogInscatteringTextureParameters;; Offset: 2176
;       float TranslucentBasePass_Shared_FogISR_ApplyVolumetricFog;; Offset: 2188
;       float TranslucentBasePass_Shared_FogISR_VolumetricFogStartDistance;; Offset: 2192
;       float TranslucentBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;; Offset: 2196
;       uint BindlessResource_TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap;; Offset: 2200
;       uint PrePadding_TranslucentBasePass_Shared_FogISR_2204;; Offset: 2204
;       uint BindlessSampler_TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler;; Offset: 2208
;       uint PrePadding_TranslucentBasePass_Shared_FogISR_2212;; Offset: 2212
;       uint BindlessResource_TranslucentBasePass_Shared_FogISR_IntegratedLightScattering;; Offset: 2216
;       uint PrePadding_TranslucentBasePass_Shared_FogISR_2220;; Offset: 2220
;       uint BindlessSampler_TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler;; Offset: 2224
;       float PrePadding_TranslucentBasePass_Shared_2228;; Offset: 2228
;       float PrePadding_TranslucentBasePass_Shared_2232;; Offset: 2232
;       float PrePadding_TranslucentBasePass_Shared_2236;; Offset: 2236
;       uint TranslucentBasePass_Shared_UseBasePassSkylight;; Offset: 2240
;       float PrePadding_TranslucentBasePass_SceneTextures_2244;; Offset: 2244
;       float PrePadding_TranslucentBasePass_SceneTextures_2248;; Offset: 2248
;       float PrePadding_TranslucentBasePass_SceneTextures_2252;; Offset: 2252
;       uint BindlessResource_TranslucentBasePass_SceneTextures_SceneColorTexture;; Offset: 2256
;       uint PrePadding_TranslucentBasePass_SceneTextures_2260;; Offset: 2260
;       uint BindlessResource_TranslucentBasePass_SceneTextures_SceneDepthTexture;; Offset: 2264
;       uint PrePadding_TranslucentBasePass_SceneTextures_2268;; Offset: 2268
;       uint BindlessResource_TranslucentBasePass_SceneTextures_ScenePartialDepthTexture;; Offset: 2272
;       uint PrePadding_TranslucentBasePass_SceneTextures_2276;; Offset: 2276
;       uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferATexture;; Offset: 2280
;       uint PrePadding_TranslucentBasePass_SceneTextures_2284;; Offset: 2284
;       uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferBTexture;; Offset: 2288
;       uint PrePadding_TranslucentBasePass_SceneTextures_2292;; Offset: 2292
;       uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferCTexture;; Offset: 2296
;       uint PrePadding_TranslucentBasePass_SceneTextures_2300;; Offset: 2300
;       uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferDTexture;; Offset: 2304
;       uint PrePadding_TranslucentBasePass_SceneTextures_2308;; Offset: 2308
;       uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferETexture;; Offset: 2312
;       uint PrePadding_TranslucentBasePass_SceneTextures_2316;; Offset: 2316
;       uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferFTexture;; Offset: 2320
;       uint PrePadding_TranslucentBasePass_SceneTextures_2324;; Offset: 2324
;       uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferVelocityTexture;; Offset: 2328
;       uint PrePadding_TranslucentBasePass_SceneTextures_2332;; Offset: 2332
;       uint BindlessResource_TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture;; Offset: 2336
;       uint PrePadding_TranslucentBasePass_SceneTextures_2340;; Offset: 2340
;       uint BindlessResource_TranslucentBasePass_SceneTextures_CustomDepthTexture;; Offset: 2344
;       uint PrePadding_TranslucentBasePass_SceneTextures_2348;; Offset: 2348
;       uint BindlessResource_TranslucentBasePass_SceneTextures_CustomStencilTexture;; Offset: 2352
;       uint PrePadding_TranslucentBasePass_SceneTextures_2356;; Offset: 2356
;       uint BindlessSampler_TranslucentBasePass_SceneTextures_PointClampSampler;; Offset: 2360
;       float PrePadding_TranslucentBasePass_Strata_2364;; Offset: 2364
;       uint TranslucentBasePass_Strata_MaxBytesPerPixel;; Offset: 2368
;       uint TranslucentBasePass_Strata_bRoughDiffuse;; Offset: 2372
;       uint TranslucentBasePass_Strata_PeelLayersAboveDepth;; Offset: 2376
;       uint TranslucentBasePass_Strata_bRoughnessTracking;; Offset: 2380
;       int TranslucentBasePass_Strata_FirstSliceStoringStrataSSSData;; Offset: 2384
;       int PrePadding_TranslucentBasePass_Strata_2388;; Offset: 2388
;       uint BindlessResource_TranslucentBasePass_Strata_MaterialTextureArray;; Offset: 2392
;       uint PrePadding_TranslucentBasePass_Strata_2396;; Offset: 2396
;       uint BindlessResource_TranslucentBasePass_Strata_TopLayerTexture;; Offset: 2400
;       float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2404;; Offset: 2404
;       float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2408;; Offset: 2408
;       float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2412;; Offset: 2412
;       row_major float4x4 TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix;; Offset: 2416
;       float TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm;; Offset: 2480
;       float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2484;; Offset: 2484
;       uint BindlessResource_TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture;; Offset: 2488
;       uint PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2492;; Offset: 2492
;       uint BindlessSampler_TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler;; Offset: 2496
;       uint PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2500;; Offset: 2500
;       float TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapStrength;; Offset: 2504
;       float PrePadding_TranslucentBasePass_OIT_2508;; Offset: 2508
;       uint TranslucentBasePass_OIT_bOITEnable;      ; Offset: 2512
;       uint TranslucentBasePass_OIT_OITMethod;       ; Offset: 2516
;       uint TranslucentBasePass_OIT_MaxSideSamplePerPixel;; Offset: 2520
;       uint TranslucentBasePass_OIT_MaxSamplePerPixel;; Offset: 2524
;       uint TranslucentBasePass_OIT_TransmittanceThreshold;; Offset: 2528
;       uint PrePadding_TranslucentBasePass_OIT_2532; ; Offset: 2532
;       uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleCount;; Offset: 2536
;       uint PrePadding_TranslucentBasePass_OIT_2540; ; Offset: 2540
;       uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleColor;; Offset: 2544
;       uint PrePadding_TranslucentBasePass_OIT_2548; ; Offset: 2548
;       uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleTrans;; Offset: 2552
;       uint PrePadding_TranslucentBasePass_OIT_2556; ; Offset: 2556
;       uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleDepth;; Offset: 2560
;       float PrePadding_TranslucentBasePass_2564;    ; Offset: 2564
;       float PrePadding_TranslucentBasePass_2568;    ; Offset: 2568
;       float PrePadding_TranslucentBasePass_2572;    ; Offset: 2572
;       float4 TranslucentBasePass_HZBUvFactorAndInvFactor;; Offset: 2576
;       float4 TranslucentBasePass_PrevScreenPositionScaleBias;; Offset: 2592
;       float2 TranslucentBasePass_PrevSceneColorBilinearUVMin;; Offset: 2608
;       float2 TranslucentBasePass_PrevSceneColorBilinearUVMax;; Offset: 2616
;       float TranslucentBasePass_PrevSceneColorPreExposureInv;; Offset: 2624
;       int TranslucentBasePass_SSRQuality;           ; Offset: 2628
;       uint BindlessResource_TranslucentBasePass_HZBTexture;; Offset: 2632
;       uint PrePadding_TranslucentBasePass_2636;     ; Offset: 2636
;       uint BindlessSampler_TranslucentBasePass_HZBSampler;; Offset: 2640
;       uint PrePadding_TranslucentBasePass_2644;     ; Offset: 2644
;       uint BindlessResource_TranslucentBasePass_PrevSceneColor;; Offset: 2648
;       uint PrePadding_TranslucentBasePass_2652;     ; Offset: 2652
;       uint BindlessSampler_TranslucentBasePass_PrevSceneColorSampler;; Offset: 2656
;       uint PrePadding_TranslucentBasePass_2660;     ; Offset: 2660
;       uint BindlessResource_TranslucentBasePass_VolumetricCloudColor;; Offset: 2664
;       uint PrePadding_TranslucentBasePass_2668;     ; Offset: 2668
;       uint BindlessSampler_TranslucentBasePass_VolumetricCloudColorSampler;; Offset: 2672
;       uint PrePadding_TranslucentBasePass_2676;     ; Offset: 2676
;       uint BindlessResource_TranslucentBasePass_VolumetricCloudDepth;; Offset: 2680
;       uint PrePadding_TranslucentBasePass_2684;     ; Offset: 2684
;       uint BindlessSampler_TranslucentBasePass_VolumetricCloudDepthSampler;; Offset: 2688
;       uint PrePadding_TranslucentBasePass_2692;     ; Offset: 2692
;       float TranslucentBasePass_ApplyVolumetricCloudOnTransparent;; Offset: 2696
;       float TranslucentBasePass_SoftBlendingDistanceKm;; Offset: 2700
;       uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeAmbientInner;; Offset: 2704
;       uint PrePadding_TranslucentBasePass_2708;     ; Offset: 2708
;       uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter;; Offset: 2712
;       uint PrePadding_TranslucentBasePass_2716;     ; Offset: 2716
;       uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner;; Offset: 2720
;       uint PrePadding_TranslucentBasePass_2724;     ; Offset: 2724
;       uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter;; Offset: 2728
;       float PrePadding_TranslucentBasePass_2732;    ; Offset: 2732
;       float TranslucentBasePass_ReprojectionRadiusScale;; Offset: 2736
;       float TranslucentBasePass_ClipmapWorldExtent; ; Offset: 2740
;       float TranslucentBasePass_ClipmapDistributionBase;; Offset: 2744
;       float TranslucentBasePass_InvClipmapFadeSize; ; Offset: 2748
;       int2 TranslucentBasePass_ProbeAtlasResolutionInProbes;; Offset: 2752
;       uint TranslucentBasePass_RadianceProbeClipmapResolution;; Offset: 2760
;       uint TranslucentBasePass_NumRadianceProbeClipmaps;; Offset: 2764
;       uint TranslucentBasePass_RadianceProbeResolution;; Offset: 2768
;       uint TranslucentBasePass_FinalProbeResolution;; Offset: 2772
;       uint TranslucentBasePass_FinalRadianceAtlasMaxMip;; Offset: 2776
;       uint TranslucentBasePass_CalculateIrradiance; ; Offset: 2780
;       uint TranslucentBasePass_IrradianceProbeResolution;; Offset: 2784
;       uint TranslucentBasePass_OcclusionProbeResolution;; Offset: 2788
;       uint TranslucentBasePass_NumProbesToTraceBudget;; Offset: 2792
;       uint TranslucentBasePass_RadianceCacheStats;  ; Offset: 2796
;       uint BindlessResource_TranslucentBasePass_RadianceProbeIndirectionTexture;; Offset: 2800
;       uint PrePadding_TranslucentBasePass_2804;     ; Offset: 2804
;       uint BindlessResource_TranslucentBasePass_RadianceCacheFinalRadianceAtlas;; Offset: 2808
;       uint PrePadding_TranslucentBasePass_2812;     ; Offset: 2812
;       uint BindlessResource_TranslucentBasePass_RadianceCacheFinalIrradianceAtlas;; Offset: 2816
;       uint PrePadding_TranslucentBasePass_2820;     ; Offset: 2820
;       uint BindlessResource_TranslucentBasePass_RadianceCacheProbeOcclusionAtlas;; Offset: 2824
;       uint PrePadding_TranslucentBasePass_2828;     ; Offset: 2828
;       uint BindlessResource_TranslucentBasePass_RadianceCacheDepthAtlas;; Offset: 2832
;       uint PrePadding_TranslucentBasePass_2836;     ; Offset: 2836
;       uint BindlessResource_TranslucentBasePass_ProbeWorldOffset;; Offset: 2840
;       uint PrePadding_TranslucentBasePass_2844;     ; Offset: 2844
;       float4 TranslucentBasePass_RadianceProbeSettings[6];; Offset: 2848
;       float4 TranslucentBasePass_PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset: 2944
;       float4 TranslucentBasePass_PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset: 3040
;       float2 TranslucentBasePass_InvProbeFinalRadianceAtlasResolution;; Offset: 3136
;       float2 TranslucentBasePass_InvProbeFinalIrradianceAtlasResolution;; Offset: 3144
;       float2 TranslucentBasePass_InvProbeDepthAtlasResolution;; Offset: 3152
;       uint TranslucentBasePass_OverrideCacheOcclusionLighting;; Offset: 3160
;       uint TranslucentBasePass_ShowBlackRadianceCacheLighting;; Offset: 3164
;       uint TranslucentBasePass_ProbeAtlasResolutionModuloMask;; Offset: 3168
;       uint TranslucentBasePass_ProbeAtlasResolutionDivideShift;; Offset: 3172
;       float PrePadding_TranslucentBasePass_3176;    ; Offset: 3176
;       float PrePadding_TranslucentBasePass_3180;    ; Offset: 3180
;       uint BindlessResource_TranslucentBasePass_Radiance;; Offset: 3184
;       uint PrePadding_TranslucentBasePass_3188;     ; Offset: 3188
;       uint BindlessResource_TranslucentBasePass_Normal;; Offset: 3192
;       uint PrePadding_TranslucentBasePass_3196;     ; Offset: 3196
;       uint BindlessResource_TranslucentBasePass_SceneDepth;; Offset: 3200
;       uint PrePadding_TranslucentBasePass_3204;     ; Offset: 3204
;       uint TranslucentBasePass_Enabled;             ; Offset: 3208
;       float TranslucentBasePass_RelativeDepthThreshold;; Offset: 3212
;       float TranslucentBasePass_SpecularScale;      ; Offset: 3216
;       float TranslucentBasePass_Contrast;           ; Offset: 3220
;       float PrePadding_TranslucentBasePass_3224;    ; Offset: 3224
;       float PrePadding_TranslucentBasePass_3228;    ; Offset: 3228
;       uint BindlessResource_TranslucentBasePass_TranslucencyGIVolume0;; Offset: 3232
;       uint PrePadding_TranslucentBasePass_3236;     ; Offset: 3236
;       uint BindlessResource_TranslucentBasePass_TranslucencyGIVolume1;; Offset: 3240
;       uint PrePadding_TranslucentBasePass_3244;     ; Offset: 3244
;       uint BindlessResource_TranslucentBasePass_TranslucencyGIVolumeHistory0;; Offset: 3248
;       uint PrePadding_TranslucentBasePass_3252;     ; Offset: 3252
;       uint BindlessResource_TranslucentBasePass_TranslucencyGIVolumeHistory1;; Offset: 3256
;       uint PrePadding_TranslucentBasePass_3260;     ; Offset: 3260
;       uint BindlessSampler_TranslucentBasePass_TranslucencyGIVolumeSampler;; Offset: 3264
;       uint PrePadding_TranslucentBasePass_3268;     ; Offset: 3268
;       uint PrePadding_TranslucentBasePass_3272;     ; Offset: 3272
;       uint PrePadding_TranslucentBasePass_3276;     ; Offset: 3276
;       float3 TranslucentBasePass_TranslucencyGIGridZParams;; Offset: 3280
;       uint TranslucentBasePass_TranslucencyGIGridPixelSizeShift;; Offset: 3292
;       int3 TranslucentBasePass_TranslucencyGIGridSize;; Offset: 3296
;       float PrePadding_TranslucentBasePass_3308;    ; Offset: 3308
;       uint BindlessResource_TranslucentBasePass_PreIntegratedGFTexture;; Offset: 3312
;       uint PrePadding_TranslucentBasePass_3316;     ; Offset: 3316
;       uint BindlessSampler_TranslucentBasePass_PreIntegratedGFSampler;; Offset: 3320
;       uint PrePadding_TranslucentBasePass_3324;     ; Offset: 3324
;       uint BindlessResource_TranslucentBasePass_EyeAdaptationBuffer;; Offset: 3328
;       uint PrePadding_TranslucentBasePass_3332;     ; Offset: 3332
;       uint BindlessResource_TranslucentBasePass_SceneColorCopyTexture;; Offset: 3336
;       uint PrePadding_TranslucentBasePass_3340;     ; Offset: 3340
;       uint BindlessSampler_TranslucentBasePass_SceneColorCopySampler;; Offset: 3344
;       float PrePadding_TranslucentBasePass_BlueNoise_3348;; Offset: 3348
;       float PrePadding_TranslucentBasePass_BlueNoise_3352;; Offset: 3352
;       float PrePadding_TranslucentBasePass_BlueNoise_3356;; Offset: 3356
;       int3 TranslucentBasePass_BlueNoise_Dimensions;; Offset: 3360
;       int PrePadding_TranslucentBasePass_BlueNoise_3372;; Offset: 3372
;       int3 TranslucentBasePass_BlueNoise_ModuloMasks;; Offset: 3376
;       int PrePadding_TranslucentBasePass_BlueNoise_3388;; Offset: 3388
;       uint BindlessResource_TranslucentBasePass_BlueNoise_ScalarTexture;; Offset: 3392
;       uint PrePadding_TranslucentBasePass_BlueNoise_3396;; Offset: 3396
;       uint BindlessResource_TranslucentBasePass_BlueNoise_Vec2Texture;; Offset: 3400
;   
;   } UniformBufferConstants_TranslucentBasePass;     ; Offset:    0 Size:  3404
;
; }
;
; cbuffer UniformBufferConstants_ReflectionCaptureSM5
; {
;
;   struct hostlayout.UniformBufferConstants_ReflectionCaptureSM5
;   {
;
;       float4 ReflectionCaptureSM5_PositionAndRadius[341];; Offset:    0
;       float4 ReflectionCaptureSM5_TilePosition[341];; Offset: 5456
;       float4 ReflectionCaptureSM5_CaptureProperties[341];; Offset:10912
;       float4 ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[341];; Offset:16368
;       row_major float4x4 ReflectionCaptureSM5_BoxTransform[341];; Offset:21824
;       float4 ReflectionCaptureSM5_BoxScales[341];   ; Offset:43648
;   
;   } UniformBufferConstants_ReflectionCaptureSM5;    ; Offset:    0 Size: 49104
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[3];           ; Offset:    0
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:   48
;       uint PrePadding_Material_52;                  ; Offset:   52
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:   56
;       uint PrePadding_Material_60;                  ; Offset:   60
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:   64
;       uint PrePadding_Material_68;                  ; Offset:   68
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:   72
;       uint PrePadding_Material_76;                  ; Offset:   76
;       uint BindlessResource_Material_Texture2D_2;   ; Offset:   80
;       uint PrePadding_Material_84;                  ; Offset:   84
;       uint BindlessSampler_Material_Texture2D_2Sampler;; Offset:   88
;       uint PrePadding_Material_92;                  ; Offset:   92
;       uint BindlessResource_Material_Texture2D_3;   ; Offset:   96
;       uint PrePadding_Material_100;                 ; Offset:  100
;       uint BindlessSampler_Material_Texture2D_3Sampler;; Offset:  104
;       uint PrePadding_Material_108;                 ; Offset:  108
;       uint BindlessResource_Material_Texture2D_4;   ; Offset:  112
;       uint PrePadding_Material_116;                 ; Offset:  116
;       uint BindlessSampler_Material_Texture2D_4Sampler;; Offset:  120
;       uint PrePadding_Material_124;                 ; Offset:  124
;       uint BindlessResource_Material_Texture2D_5;   ; Offset:  128
;       uint PrePadding_Material_132;                 ; Offset:  132
;       uint BindlessSampler_Material_Texture2D_5Sampler;; Offset:  136
;       uint PrePadding_Material_140;                 ; Offset:  140
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  144
;       uint PrePadding_Material_148;                 ; Offset:  148
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  152
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   156
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for TranslucentBasePass_Shared_Forward_NumCulledLightsGrid
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for TranslucentBasePass_ProbeWorldOffset
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_TranslucentBasePass   cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ReflectionCaptureSM5   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S1   s3,space1000     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S2             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S3             s1     1
; View_CameraAerialPerspectiveVolumeSampler   sampler      NA          NA      S4             s2     1
; TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler   sampler      NA          NA      S5             s3     1
; TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler   sampler      NA          NA      S6             s4     1
; TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler   sampler      NA          NA      S7             s5     1
; TranslucentBasePass_TranslucencyGIVolumeSampler   sampler      NA          NA      S8             s6     1
; TranslucentBasePass_HZBSampler    sampler      NA          NA      S9             s7     1
; TranslucentBasePass_PrevSceneColorSampler   sampler      NA          NA     S10             s8     1
; TranslucentBasePass_VolumetricCloudColorSampler   sampler      NA          NA     S11             s9     1
; TranslucentBasePass_VolumetricCloudDepthSampler   sampler      NA          NA     S12            s10     1
; Material_Texture2D_0Sampler       sampler      NA          NA     S13            s11     1
; Material_Texture2D_1Sampler       sampler      NA          NA     S14            s12     1
; Material_Texture2D_2Sampler       sampler      NA          NA     S15            s13     1
; Material_Texture2D_3Sampler       sampler      NA          NA     S16            s14     1
; Material_Texture2D_4Sampler       sampler      NA          NA     S17            s15     1
; Material_Texture2D_5Sampler       sampler      NA          NA     S18            s16     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o      T0             t0     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T1             t1     1
; View_CameraAerialPerspectiveVolume   texture     f32          3d      T2             t2     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T3             t3     1
; TranslucentBasePass_Shared_Forward_NumCulledLightsGrid   texture  struct         r/o      T4             t4     1
; TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit   texture     u32         buf      T5             t5     1
; TranslucentBasePass_Shared_Reflection_SkyLightCubemap   texture     f32        cube      T6             t6     1
; TranslucentBasePass_Shared_Reflection_ReflectionCubemap   texture     f32   cubearray      T7             t7     1
; TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture   texture     f32          2d      T8             t8     1
; TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap   texture     f32        cube      T9             t9     1
; TranslucentBasePass_Shared_Fog_IntegratedLightScattering   texture     f32          3d     T10            t10     1
; TranslucentBasePass_TranslucencyLightingVolumeAmbientInner   texture     f32          3d     T11            t11     1
; TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter   texture     f32          3d     T12            t12     1
; TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner   texture     f32          3d     T13            t13     1
; TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter   texture     f32          3d     T14            t14     1
; TranslucentBasePass_RadianceProbeIndirectionTexture   texture     u32          3d     T15            t15     1
; TranslucentBasePass_RadianceCacheFinalRadianceAtlas   texture     f32          2d     T16            t16     1
; TranslucentBasePass_ProbeWorldOffset   texture  struct         r/o     T17            t17     1
; TranslucentBasePass_Radiance      texture     f32          2d     T18            t18     1
; TranslucentBasePass_SceneDepth    texture     f32          2d     T19            t19     1
; TranslucentBasePass_TranslucencyGIVolumeHistory0   texture     f32          3d     T20            t20     1
; TranslucentBasePass_TranslucencyGIVolumeHistory1   texture     f32          3d     T21            t21     1
; TranslucentBasePass_HZBTexture    texture     f32          2d     T22            t22     1
; TranslucentBasePass_PrevSceneColor   texture     f32          2d     T23            t23     1
; TranslucentBasePass_VolumetricCloudColor   texture     f32          2d     T24            t24     1
; TranslucentBasePass_VolumetricCloudDepth   texture     f32          2d     T25            t25     1
; Material_Texture2D_0              texture     f32          2d     T26            t26     1
; Material_Texture2D_1              texture     f32          2d     T27            t27     1
; Material_Texture2D_2              texture     f32          2d     T28            t28     1
; Material_Texture2D_3              texture     f32          2d     T29            t29     1
; Material_Texture2D_4              texture     f32          2d     T30            t30     1
; Material_Texture2D_5              texture     f32          2d     T31            t31     1
;
;
; ViewId state:
;
; Number of inputs: 24, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 16, 17, 18, 20, 21, 22, 23 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 20, 21, 22, 23 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 16, 17, 18, 20, 21, 22, 23 }
;   output 3 depends on inputs: { 8, 9, 12, 16, 17, 18, 20, 21, 22 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.TextureCubeArray<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_TranslucentBasePass = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [3 x <4 x float>], <3 x float>, float, <2 x float>, float, float, [2 x [4 x <4 x float>]], [2 x <4 x float>], <2 x float>, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, [4 x <4 x float>], float, float, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <4 x float>, <2 x float>, <2 x float>, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, i32, <3 x i32>, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_ReflectionCaptureSM5 = type { [341 x <4 x float>], [341 x <4 x float>], [341 x <4 x float>], [341 x <4 x float>], [341 x [4 x <4 x float>]], [341 x <4 x float>] }
%UniformBufferConstants_Material = type { [3 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 31, i32 31, i32 0, i8 0 }, i32 31, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 30, i32 30, i32 0, i8 0 }, i32 30, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 29, i32 29, i32 0, i8 0 }, i32 29, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 28, i32 28, i32 0, i8 0 }, i32 28, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 27, i32 27, i32 0, i8 0 }, i32 27, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 3 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 3 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 3 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 3 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 3 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 3 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 3 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 3 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 3 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 3 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %47 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %48 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %49 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %50 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %51 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %52 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %53 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %54 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %55 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %56 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %52, %dx.types.ResourceProperties { i32 13, i32 156 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %53, %dx.types.ResourceProperties { i32 13, i32 49104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %58 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %54, %dx.types.ResourceProperties { i32 13, i32 3404 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %55, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %60 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %61 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %62 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %63 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %64 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %65 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %66 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %67 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %68 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %69 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %70 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %71 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %72 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %73 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %74 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %75 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.i32 %75, 1
  %77 = extractvalue %dx.types.CBufRet.i32 %75, 3
  %78 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.i32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.i32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.i32 %78, 2
  %82 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.i32 %82, 0
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 90)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 95)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 96)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 97)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = extractvalue %dx.types.CBufRet.f32 %101, 3
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 98)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %109 = extractvalue %dx.types.CBufRet.f32 %106, 2
  %110 = extractvalue %dx.types.CBufRet.f32 %106, 3
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 99)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = extractvalue %dx.types.CBufRet.f32 %111, 2
  %115 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 100)  ; CBufferLoadLegacy(handle,regIndex)
  %116 = extractvalue %dx.types.CBufRet.f32 %115, 0
  %117 = extractvalue %dx.types.CBufRet.f32 %115, 1
  %118 = extractvalue %dx.types.CBufRet.f32 %115, 2
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 101)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %121 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %122 = extractvalue %dx.types.CBufRet.f32 %119, 2
  %123 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 102)  ; CBufferLoadLegacy(handle,regIndex)
  %124 = extractvalue %dx.types.CBufRet.f32 %123, 0
  %125 = extractvalue %dx.types.CBufRet.f32 %123, 1
  %126 = extractvalue %dx.types.CBufRet.f32 %123, 2
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 103)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 0
  %132 = extractvalue %dx.types.CBufRet.f32 %130, 1
  %133 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.i32 %133, 2
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 0
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = extractvalue %dx.types.CBufRet.f32 %135, 3
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 117)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = extractvalue %dx.types.CBufRet.f32 %140, 3
  %145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 118)  ; CBufferLoadLegacy(handle,regIndex)
  %146 = extractvalue %dx.types.CBufRet.f32 %145, 0
  %147 = extractvalue %dx.types.CBufRet.f32 %145, 1
  %148 = extractvalue %dx.types.CBufRet.f32 %145, 2
  %149 = extractvalue %dx.types.CBufRet.f32 %145, 3
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 119)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = extractvalue %dx.types.CBufRet.f32 %150, 3
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 120)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 121)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 3
  %161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 122)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.f32 %161, 0
  %163 = extractvalue %dx.types.CBufRet.f32 %161, 1
  %164 = extractvalue %dx.types.CBufRet.f32 %161, 2
  %165 = extractvalue %dx.types.CBufRet.f32 %161, 3
  %166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 123)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.f32 %166, 0
  %168 = extractvalue %dx.types.CBufRet.f32 %166, 1
  %169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %170 = extractvalue %dx.types.CBufRet.f32 %169, 0
  %171 = extractvalue %dx.types.CBufRet.f32 %169, 1
  %172 = extractvalue %dx.types.CBufRet.f32 %169, 2
  %173 = extractvalue %dx.types.CBufRet.f32 %169, 3
  %174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.f32 %174, 0
  %176 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.i32 %176, 0
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 161)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 0
  %180 = extractvalue %dx.types.CBufRet.f32 %178, 1
  %181 = extractvalue %dx.types.CBufRet.f32 %178, 2
  %182 = extractvalue %dx.types.CBufRet.f32 %178, 3
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 1
  %186 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %187 = extractvalue %dx.types.CBufRet.f32 %183, 3
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 163)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 0
  %190 = extractvalue %dx.types.CBufRet.f32 %188, 1
  %191 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 164)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 0
  %195 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 164)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.i32 %195, 1
  %197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 168)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.f32 %197, 2
  %199 = extractvalue %dx.types.CBufRet.f32 %197, 3
  %200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 171)  ; CBufferLoadLegacy(handle,regIndex)
  %201 = extractvalue %dx.types.CBufRet.f32 %200, 0
  %202 = extractvalue %dx.types.CBufRet.f32 %200, 3
  %203 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 172)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.i32 %203, 2
  %205 = extractvalue %dx.types.CBufRet.i32 %203, 3
  %206 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 173)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.i32 %206, 0
  %208 = extractvalue %dx.types.CBufRet.i32 %206, 1
  %209 = extractvalue %dx.types.CBufRet.i32 %206, 2
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 196)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 198)  ; CBufferLoadLegacy(handle,regIndex)
  %214 = extractvalue %dx.types.CBufRet.i32 %213, 0
  %215 = extractvalue %dx.types.CBufRet.i32 %213, 1
  %216 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 200)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.i32 %216, 2
  %218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 200)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.f32 %218, 3
  %220 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 201)  ; CBufferLoadLegacy(handle,regIndex)
  %221 = extractvalue %dx.types.CBufRet.f32 %220, 0
  %222 = extractvalue %dx.types.CBufRet.f32 %220, 1
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 205)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %227 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 206)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.i32 %227, 2
  %229 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %230 = extractvalue %dx.types.CBufRet.f32 %229, 0
  %231 = extractvalue %dx.types.CBufRet.f32 %229, 1
  %232 = extractvalue %dx.types.CBufRet.f32 %229, 3
  %233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %234 = extractvalue %dx.types.CBufRet.f32 %233, 0
  %235 = extractvalue %dx.types.CBufRet.f32 %233, 1
  %236 = extractvalue %dx.types.CBufRet.f32 %233, 3
  %237 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.f32 %237, 0
  %239 = extractvalue %dx.types.CBufRet.f32 %237, 1
  %240 = extractvalue %dx.types.CBufRet.f32 %237, 3
  %241 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %242 = extractvalue %dx.types.CBufRet.f32 %241, 0
  %243 = extractvalue %dx.types.CBufRet.f32 %241, 1
  %244 = extractvalue %dx.types.CBufRet.f32 %241, 3
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %245, 3
  %249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.f32 %249, 0
  %251 = extractvalue %dx.types.CBufRet.f32 %249, 1
  %252 = extractvalue %dx.types.CBufRet.f32 %249, 3
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 3
  %257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %258 = extractvalue %dx.types.CBufRet.f32 %257, 0
  %259 = extractvalue %dx.types.CBufRet.f32 %257, 1
  %260 = extractvalue %dx.types.CBufRet.f32 %257, 3
  %261 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %262 = extractvalue %dx.types.CBufRet.f32 %261, 0
  %263 = extractvalue %dx.types.CBufRet.f32 %261, 1
  %264 = extractvalue %dx.types.CBufRet.f32 %261, 2
  %265 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %266 = extractvalue %dx.types.CBufRet.f32 %265, 0
  %267 = extractvalue %dx.types.CBufRet.f32 %265, 1
  %268 = extractvalue %dx.types.CBufRet.f32 %265, 2
  %269 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %270 = extractvalue %dx.types.CBufRet.f32 %269, 0
  %271 = extractvalue %dx.types.CBufRet.f32 %269, 1
  %272 = extractvalue %dx.types.CBufRet.f32 %269, 2
  %273 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %274 = extractvalue %dx.types.CBufRet.f32 %273, 0
  %275 = extractvalue %dx.types.CBufRet.f32 %273, 1
  %276 = extractvalue %dx.types.CBufRet.f32 %273, 2
  %277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %278 = extractvalue %dx.types.CBufRet.f32 %277, 3
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 0
  %281 = extractvalue %dx.types.CBufRet.f32 %279, 1
  %282 = extractvalue %dx.types.CBufRet.f32 %279, 2
  %283 = extractvalue %dx.types.CBufRet.f32 %279, 3
  %284 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %285 = extractvalue %dx.types.CBufRet.f32 %284, 0
  %286 = extractvalue %dx.types.CBufRet.f32 %284, 1
  %287 = extractvalue %dx.types.CBufRet.f32 %284, 2
  %288 = extractvalue %dx.types.CBufRet.f32 %284, 3
  %289 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %290 = extractvalue %dx.types.CBufRet.f32 %289, 0
  %291 = extractvalue %dx.types.CBufRet.f32 %289, 1
  %292 = extractvalue %dx.types.CBufRet.f32 %289, 2
  %293 = extractvalue %dx.types.CBufRet.f32 %289, 3
  %294 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.f32 %294, 0
  %296 = extractvalue %dx.types.CBufRet.f32 %294, 1
  %297 = extractvalue %dx.types.CBufRet.f32 %294, 2
  %298 = extractvalue %dx.types.CBufRet.f32 %294, 3
  %299 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.f32 %299, 0
  %301 = extractvalue %dx.types.CBufRet.f32 %299, 1
  %302 = extractvalue %dx.types.CBufRet.f32 %299, 2
  %303 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %304 = extractvalue %dx.types.CBufRet.f32 %303, 0
  %305 = extractvalue %dx.types.CBufRet.f32 %303, 1
  %306 = extractvalue %dx.types.CBufRet.f32 %303, 2
  %307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 62)  ; CBufferLoadLegacy(handle,regIndex)
  %308 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %309 = extractvalue %dx.types.CBufRet.f32 %308, 0
  %310 = extractvalue %dx.types.CBufRet.f32 %308, 1
  %311 = extractvalue %dx.types.CBufRet.f32 %308, 2
  %312 = extractvalue %dx.types.CBufRet.f32 %308, 3
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = extractvalue %dx.types.CBufRet.f32 %313, 2
  %317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %318 = extractvalue %dx.types.CBufRet.f32 %317, 0
  %319 = extractvalue %dx.types.CBufRet.f32 %317, 1
  %320 = extractvalue %dx.types.CBufRet.f32 %317, 2
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %326 = extractvalue %dx.types.CBufRet.f32 %325, 0
  %327 = extractvalue %dx.types.CBufRet.f32 %325, 1
  %328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %329 = extractvalue %dx.types.CBufRet.f32 %328, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %328, 3
  %331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.f32 %331, 3
  %333 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 135)  ; CBufferLoadLegacy(handle,regIndex)
  %334 = extractvalue %dx.types.CBufRet.f32 %333, 0
  %335 = extractvalue %dx.types.CBufRet.f32 %333, 1
  %336 = extractvalue %dx.types.CBufRet.f32 %333, 2
  %337 = extractvalue %dx.types.CBufRet.f32 %333, 3
  %338 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %339 = extractvalue %dx.types.CBufRet.f32 %338, 0
  %340 = extractvalue %dx.types.CBufRet.f32 %338, 1
  %341 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 176)  ; CBufferLoadLegacy(handle,regIndex)
  %342 = extractvalue %dx.types.CBufRet.f32 %341, 0
  %343 = extractvalue %dx.types.CBufRet.f32 %341, 1
  %344 = extractvalue %dx.types.CBufRet.f32 %341, 2
  %345 = extractvalue %dx.types.CBufRet.f32 %341, 3
  %346 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 177)  ; CBufferLoadLegacy(handle,regIndex)
  %347 = extractvalue %dx.types.CBufRet.f32 %346, 0
  %348 = extractvalue %dx.types.CBufRet.f32 %346, 1
  %349 = extractvalue %dx.types.CBufRet.f32 %346, 2
  %350 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 178)  ; CBufferLoadLegacy(handle,regIndex)
  %351 = extractvalue %dx.types.CBufRet.f32 %350, 0
  %352 = extractvalue %dx.types.CBufRet.f32 %350, 1
  %353 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 180)  ; CBufferLoadLegacy(handle,regIndex)
  %354 = extractvalue %dx.types.CBufRet.f32 %353, 0
  %355 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %356 = extractvalue %dx.types.CBufRet.f32 %355, 0
  %357 = extractvalue %dx.types.CBufRet.f32 %355, 1
  %358 = extractvalue %dx.types.CBufRet.f32 %355, 2
  %359 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 194)  ; CBufferLoadLegacy(handle,regIndex)
  %360 = extractvalue %dx.types.CBufRet.i32 %359, 3
  %361 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %362 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %363 = fmul fast float %74, %69
  %364 = fmul fast float %73, %70
  %365 = fsub fast float %363, %364
  %366 = fmul fast float %72, %70
  %367 = fmul fast float %74, %68
  %368 = fsub fast float %366, %367
  %369 = fmul fast float %73, %68
  %370 = fmul fast float %72, %69
  %371 = fsub fast float %369, %370
  %372 = fmul fast float %365, %71
  %373 = fmul fast float %368, %71
  %374 = fmul fast float %371, %71
  %375 = fsub fast float %60, %326
  %376 = fsub fast float %61, %327
  %377 = fmul fast float %375, %329
  %378 = fmul fast float %376, %330
  %379 = fadd fast float %377, -5.000000e-01
  %380 = fadd fast float %378, -5.000000e-01
  %381 = fmul fast float %63, 2.000000e+00
  %382 = fmul fast float %381, %379
  %383 = fmul fast float %63, -2.000000e+00
  %384 = fmul fast float %383, %380
  %385 = fmul fast float %280, %60
  %386 = call float @dx.op.tertiary.f32(i32 46, float %61, float %285, float %385)  ; FMad(a,b,c)
  %387 = call float @dx.op.tertiary.f32(i32 46, float %62, float %290, float %386)  ; FMad(a,b,c)
  %388 = fadd fast float %387, %295
  %389 = fmul fast float %281, %60
  %390 = call float @dx.op.tertiary.f32(i32 46, float %61, float %286, float %389)  ; FMad(a,b,c)
  %391 = call float @dx.op.tertiary.f32(i32 46, float %62, float %291, float %390)  ; FMad(a,b,c)
  %392 = fadd fast float %391, %296
  %393 = fmul fast float %282, %60
  %394 = call float @dx.op.tertiary.f32(i32 46, float %61, float %287, float %393)  ; FMad(a,b,c)
  %395 = call float @dx.op.tertiary.f32(i32 46, float %62, float %292, float %394)  ; FMad(a,b,c)
  %396 = fadd fast float %395, %297
  %397 = fmul fast float %283, %60
  %398 = call float @dx.op.tertiary.f32(i32 46, float %61, float %288, float %397)  ; FMad(a,b,c)
  %399 = call float @dx.op.tertiary.f32(i32 46, float %62, float %293, float %398)  ; FMad(a,b,c)
  %400 = fadd fast float %399, %298
  %401 = fdiv fast float %388, %400
  %402 = fdiv fast float %392, %400
  %403 = fdiv fast float %396, %400
  %404 = fsub fast float %401, %322
  %405 = fsub fast float %402, %323
  %406 = fsub fast float %403, %324
  %407 = fdiv fast float %382, %63
  %408 = fdiv fast float %384, %63
  %409 = fmul fast float %407, %309
  %410 = fmul fast float %408, %310
  %411 = fadd fast float %409, %312
  %412 = fadd fast float %410, %311
  %413 = fcmp fast ult float %278, 1.000000e+00
  br i1 %413, label %421, label %414

; <label>:414                                     ; preds = %0
  %415 = extractvalue %dx.types.CBufRet.f32 %307, 2
  %416 = extractvalue %dx.types.CBufRet.f32 %307, 1
  %417 = extractvalue %dx.types.CBufRet.f32 %307, 0
  %418 = fsub fast float -0.000000e+00, %417
  %419 = fsub fast float -0.000000e+00, %416
  %420 = fsub fast float -0.000000e+00, %415
  br label %430

; <label>:421                                     ; preds = %0
  %422 = fsub fast float -0.000000e+00, %401
  %423 = fsub fast float -0.000000e+00, %402
  %424 = fsub fast float -0.000000e+00, %403
  %425 = call float @dx.op.dot3.f32(i32 55, float %422, float %423, float %424, float %422, float %423, float %424)  ; Dot3(ax,ay,az,bx,by,bz)
  %426 = call float @dx.op.unary.f32(i32 25, float %425)  ; Rsqrt(value)
  %427 = fmul fast float %426, %422
  %428 = fmul fast float %426, %423
  %429 = fmul fast float %426, %424
  br label %430

; <label>:430                                     ; preds = %421, %414
  %431 = phi float [ %418, %414 ], [ %427, %421 ]
  %432 = phi float [ %419, %414 ], [ %428, %421 ]
  %433 = phi float [ %420, %414 ], [ %429, %421 ]
  %434 = fadd fast float %337, %336
  %435 = call float @dx.op.dot3.f32(i32 55, float %334, float %335, float %434, float %334, float %335, float %434)  ; Dot3(ax,ay,az,bx,by,bz)
  %436 = call float @dx.op.unary.f32(i32 25, float %435)  ; Rsqrt(value)
  %437 = fmul fast float %436, %334
  %438 = fmul fast float %436, %335
  %439 = fmul fast float %436, %434
  %440 = fmul fast float %437, %72
  %441 = call float @dx.op.tertiary.f32(i32 46, float %438, float %372, float %440)  ; FMad(a,b,c)
  %442 = call float @dx.op.tertiary.f32(i32 46, float %439, float %68, float %441)  ; FMad(a,b,c)
  %443 = fmul fast float %437, %73
  %444 = call float @dx.op.tertiary.f32(i32 46, float %438, float %373, float %443)  ; FMad(a,b,c)
  %445 = call float @dx.op.tertiary.f32(i32 46, float %439, float %69, float %444)  ; FMad(a,b,c)
  %446 = fmul fast float %437, %74
  %447 = call float @dx.op.tertiary.f32(i32 46, float %438, float %374, float %446)  ; FMad(a,b,c)
  %448 = call float @dx.op.tertiary.f32(i32 46, float %439, float %70, float %447)  ; FMad(a,b,c)
  %449 = call float @dx.op.dot3.f32(i32 55, float %442, float %445, float %448, float %442, float %445, float %448)  ; Dot3(ax,ay,az,bx,by,bz)
  %450 = call float @dx.op.unary.f32(i32 25, float %449)  ; Rsqrt(value)
  %451 = fmul fast float %450, %442
  %452 = fmul fast float %450, %445
  %453 = fmul fast float %450, %448
  %454 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %455 = extractvalue %dx.types.CBufRet.f32 %454, 0
  %456 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %457 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %458 = call %dx.types.ResRet.f32 @dx.op.sampleBias.f32(i32 61, %dx.types.Handle %456, %dx.types.Handle %457, float %361, float %362, float undef, float undef, i32 0, i32 0, i32 undef, float %455, float undef)  ; SampleBias(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,bias,clamp)
  %459 = extractvalue %dx.types.ResRet.f32 %458, 0
  %460 = extractvalue %dx.types.ResRet.f32 %458, 1
  %461 = extractvalue %dx.types.ResRet.f32 %458, 2
  %462 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %463 = extractvalue %dx.types.CBufRet.f32 %462, 0
  %464 = extractvalue %dx.types.CBufRet.f32 %462, 1
  %465 = extractvalue %dx.types.CBufRet.f32 %462, 2
  %466 = extractvalue %dx.types.CBufRet.f32 %462, 3
  %467 = fsub fast float %464, %459
  %468 = fsub fast float %465, %460
  %469 = fsub fast float %466, %461
  %470 = fmul fast float %467, %463
  %471 = fmul fast float %468, %463
  %472 = fmul fast float %469, %463
  %473 = fadd fast float %470, %459
  %474 = fadd fast float %471, %460
  %475 = fadd fast float %472, %461
  %476 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %477 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %478 = call %dx.types.ResRet.f32 @dx.op.sampleBias.f32(i32 61, %dx.types.Handle %476, %dx.types.Handle %477, float %361, float %362, float undef, float undef, i32 0, i32 0, i32 undef, float %455, float undef)  ; SampleBias(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,bias,clamp)
  %479 = extractvalue %dx.types.ResRet.f32 %478, 0
  %480 = extractvalue %dx.types.ResRet.f32 %478, 1
  %481 = extractvalue %dx.types.ResRet.f32 %478, 2
  %482 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %483 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %484 = call %dx.types.ResRet.f32 @dx.op.sampleBias.f32(i32 61, %dx.types.Handle %482, %dx.types.Handle %483, float %361, float %362, float undef, float undef, i32 0, i32 0, i32 undef, float %455, float undef)  ; SampleBias(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,bias,clamp)
  %485 = extractvalue %dx.types.ResRet.f32 %484, 0
  %486 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %487 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %488 = call %dx.types.ResRet.f32 @dx.op.sampleBias.f32(i32 61, %dx.types.Handle %486, %dx.types.Handle %487, float %361, float %362, float undef, float undef, i32 0, i32 0, i32 undef, float %455, float undef)  ; SampleBias(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,bias,clamp)
  %489 = extractvalue %dx.types.ResRet.f32 %488, 0
  %490 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %492 = call %dx.types.ResRet.f32 @dx.op.sampleBias.f32(i32 61, %dx.types.Handle %490, %dx.types.Handle %491, float %361, float %362, float undef, float undef, i32 0, i32 0, i32 undef, float %455, float undef)  ; SampleBias(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,bias,clamp)
  %493 = extractvalue %dx.types.ResRet.f32 %492, 0
  %494 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %495 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %496 = call %dx.types.ResRet.f32 @dx.op.sampleBias.f32(i32 61, %dx.types.Handle %494, %dx.types.Handle %495, float %361, float %362, float undef, float undef, i32 0, i32 0, i32 undef, float %455, float undef)  ; SampleBias(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,bias,clamp)
  %497 = extractvalue %dx.types.ResRet.f32 %496, 0
  %498 = call float @dx.op.unary.f32(i32 7, float %479)  ; Saturate(value)
  %499 = call float @dx.op.unary.f32(i32 7, float %480)  ; Saturate(value)
  %500 = call float @dx.op.unary.f32(i32 7, float %481)  ; Saturate(value)
  %501 = call float @dx.op.unary.f32(i32 7, float %485)  ; Saturate(value)
  %502 = call float @dx.op.unary.f32(i32 7, float %489)  ; Saturate(value)
  %503 = fmul fast float %502, %340
  %504 = fadd fast float %503, %339
  %505 = call float @dx.op.unary.f32(i32 7, float %493)  ; Saturate(value)
  %506 = call float @dx.op.unary.f32(i32 7, float %497)  ; Saturate(value)
  %507 = fadd fast float %498, 0xBFA47AE140000000
  %508 = fadd fast float %499, 0xBFA47AE140000000
  %509 = fadd fast float %500, 0xBFA47AE140000000
  %510 = fmul fast float %501, %507
  %511 = fmul fast float %501, %508
  %512 = fmul fast float %501, %509
  %513 = fadd fast float %510, 0x3FA47AE140000000
  %514 = fadd fast float %511, 0x3FA47AE140000000
  %515 = fadd fast float %512, 0x3FA47AE140000000
  %516 = fmul fast float %501, %498
  %517 = fmul fast float %501, %499
  %518 = fmul fast float %501, %500
  %519 = fsub fast float %498, %516
  %520 = fsub fast float %499, %517
  %521 = fsub fast float %500, %518
  %522 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %523 = extractvalue %dx.types.CBufRet.f32 %522, 3
  %524 = fmul fast float %523, %519
  %525 = fmul fast float %523, %520
  %526 = fmul fast float %523, %521
  %527 = extractvalue %dx.types.CBufRet.f32 %522, 0
  %528 = extractvalue %dx.types.CBufRet.f32 %522, 1
  %529 = extractvalue %dx.types.CBufRet.f32 %522, 2
  %530 = fadd fast float %524, %527
  %531 = fadd fast float %525, %528
  %532 = fadd fast float %526, %529
  %533 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %534 = extractvalue %dx.types.CBufRet.f32 %533, 3
  %535 = fmul fast float %534, %513
  %536 = fmul fast float %534, %514
  %537 = fmul fast float %534, %515
  %538 = extractvalue %dx.types.CBufRet.f32 %533, 0
  %539 = extractvalue %dx.types.CBufRet.f32 %533, 1
  %540 = extractvalue %dx.types.CBufRet.f32 %533, 2
  %541 = fadd fast float %535, %538
  %542 = fadd fast float %536, %539
  %543 = fadd fast float %537, %540
  %544 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %545 = extractvalue %dx.types.CBufRet.f32 %544, 3
  %546 = fcmp fast une float %545, 0.000000e+00
  %547 = fmul fast float %541, 0x3FDCCCCCC0000000
  %548 = fmul fast float %542, 0x3FDCCCCCC0000000
  %549 = fmul fast float %543, 0x3FDCCCCCC0000000
  %550 = fadd fast float %547, %530
  %551 = fadd fast float %548, %531
  %552 = fadd fast float %549, %532
  %553 = select i1 %546, float %550, float %530
  %554 = select i1 %546, float %551, float %531
  %555 = select i1 %546, float %552, float %532
  %556 = select i1 %546, float 0.000000e+00, float %541
  %557 = select i1 %546, float 0.000000e+00, float %542
  %558 = select i1 %546, float 0.000000e+00, float %543
  %559 = icmp sgt i32 %228, 0
  br i1 %559, label %560, label %631

; <label>:560                                     ; preds = %430
  %561 = fsub fast float %300, %304
  %562 = fsub fast float %301, %305
  %563 = fsub fast float %302, %306
  %564 = fmul fast float %561, 2.097152e+06
  %565 = fmul fast float %562, 2.097152e+06
  %566 = fmul fast float %563, 2.097152e+06
  %567 = fadd fast float %404, %564
  %568 = fadd fast float %405, %565
  %569 = fadd fast float %406, %566
  %570 = fmul fast float %567, %246
  %571 = call float @dx.op.tertiary.f32(i32 46, float %568, float %250, float %570)  ; FMad(a,b,c)
  %572 = call float @dx.op.tertiary.f32(i32 46, float %569, float %254, float %571)  ; FMad(a,b,c)
  %573 = fadd fast float %572, %258
  %574 = fmul fast float %567, %247
  %575 = call float @dx.op.tertiary.f32(i32 46, float %568, float %251, float %574)  ; FMad(a,b,c)
  %576 = call float @dx.op.tertiary.f32(i32 46, float %569, float %255, float %575)  ; FMad(a,b,c)
  %577 = fadd fast float %576, %259
  %578 = fmul fast float %567, %248
  %579 = call float @dx.op.tertiary.f32(i32 46, float %568, float %252, float %578)  ; FMad(a,b,c)
  %580 = call float @dx.op.tertiary.f32(i32 46, float %569, float %256, float %579)  ; FMad(a,b,c)
  %581 = fadd fast float %580, %260
  %582 = fdiv fast float %573, %581
  %583 = fdiv fast float %577, %581
  %584 = fmul fast float %581, %224
  %585 = fadd fast float %584, %225
  %586 = call float @dx.op.unary.f32(i32 23, float %585)  ; Log(value)
  %587 = fmul fast float %586, %226
  %588 = sitofp i32 %228 to float
  %589 = fdiv fast float %587, %588
  %590 = fmul fast float %582, 5.000000e-01
  %591 = fmul fast float %583, 5.000000e-01
  %592 = fadd fast float %590, 5.000000e-01
  %593 = fsub fast float 5.000000e-01, %591
  %594 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %596 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %594, %dx.types.Handle %595, float %592, float %593, float %589, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %597 = extractvalue %dx.types.ResRet.f32 %596, 0
  %598 = extractvalue %dx.types.ResRet.f32 %596, 1
  %599 = extractvalue %dx.types.ResRet.f32 %596, 2
  %600 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %601 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %600, %dx.types.Handle %595, float %592, float %593, float %589, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %602 = extractvalue %dx.types.ResRet.f32 %601, 0
  %603 = extractvalue %dx.types.ResRet.f32 %601, 1
  %604 = extractvalue %dx.types.ResRet.f32 %601, 2
  %605 = call float @dx.op.dot3.f32(i32 55, float %597, float %598, float %599, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %606 = fadd fast float %605, 0x3EE4F8B580000000
  %607 = fdiv fast float %597, %606
  %608 = fdiv fast float %598, %606
  %609 = fdiv fast float %599, %606
  %610 = fmul fast float %607, %602
  %611 = fmul fast float %607, %603
  %612 = fmul fast float %607, %604
  %613 = fmul fast float %608, %602
  %614 = fmul fast float %608, %603
  %615 = fmul fast float %608, %604
  %616 = fmul fast float %609, %602
  %617 = fmul fast float %609, %603
  %618 = fmul fast float %609, %604
  %619 = fmul fast float %452, 0xBFF05F8CE0000000
  %620 = fmul fast float %453, 0x3FF05F8CE0000000
  %621 = fmul fast float %451, 0xBFF05F8CE0000000
  %622 = call float @dx.op.dot4.f32(i32 56, float %597, float %610, float %611, float %612, float 0x3FEC5BF9E0000000, float %619, float %620, float %621)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %623 = call float @dx.op.dot4.f32(i32 56, float %598, float %613, float %614, float %615, float 0x3FEC5BF9E0000000, float %619, float %620, float %621)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %624 = call float @dx.op.dot4.f32(i32 56, float %599, float %616, float %617, float %618, float 0x3FEC5BF9E0000000, float %619, float %620, float %621)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %625 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %622)  ; FMax(a,b)
  %626 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %623)  ; FMax(a,b)
  %627 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %624)  ; FMax(a,b)
  %628 = fmul fast float %625, 0x3FD45F3060000000
  %629 = fmul fast float %626, 0x3FD45F3060000000
  %630 = fmul fast float %627, 0x3FD45F3060000000
  br label %697

; <label>:631                                     ; preds = %430
  %632 = icmp eq i32 %177, 0
  br i1 %632, label %697, label %633

; <label>:633                                     ; preds = %631
  %634 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %635 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %636 = extractvalue %dx.types.ResRet.f32 %635, 0
  %637 = extractvalue %dx.types.ResRet.f32 %635, 1
  %638 = extractvalue %dx.types.ResRet.f32 %635, 2
  %639 = extractvalue %dx.types.ResRet.f32 %635, 3
  %640 = call float @dx.op.dot4.f32(i32 56, float %636, float %637, float %638, float %639, float %451, float %452, float %453, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %641 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %642 = extractvalue %dx.types.ResRet.f32 %641, 0
  %643 = extractvalue %dx.types.ResRet.f32 %641, 1
  %644 = extractvalue %dx.types.ResRet.f32 %641, 2
  %645 = extractvalue %dx.types.ResRet.f32 %641, 3
  %646 = call float @dx.op.dot4.f32(i32 56, float %642, float %643, float %644, float %645, float %451, float %452, float %453, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %647 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %648 = extractvalue %dx.types.ResRet.f32 %647, 0
  %649 = extractvalue %dx.types.ResRet.f32 %647, 1
  %650 = extractvalue %dx.types.ResRet.f32 %647, 2
  %651 = extractvalue %dx.types.ResRet.f32 %647, 3
  %652 = call float @dx.op.dot4.f32(i32 56, float %648, float %649, float %650, float %651, float %451, float %452, float %453, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %653 = fmul fast float %451, %452
  %654 = fmul fast float %452, %453
  %655 = fmul fast float %453, %453
  %656 = fmul fast float %453, %451
  %657 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %658 = extractvalue %dx.types.ResRet.f32 %657, 0
  %659 = extractvalue %dx.types.ResRet.f32 %657, 1
  %660 = extractvalue %dx.types.ResRet.f32 %657, 2
  %661 = extractvalue %dx.types.ResRet.f32 %657, 3
  %662 = call float @dx.op.dot4.f32(i32 56, float %658, float %659, float %660, float %661, float %653, float %654, float %655, float %656)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %663 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %664 = extractvalue %dx.types.ResRet.f32 %663, 0
  %665 = extractvalue %dx.types.ResRet.f32 %663, 1
  %666 = extractvalue %dx.types.ResRet.f32 %663, 2
  %667 = extractvalue %dx.types.ResRet.f32 %663, 3
  %668 = call float @dx.op.dot4.f32(i32 56, float %664, float %665, float %666, float %667, float %653, float %654, float %655, float %656)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %669 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %670 = extractvalue %dx.types.ResRet.f32 %669, 0
  %671 = extractvalue %dx.types.ResRet.f32 %669, 1
  %672 = extractvalue %dx.types.ResRet.f32 %669, 2
  %673 = extractvalue %dx.types.ResRet.f32 %669, 3
  %674 = call float @dx.op.dot4.f32(i32 56, float %670, float %671, float %672, float %673, float %653, float %654, float %655, float %656)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %675 = fmul fast float %451, %451
  %676 = fmul fast float %452, %452
  %677 = fsub fast float %675, %676
  %678 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %679 = extractvalue %dx.types.ResRet.f32 %678, 0
  %680 = extractvalue %dx.types.ResRet.f32 %678, 1
  %681 = extractvalue %dx.types.ResRet.f32 %678, 2
  %682 = fmul fast float %679, %677
  %683 = fmul fast float %680, %677
  %684 = fmul fast float %681, %677
  %685 = fadd fast float %662, %640
  %686 = fadd fast float %668, %646
  %687 = fadd fast float %674, %652
  %688 = fadd fast float %685, %682
  %689 = fadd fast float %686, %683
  %690 = fadd fast float %687, %684
  %691 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %688)  ; FMax(a,b)
  %692 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %689)  ; FMax(a,b)
  %693 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %690)  ; FMax(a,b)
  %694 = fmul fast float %691, %356
  %695 = fmul fast float %692, %357
  %696 = fmul fast float %693, %358
  br label %697

; <label>:697                                     ; preds = %633, %631, %560
  %698 = phi float [ %628, %560 ], [ %694, %633 ], [ 0.000000e+00, %631 ]
  %699 = phi float [ %629, %560 ], [ %695, %633 ], [ 0.000000e+00, %631 ]
  %700 = phi float [ %630, %560 ], [ %696, %633 ], [ 0.000000e+00, %631 ]
  %701 = fmul fast float %698, %553
  %702 = fmul fast float %699, %554
  %703 = fmul fast float %700, %555
  %704 = fmul fast float %498, 0x400052BD40000000
  %705 = fmul fast float %499, 0x400052BD40000000
  %706 = fmul fast float %500, 0x400052BD40000000
  %707 = fadd fast float %704, 0xBFD5460AA0000000
  %708 = fadd fast float %705, 0xBFD5460AA0000000
  %709 = fadd fast float %706, 0xBFD5460AA0000000
  %710 = fmul fast float %498, 0x40132E2EC0000000
  %711 = fmul fast float %499, 0x40132E2EC0000000
  %712 = fmul fast float %500, 0x40132E2EC0000000
  %713 = fsub fast float 0x3FE488CE80000000, %710
  %714 = fsub fast float 0x3FE488CE80000000, %711
  %715 = fsub fast float 0x3FE488CE80000000, %712
  %716 = fmul fast float %498, 0x40060AA640000000
  %717 = fmul fast float %499, 0x40060AA640000000
  %718 = fmul fast float %500, 0x40060AA640000000
  %719 = fadd fast float %716, 0x3FE616F000000000
  %720 = fadd fast float %717, 0x3FE616F000000000
  %721 = fadd fast float %718, 0x3FE616F000000000
  %722 = fmul fast float %506, %707
  %723 = fmul fast float %506, %708
  %724 = fmul fast float %506, %709
  %725 = fadd fast float %713, %722
  %726 = fadd fast float %714, %723
  %727 = fadd fast float %715, %724
  %728 = fmul fast float %725, %506
  %729 = fmul fast float %726, %506
  %730 = fmul fast float %727, %506
  %731 = fadd fast float %719, %728
  %732 = fadd fast float %720, %729
  %733 = fadd fast float %721, %730
  %734 = fmul fast float %731, %506
  %735 = fmul fast float %732, %506
  %736 = fmul fast float %733, %506
  %737 = call float @dx.op.binary.f32(i32 35, float %506, float %734)  ; FMax(a,b)
  %738 = call float @dx.op.binary.f32(i32 35, float %506, float %735)  ; FMax(a,b)
  %739 = call float @dx.op.binary.f32(i32 35, float %506, float %736)  ; FMax(a,b)
  %740 = fmul fast float %701, %737
  %741 = fmul fast float %702, %738
  %742 = fmul fast float %703, %739
  %743 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 127)  ; CBufferLoadLegacy(handle,regIndex)
  %744 = extractvalue %dx.types.CBufRet.f32 %743, 2
  %745 = extractvalue %dx.types.CBufRet.f32 %743, 3
  %746 = fmul fast float %744, %375
  %747 = fmul fast float %745, %376
  %748 = fptoui float %746 to i32
  %749 = fptoui float %747 to i32
  %750 = fmul fast float %85, %63
  %751 = fadd fast float %750, %86
  %752 = call float @dx.op.unary.f32(i32 23, float %751)  ; Log(value)
  %753 = fmul fast float %752, %87
  %754 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %753)  ; FMax(a,b)
  %755 = fptoui float %754 to i32
  %756 = add nsw i32 %81, -1
  %757 = call i32 @dx.op.binary.i32(i32 40, i32 %755, i32 %756)  ; UMin(a,b)
  %758 = and i32 %83, 31
  %759 = lshr i32 %748, %758
  %760 = lshr i32 %749, %758
  %761 = mul i32 %757, %80
  %762 = add i32 %761, %760
  %763 = mul i32 %762, %79
  %764 = call float @dx.op.dot3.f32(i32 55, float %431, float %432, float %433, float %451, float %452, float %453)  ; Dot3(ax,ay,az,bx,by,bz)
  %765 = fmul fast float %764, 2.000000e+00
  %766 = fmul fast float %765, %451
  %767 = fmul fast float %765, %452
  %768 = fmul fast float %765, %453
  %769 = fsub fast float %766, %431
  %770 = fsub fast float %767, %432
  %771 = fsub fast float %768, %433
  %772 = call float @dx.op.dot3.f32(i32 55, float %451, float %452, float %453, float %431, float %432, float %433)  ; Dot3(ax,ay,az,bx,by,bz)
  %773 = call float @dx.op.unary.f32(i32 7, float %772)  ; Saturate(value)
  %774 = icmp eq i32 %217, 0
  br i1 %774, label %803, label %775

; <label>:775                                     ; preds = %697
  %776 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %777 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %51, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %778 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %776, %dx.types.Handle %777, float %411, float %412, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %779 = extractvalue %dx.types.ResRet.f32 %778, 0
  %780 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %781 = extractvalue %dx.types.CBufRet.f32 %780, 3
  %782 = bitcast float %781 to i32
  %783 = icmp eq i32 %782, 0
  br i1 %783, label %790, label %784, !dx.controlflow.hints !87

; <label>:784                                     ; preds = %775
  %785 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %786 = extractvalue %dx.types.CBufRet.f32 %785, 2
  %787 = fmul fast float %786, %63
  %788 = extractvalue %dx.types.CBufRet.f32 %780, 2
  %789 = fadd fast float %787, %788
  br label %797

; <label>:790                                     ; preds = %775
  %791 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %792 = extractvalue %dx.types.CBufRet.f32 %791, 3
  %793 = fadd fast float %792, %63
  %794 = extractvalue %dx.types.CBufRet.f32 %791, 2
  %795 = fmul fast float %793, %794
  %796 = fdiv fast float 1.000000e+00, %795
  br label %797

; <label>:797                                     ; preds = %790, %784
  %798 = phi float [ %789, %784 ], [ %796, %790 ]
  %799 = fsub fast float %779, %798
  %800 = call float @dx.op.unary.f32(i32 6, float %799)  ; FAbs(value)
  %801 = fcmp fast olt float %800, %219
  br i1 %801, label %802, label %803

; <label>:802                                     ; preds = %797
  br label %803

; <label>:803                                     ; preds = %802, %797, %697
  %804 = phi i1 [ true, %802 ], [ false, %797 ], [ false, %697 ]
  %805 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 173)  ; CBufferLoadLegacy(handle,regIndex)
  %806 = extractvalue %dx.types.CBufRet.i32 %805, 1
  %807 = icmp ne i32 %806, 0
  %808 = xor i1 %804, true
  %809 = and i1 %807, %808
  br i1 %809, label %810, label %881

; <label>:810                                     ; preds = %803
  %811 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %812 = extractvalue %dx.types.CBufRet.i32 %811, 1
  %813 = uitofp i32 %812 to float
  %814 = fmul fast float %813, 0x4040551EC0000000
  %815 = fmul fast float %813, 0x4027A147A0000000
  %816 = fadd fast float %814, %60
  %817 = fadd fast float %815, %61
  %818 = call float @dx.op.dot2.f32(i32 54, float %816, float %817, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %819 = call float @dx.op.unary.f32(i32 22, float %818)  ; Frc(value)
  %820 = fmul fast float %819, 0x404A7DD040000000
  %821 = call float @dx.op.unary.f32(i32 22, float %820)  ; Frc(value)
  %822 = fmul fast float %300, 2.097152e+06
  %823 = fmul fast float %301, 2.097152e+06
  %824 = fmul fast float %302, 2.097152e+06
  %825 = fadd fast float %404, %822
  %826 = fadd fast float %405, %823
  %827 = fadd fast float %406, %824
  %828 = icmp eq i32 %205, 0
  br i1 %828, label %877, label %829

; <label>:829                                     ; preds = %810
  br label %830

; <label>:830                                     ; preds = %872, %829
  %831 = phi i32 [ %873, %872 ], [ 0, %829 ]
  %832 = add i32 %831, 178
  %833 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %832)  ; CBufferLoadLegacy(handle,regIndex)
  %834 = extractvalue %dx.types.CBufRet.f32 %833, 1
  %835 = fmul fast float %834, %825
  %836 = fmul fast float %834, %826
  %837 = fmul fast float %834, %827
  %838 = add i32 %831, 184
  %839 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %838)  ; CBufferLoadLegacy(handle,regIndex)
  %840 = extractvalue %dx.types.CBufRet.f32 %839, 0
  %841 = extractvalue %dx.types.CBufRet.f32 %839, 1
  %842 = extractvalue %dx.types.CBufRet.f32 %839, 2
  %843 = fadd fast float %835, %840
  %844 = fadd fast float %836, %841
  %845 = fadd fast float %837, %842
  %846 = fadd fast float %843, -5.000000e-01
  %847 = fadd fast float %844, -5.000000e-01
  %848 = fadd fast float %845, -5.000000e-01
  %849 = fmul fast float %846, %202
  %850 = fmul fast float %847, %202
  %851 = fmul fast float %848, %202
  %852 = call float @dx.op.unary.f32(i32 7, float %849)  ; Saturate(value)
  %853 = call float @dx.op.unary.f32(i32 7, float %850)  ; Saturate(value)
  %854 = call float @dx.op.unary.f32(i32 7, float %851)  ; Saturate(value)
  %855 = uitofp i32 %204 to float
  %856 = fadd fast float %855, -5.000000e-01
  %857 = fsub fast float %856, %843
  %858 = fsub fast float %856, %844
  %859 = fsub fast float %856, %845
  %860 = fmul fast float %857, %202
  %861 = fmul fast float %858, %202
  %862 = fmul fast float %859, %202
  %863 = call float @dx.op.unary.f32(i32 7, float %860)  ; Saturate(value)
  %864 = call float @dx.op.unary.f32(i32 7, float %861)  ; Saturate(value)
  %865 = call float @dx.op.unary.f32(i32 7, float %862)  ; Saturate(value)
  %866 = call float @dx.op.binary.f32(i32 36, float %864, float %865)  ; FMin(a,b)
  %867 = call float @dx.op.binary.f32(i32 36, float %863, float %866)  ; FMin(a,b)
  %868 = call float @dx.op.binary.f32(i32 36, float %853, float %854)  ; FMin(a,b)
  %869 = call float @dx.op.binary.f32(i32 36, float %852, float %868)  ; FMin(a,b)
  %870 = call float @dx.op.binary.f32(i32 36, float %869, float %867)  ; FMin(a,b)
  %871 = fcmp fast ogt float %870, %821
  br i1 %871, label %875, label %872

; <label>:872                                     ; preds = %830
  %873 = add nuw i32 %831, 1
  %874 = icmp ult i32 %873, %205
  br i1 %874, label %830, label %875

; <label>:875                                     ; preds = %872, %830
  %876 = phi i32 [ %205, %872 ], [ %831, %830 ]
  br label %877

; <label>:877                                     ; preds = %875, %810
  %878 = phi i32 [ 0, %810 ], [ %876, %875 ]
  %879 = icmp ult i32 %878, %205
  %880 = zext i1 %879 to i32
  br label %881

; <label>:881                                     ; preds = %877, %803
  %882 = phi i32 [ %880, %877 ], [ 0, %803 ]
  %883 = phi i32 [ %878, %877 ], [ 0, %803 ]
  br i1 %804, label %884, label %912

; <label>:884                                     ; preds = %881
  %885 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %886 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %51, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %887 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %885, %dx.types.Handle %886, float %411, float %412, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %888 = extractvalue %dx.types.ResRet.f32 %887, 0
  %889 = extractvalue %dx.types.ResRet.f32 %887, 1
  %890 = extractvalue %dx.types.ResRet.f32 %887, 2
  %891 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %892 = extractvalue %dx.types.CBufRet.f32 %891, 3
  %893 = fmul fast float %888, 0x401638E380000000
  %894 = fmul fast float %893, %892
  %895 = fmul fast float %889, 0x401638E380000000
  %896 = fmul fast float %895, %892
  %897 = fmul fast float %890, 0x401638E380000000
  %898 = fmul fast float %897, %892
  %899 = call float @dx.op.unary.f32(i32 23, float %894)  ; Log(value)
  %900 = call float @dx.op.unary.f32(i32 23, float %896)  ; Log(value)
  %901 = call float @dx.op.unary.f32(i32 23, float %898)  ; Log(value)
  %902 = fmul fast float %899, %222
  %903 = fmul fast float %900, %222
  %904 = fmul fast float %901, %222
  %905 = call float @dx.op.unary.f32(i32 21, float %902)  ; Exp(value)
  %906 = call float @dx.op.unary.f32(i32 21, float %903)  ; Exp(value)
  %907 = call float @dx.op.unary.f32(i32 21, float %904)  ; Exp(value)
  %908 = fmul fast float %221, 0x3FC70A3D80000000
  %909 = fmul fast float %908, %905
  %910 = fmul fast float %908, %906
  %911 = fmul fast float %908, %907
  br label %2282

; <label>:912                                     ; preds = %881
  %913 = icmp eq i32 %882, 0
  br i1 %913, label %1954, label %914

; <label>:914                                     ; preds = %912
  %915 = fmul fast float %300, 2.097152e+06
  %916 = fmul fast float %301, 2.097152e+06
  %917 = fmul fast float %302, 2.097152e+06
  %918 = fadd fast float %404, %915
  %919 = fadd fast float %405, %916
  %920 = fadd fast float %406, %917
  %921 = add i32 %883, 178
  %922 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %921)  ; CBufferLoadLegacy(handle,regIndex)
  %923 = extractvalue %dx.types.CBufRet.f32 %922, 1
  %924 = fmul fast float %923, %918
  %925 = fmul fast float %923, %919
  %926 = fmul fast float %923, %920
  %927 = add i32 %883, 184
  %928 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %927)  ; CBufferLoadLegacy(handle,regIndex)
  %929 = extractvalue %dx.types.CBufRet.f32 %928, 0
  %930 = extractvalue %dx.types.CBufRet.f32 %928, 1
  %931 = extractvalue %dx.types.CBufRet.f32 %928, 2
  %932 = uitofp i32 %209 to float
  %933 = call float @dx.op.unary.f32(i32 23, float 0.000000e+00)  ; Log(value)
  %934 = call float @dx.op.binary.f32(i32 35, float %933, float 0.000000e+00)  ; FMax(a,b)
  %935 = call float @dx.op.binary.f32(i32 36, float %934, float %932)  ; FMin(a,b)
  %936 = fadd fast float %929, -5.000000e-01
  %937 = fadd fast float %936, %924
  %938 = fadd fast float %930, -5.000000e-01
  %939 = fadd fast float %938, %925
  %940 = fadd fast float %931, -5.000000e-01
  %941 = fadd fast float %940, %926
  %942 = call float @dx.op.unary.f32(i32 27, float %937)  ; Round_ni(value)
  %943 = call float @dx.op.unary.f32(i32 27, float %939)  ; Round_ni(value)
  %944 = call float @dx.op.unary.f32(i32 27, float %941)  ; Round_ni(value)
  %945 = fptosi float %942 to i32
  %946 = fptosi float %943 to i32
  %947 = fptosi float %944 to i32
  %948 = call float @dx.op.unary.f32(i32 22, float %937)  ; Frc(value)
  %949 = call float @dx.op.unary.f32(i32 22, float %939)  ; Frc(value)
  %950 = call float @dx.op.unary.f32(i32 22, float %941)  ; Frc(value)
  %951 = extractvalue %dx.types.CBufRet.f32 %922, 0
  %952 = mul i32 %883, %204
  %953 = add i32 %945, %952
  %954 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %955 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %953, i32 %946, i32 %947, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %956 = extractvalue %dx.types.ResRet.i32 %955, 0
  %957 = uitofp i32 %945 to float
  %958 = uitofp i32 %946 to float
  %959 = uitofp i32 %947 to float
  %960 = extractvalue %dx.types.CBufRet.f32 %922, 2
  %961 = fmul fast float %960, %957
  %962 = fmul fast float %960, %958
  %963 = fmul fast float %960, %959
  %964 = add i32 %883, 190
  %965 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %964)  ; CBufferLoadLegacy(handle,regIndex)
  %966 = extractvalue %dx.types.CBufRet.f32 %965, 0
  %967 = extractvalue %dx.types.CBufRet.f32 %965, 1
  %968 = extractvalue %dx.types.CBufRet.f32 %965, 2
  %969 = fadd fast float %961, %966
  %970 = fadd fast float %962, %967
  %971 = fadd fast float %963, %968
  %972 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %973 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %956, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %974 = extractvalue %dx.types.ResRet.f32 %973, 0
  %975 = extractvalue %dx.types.ResRet.f32 %973, 1
  %976 = extractvalue %dx.types.ResRet.f32 %973, 2
  %977 = fadd fast float %969, %974
  %978 = fadd fast float %970, %975
  %979 = fadd fast float %971, %976
  %980 = fmul fast float %951, %201
  %981 = fsub fast float %918, %977
  %982 = fsub fast float %919, %978
  %983 = fsub fast float %920, %979
  %984 = call float @dx.op.dot3.f32(i32 55, float %981, float %982, float %983, float %981, float %982, float %983)  ; Dot3(ax,ay,az,bx,by,bz)
  %985 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %986 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %981, float %982, float %983)  ; Dot3(ax,ay,az,bx,by,bz)
  %987 = fmul fast float %986, 2.000000e+00
  %988 = fmul fast float %980, %980
  %989 = fsub fast float %984, %988
  %990 = fmul fast float %987, %987
  %991 = fmul fast float %985, 4.000000e+00
  %992 = fmul fast float %991, %989
  %993 = fsub fast float %990, %992
  %994 = fcmp fast ult float %993, 0.000000e+00
  br i1 %994, label %1000, label %995, !dx.controlflow.hints !88

; <label>:995                                     ; preds = %914
  %996 = call float @dx.op.unary.f32(i32 24, float %993)  ; Sqrt(value)
  %997 = fsub fast float %996, %987
  %998 = fmul fast float %985, 2.000000e+00
  %999 = fdiv fast float %997, %998
  br label %1000

; <label>:1000                                    ; preds = %995, %914
  %1001 = phi float [ %999, %995 ], [ -1.000000e+00, %914 ]
  %1002 = fmul fast float %1001, %769
  %1003 = fmul fast float %1001, %770
  %1004 = fmul fast float %1001, %771
  %1005 = fadd fast float %981, %1002
  %1006 = fadd fast float %982, %1003
  %1007 = fadd fast float %983, %1004
  %1008 = fmul fast float %1001, %1001
  %1009 = call float @dx.op.dot3.f32(i32 55, float %1005, float %1006, float %1007, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1010 = fmul fast float %1009, %980
  %1011 = fdiv fast float %1008, %1010
  %1012 = call float @dx.op.dot3.f32(i32 55, float %1005, float %1006, float %1007, float %1005, float %1006, float %1007)  ; Dot3(ax,ay,az,bx,by,bz)
  %1013 = call float @dx.op.unary.f32(i32 25, float %1012)  ; Rsqrt(value)
  %1014 = fmul fast float %1013, %1005
  %1015 = fmul fast float %1013, %1006
  %1016 = fmul fast float %1013, %1007
  %1017 = call float @dx.op.unary.f32(i32 6, float %1014)  ; FAbs(value)
  %1018 = call float @dx.op.unary.f32(i32 6, float %1015)  ; FAbs(value)
  %1019 = call float @dx.op.unary.f32(i32 6, float %1016)  ; FAbs(value)
  %1020 = fsub fast float 1.000000e+00, %1019
  %1021 = call float @dx.op.unary.f32(i32 24, float %1020)  ; Sqrt(value)
  %1022 = call float @dx.op.binary.f32(i32 36, float %1017, float %1018)  ; FMin(a,b)
  %1023 = call float @dx.op.binary.f32(i32 35, float %1017, float %1018)  ; FMax(a,b)
  %1024 = fadd fast float %1023, 0x3BF0000000000000
  %1025 = fdiv fast float %1022, %1024
  %1026 = fmul fast float %1025, 0x3F99BE1040000000
  %1027 = fsub fast float 0x3FA5746D00000000, %1026
  %1028 = fmul fast float %1027, %1025
  %1029 = fadd fast float %1028, 0x3FB692C5C0000000
  %1030 = fmul fast float %1029, %1025
  %1031 = fadd fast float %1030, 0xBFCFA8A1C0000000
  %1032 = fmul fast float %1031, %1025
  %1033 = fadd fast float %1032, 0x3F79384B40000000
  %1034 = fmul fast float %1033, %1025
  %1035 = fadd fast float %1034, 0x3FE45BF7C0000000
  %1036 = fmul fast float %1035, %1025
  %1037 = fadd fast float %1036, 0x3ED10F8960000000
  %1038 = fcmp fast olt float %1017, %1018
  %1039 = fsub fast float 0x3FEFFFF780000000, %1036
  %1040 = select i1 %1038, float %1039, float %1037
  %1041 = fmul fast float %1040, %1021
  %1042 = fsub fast float %1021, %1041
  %1043 = fcmp fast olt float %1016, 0.000000e+00
  %1044 = fsub fast float 1.000000e+00, %1041
  %1045 = fsub fast float 1.000000e+00, %1042
  %1046 = select i1 %1043, float %1044, float %1042
  %1047 = select i1 %1043, float %1045, float %1041
  %1048 = bitcast float %1046 to i32
  %1049 = bitcast float %1047 to i32
  %1050 = bitcast float %1014 to i32
  %1051 = bitcast float %1015 to i32
  %1052 = and i32 %1050, -2147483648
  %1053 = and i32 %1051, -2147483648
  %1054 = xor i32 %1048, %1052
  %1055 = xor i32 %1049, %1053
  %1056 = bitcast i32 %1054 to float
  %1057 = bitcast i32 %1055 to float
  %1058 = fmul fast float %1056, 5.000000e-01
  %1059 = fmul fast float %1057, 5.000000e-01
  %1060 = fadd fast float %1058, 5.000000e-01
  %1061 = fadd fast float %1059, 5.000000e-01
  %1062 = and i32 %956, %214
  %1063 = and i32 %215, 31
  %1064 = lshr i32 %956, %1063
  %1065 = mul i32 %1062, %208
  %1066 = mul i32 %1064, %208
  %1067 = uitofp i32 %207 to float
  %1068 = fmul fast float %1060, %1067
  %1069 = fmul fast float %1061, %1067
  %1070 = and i32 %209, 31
  %1071 = shl i32 1, %1070
  %1072 = uitofp i32 %1071 to float
  %1073 = uitofp i32 %1065 to float
  %1074 = uitofp i32 %1066 to float
  %1075 = fadd fast float %1073, %1072
  %1076 = fadd fast float %1075, %1068
  %1077 = fadd fast float %1074, %1072
  %1078 = fadd fast float %1077, %1069
  %1079 = fmul fast float %1076, %211
  %1080 = fmul fast float %1078, %212
  %1081 = icmp eq i32 %956, -1
  %1082 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1083 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %50, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1084 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1079, float %1080, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1085 = extractvalue %dx.types.ResRet.f32 %1084, 0
  %1086 = extractvalue %dx.types.ResRet.f32 %1084, 1
  %1087 = extractvalue %dx.types.ResRet.f32 %1084, 2
  %1088 = select i1 %1081, float 0.000000e+00, float %1085
  %1089 = select i1 %1081, float 0.000000e+00, float %1086
  %1090 = select i1 %1081, float 0.000000e+00, float %1087
  %1091 = fmul fast float %1088, %1011
  %1092 = fmul fast float %1089, %1011
  %1093 = fmul fast float %1090, %1011
  %1094 = add i32 %947, 1
  %1095 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %953, i32 %946, i32 %1094, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1096 = extractvalue %dx.types.ResRet.i32 %1095, 0
  %1097 = uitofp i32 %1094 to float
  %1098 = fmul fast float %960, %1097
  %1099 = fadd fast float %1098, %968
  %1100 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %1096, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1101 = extractvalue %dx.types.ResRet.f32 %1100, 0
  %1102 = extractvalue %dx.types.ResRet.f32 %1100, 1
  %1103 = extractvalue %dx.types.ResRet.f32 %1100, 2
  %1104 = fadd fast float %969, %1101
  %1105 = fadd fast float %970, %1102
  %1106 = fadd fast float %1099, %1103
  %1107 = fsub fast float %918, %1104
  %1108 = fsub fast float %919, %1105
  %1109 = fsub fast float %920, %1106
  %1110 = call float @dx.op.dot3.f32(i32 55, float %1107, float %1108, float %1109, float %1107, float %1108, float %1109)  ; Dot3(ax,ay,az,bx,by,bz)
  %1111 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %1107, float %1108, float %1109)  ; Dot3(ax,ay,az,bx,by,bz)
  %1112 = fmul fast float %1111, 2.000000e+00
  %1113 = fsub fast float %1110, %988
  %1114 = fmul fast float %1112, %1112
  %1115 = fmul fast float %991, %1113
  %1116 = fsub fast float %1114, %1115
  %1117 = fcmp fast ult float %1116, 0.000000e+00
  br i1 %1117, label %1123, label %1118, !dx.controlflow.hints !88

; <label>:1118                                    ; preds = %1000
  %1119 = call float @dx.op.unary.f32(i32 24, float %1116)  ; Sqrt(value)
  %1120 = fsub fast float %1119, %1112
  %1121 = fmul fast float %985, 2.000000e+00
  %1122 = fdiv fast float %1120, %1121
  br label %1123

; <label>:1123                                    ; preds = %1118, %1000
  %1124 = phi float [ %1122, %1118 ], [ -1.000000e+00, %1000 ]
  %1125 = fmul fast float %1124, %769
  %1126 = fmul fast float %1124, %770
  %1127 = fmul fast float %1124, %771
  %1128 = fadd fast float %1107, %1125
  %1129 = fadd fast float %1108, %1126
  %1130 = fadd fast float %1109, %1127
  %1131 = fmul fast float %1124, %1124
  %1132 = call float @dx.op.dot3.f32(i32 55, float %1128, float %1129, float %1130, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1133 = fmul fast float %1132, %980
  %1134 = fdiv fast float %1131, %1133
  %1135 = call float @dx.op.dot3.f32(i32 55, float %1128, float %1129, float %1130, float %1128, float %1129, float %1130)  ; Dot3(ax,ay,az,bx,by,bz)
  %1136 = call float @dx.op.unary.f32(i32 25, float %1135)  ; Rsqrt(value)
  %1137 = fmul fast float %1136, %1128
  %1138 = fmul fast float %1136, %1129
  %1139 = fmul fast float %1136, %1130
  %1140 = call float @dx.op.unary.f32(i32 6, float %1137)  ; FAbs(value)
  %1141 = call float @dx.op.unary.f32(i32 6, float %1138)  ; FAbs(value)
  %1142 = call float @dx.op.unary.f32(i32 6, float %1139)  ; FAbs(value)
  %1143 = fsub fast float 1.000000e+00, %1142
  %1144 = call float @dx.op.unary.f32(i32 24, float %1143)  ; Sqrt(value)
  %1145 = call float @dx.op.binary.f32(i32 36, float %1140, float %1141)  ; FMin(a,b)
  %1146 = call float @dx.op.binary.f32(i32 35, float %1140, float %1141)  ; FMax(a,b)
  %1147 = fadd fast float %1146, 0x3BF0000000000000
  %1148 = fdiv fast float %1145, %1147
  %1149 = fmul fast float %1148, 0x3F99BE1040000000
  %1150 = fsub fast float 0x3FA5746D00000000, %1149
  %1151 = fmul fast float %1150, %1148
  %1152 = fadd fast float %1151, 0x3FB692C5C0000000
  %1153 = fmul fast float %1152, %1148
  %1154 = fadd fast float %1153, 0xBFCFA8A1C0000000
  %1155 = fmul fast float %1154, %1148
  %1156 = fadd fast float %1155, 0x3F79384B40000000
  %1157 = fmul fast float %1156, %1148
  %1158 = fadd fast float %1157, 0x3FE45BF7C0000000
  %1159 = fmul fast float %1158, %1148
  %1160 = fadd fast float %1159, 0x3ED10F8960000000
  %1161 = fcmp fast olt float %1140, %1141
  %1162 = fsub fast float 0x3FEFFFF780000000, %1159
  %1163 = select i1 %1161, float %1162, float %1160
  %1164 = fmul fast float %1163, %1144
  %1165 = fsub fast float %1144, %1164
  %1166 = fcmp fast olt float %1139, 0.000000e+00
  %1167 = fsub fast float 1.000000e+00, %1164
  %1168 = fsub fast float 1.000000e+00, %1165
  %1169 = select i1 %1166, float %1167, float %1165
  %1170 = select i1 %1166, float %1168, float %1164
  %1171 = bitcast float %1169 to i32
  %1172 = bitcast float %1170 to i32
  %1173 = bitcast float %1137 to i32
  %1174 = bitcast float %1138 to i32
  %1175 = and i32 %1173, -2147483648
  %1176 = and i32 %1174, -2147483648
  %1177 = xor i32 %1171, %1175
  %1178 = xor i32 %1172, %1176
  %1179 = bitcast i32 %1177 to float
  %1180 = bitcast i32 %1178 to float
  %1181 = fmul fast float %1179, 5.000000e-01
  %1182 = fmul fast float %1180, 5.000000e-01
  %1183 = fadd fast float %1181, 5.000000e-01
  %1184 = fadd fast float %1182, 5.000000e-01
  %1185 = and i32 %1096, %214
  %1186 = lshr i32 %1096, %1063
  %1187 = mul i32 %1185, %208
  %1188 = mul i32 %1186, %208
  %1189 = fmul fast float %1183, %1067
  %1190 = fmul fast float %1184, %1067
  %1191 = uitofp i32 %1187 to float
  %1192 = uitofp i32 %1188 to float
  %1193 = fadd fast float %1191, %1072
  %1194 = fadd fast float %1193, %1189
  %1195 = fadd fast float %1192, %1072
  %1196 = fadd fast float %1195, %1190
  %1197 = fmul fast float %1194, %211
  %1198 = fmul fast float %1196, %212
  %1199 = icmp eq i32 %1096, -1
  %1200 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1197, float %1198, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1201 = extractvalue %dx.types.ResRet.f32 %1200, 0
  %1202 = extractvalue %dx.types.ResRet.f32 %1200, 1
  %1203 = extractvalue %dx.types.ResRet.f32 %1200, 2
  %1204 = select i1 %1199, float 0.000000e+00, float %1201
  %1205 = select i1 %1199, float 0.000000e+00, float %1202
  %1206 = select i1 %1199, float 0.000000e+00, float %1203
  %1207 = fmul fast float %1204, %1134
  %1208 = fmul fast float %1205, %1134
  %1209 = fmul fast float %1206, %1134
  %1210 = add i32 %946, 1
  %1211 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %953, i32 %1210, i32 %947, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1212 = extractvalue %dx.types.ResRet.i32 %1211, 0
  %1213 = uitofp i32 %1210 to float
  %1214 = fmul fast float %960, %1213
  %1215 = fadd fast float %1214, %967
  %1216 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %1212, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1217 = extractvalue %dx.types.ResRet.f32 %1216, 0
  %1218 = extractvalue %dx.types.ResRet.f32 %1216, 1
  %1219 = extractvalue %dx.types.ResRet.f32 %1216, 2
  %1220 = fadd fast float %969, %1217
  %1221 = fadd fast float %1215, %1218
  %1222 = fadd fast float %971, %1219
  %1223 = fsub fast float %918, %1220
  %1224 = fsub fast float %919, %1221
  %1225 = fsub fast float %920, %1222
  %1226 = call float @dx.op.dot3.f32(i32 55, float %1223, float %1224, float %1225, float %1223, float %1224, float %1225)  ; Dot3(ax,ay,az,bx,by,bz)
  %1227 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %1223, float %1224, float %1225)  ; Dot3(ax,ay,az,bx,by,bz)
  %1228 = fmul fast float %1227, 2.000000e+00
  %1229 = fsub fast float %1226, %988
  %1230 = fmul fast float %1228, %1228
  %1231 = fmul fast float %991, %1229
  %1232 = fsub fast float %1230, %1231
  %1233 = fcmp fast ult float %1232, 0.000000e+00
  br i1 %1233, label %1239, label %1234, !dx.controlflow.hints !88

; <label>:1234                                    ; preds = %1123
  %1235 = call float @dx.op.unary.f32(i32 24, float %1232)  ; Sqrt(value)
  %1236 = fsub fast float %1235, %1228
  %1237 = fmul fast float %985, 2.000000e+00
  %1238 = fdiv fast float %1236, %1237
  br label %1239

; <label>:1239                                    ; preds = %1234, %1123
  %1240 = phi float [ %1238, %1234 ], [ -1.000000e+00, %1123 ]
  %1241 = fmul fast float %1240, %769
  %1242 = fmul fast float %1240, %770
  %1243 = fmul fast float %1240, %771
  %1244 = fadd fast float %1223, %1241
  %1245 = fadd fast float %1224, %1242
  %1246 = fadd fast float %1225, %1243
  %1247 = fmul fast float %1240, %1240
  %1248 = call float @dx.op.dot3.f32(i32 55, float %1244, float %1245, float %1246, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1249 = fmul fast float %1248, %980
  %1250 = fdiv fast float %1247, %1249
  %1251 = call float @dx.op.dot3.f32(i32 55, float %1244, float %1245, float %1246, float %1244, float %1245, float %1246)  ; Dot3(ax,ay,az,bx,by,bz)
  %1252 = call float @dx.op.unary.f32(i32 25, float %1251)  ; Rsqrt(value)
  %1253 = fmul fast float %1252, %1244
  %1254 = fmul fast float %1252, %1245
  %1255 = fmul fast float %1252, %1246
  %1256 = call float @dx.op.unary.f32(i32 6, float %1253)  ; FAbs(value)
  %1257 = call float @dx.op.unary.f32(i32 6, float %1254)  ; FAbs(value)
  %1258 = call float @dx.op.unary.f32(i32 6, float %1255)  ; FAbs(value)
  %1259 = fsub fast float 1.000000e+00, %1258
  %1260 = call float @dx.op.unary.f32(i32 24, float %1259)  ; Sqrt(value)
  %1261 = call float @dx.op.binary.f32(i32 36, float %1256, float %1257)  ; FMin(a,b)
  %1262 = call float @dx.op.binary.f32(i32 35, float %1256, float %1257)  ; FMax(a,b)
  %1263 = fadd fast float %1262, 0x3BF0000000000000
  %1264 = fdiv fast float %1261, %1263
  %1265 = fmul fast float %1264, 0x3F99BE1040000000
  %1266 = fsub fast float 0x3FA5746D00000000, %1265
  %1267 = fmul fast float %1266, %1264
  %1268 = fadd fast float %1267, 0x3FB692C5C0000000
  %1269 = fmul fast float %1268, %1264
  %1270 = fadd fast float %1269, 0xBFCFA8A1C0000000
  %1271 = fmul fast float %1270, %1264
  %1272 = fadd fast float %1271, 0x3F79384B40000000
  %1273 = fmul fast float %1272, %1264
  %1274 = fadd fast float %1273, 0x3FE45BF7C0000000
  %1275 = fmul fast float %1274, %1264
  %1276 = fadd fast float %1275, 0x3ED10F8960000000
  %1277 = fcmp fast olt float %1256, %1257
  %1278 = fsub fast float 0x3FEFFFF780000000, %1275
  %1279 = select i1 %1277, float %1278, float %1276
  %1280 = fmul fast float %1279, %1260
  %1281 = fsub fast float %1260, %1280
  %1282 = fcmp fast olt float %1255, 0.000000e+00
  %1283 = fsub fast float 1.000000e+00, %1280
  %1284 = fsub fast float 1.000000e+00, %1281
  %1285 = select i1 %1282, float %1283, float %1281
  %1286 = select i1 %1282, float %1284, float %1280
  %1287 = bitcast float %1285 to i32
  %1288 = bitcast float %1286 to i32
  %1289 = bitcast float %1253 to i32
  %1290 = bitcast float %1254 to i32
  %1291 = and i32 %1289, -2147483648
  %1292 = and i32 %1290, -2147483648
  %1293 = xor i32 %1287, %1291
  %1294 = xor i32 %1288, %1292
  %1295 = bitcast i32 %1293 to float
  %1296 = bitcast i32 %1294 to float
  %1297 = fmul fast float %1295, 5.000000e-01
  %1298 = fmul fast float %1296, 5.000000e-01
  %1299 = fadd fast float %1297, 5.000000e-01
  %1300 = fadd fast float %1298, 5.000000e-01
  %1301 = and i32 %1212, %214
  %1302 = lshr i32 %1212, %1063
  %1303 = mul i32 %1301, %208
  %1304 = mul i32 %1302, %208
  %1305 = fmul fast float %1299, %1067
  %1306 = fmul fast float %1300, %1067
  %1307 = uitofp i32 %1303 to float
  %1308 = uitofp i32 %1304 to float
  %1309 = fadd fast float %1307, %1072
  %1310 = fadd fast float %1309, %1305
  %1311 = fadd fast float %1308, %1072
  %1312 = fadd fast float %1311, %1306
  %1313 = fmul fast float %1310, %211
  %1314 = fmul fast float %1312, %212
  %1315 = icmp eq i32 %1212, -1
  %1316 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1313, float %1314, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1317 = extractvalue %dx.types.ResRet.f32 %1316, 0
  %1318 = extractvalue %dx.types.ResRet.f32 %1316, 1
  %1319 = extractvalue %dx.types.ResRet.f32 %1316, 2
  %1320 = select i1 %1315, float 0.000000e+00, float %1317
  %1321 = select i1 %1315, float 0.000000e+00, float %1318
  %1322 = select i1 %1315, float 0.000000e+00, float %1319
  %1323 = fmul fast float %1320, %1250
  %1324 = fmul fast float %1321, %1250
  %1325 = fmul fast float %1322, %1250
  %1326 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %953, i32 %1210, i32 %1094, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1327 = extractvalue %dx.types.ResRet.i32 %1326, 0
  %1328 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %1327, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1329 = extractvalue %dx.types.ResRet.f32 %1328, 0
  %1330 = extractvalue %dx.types.ResRet.f32 %1328, 1
  %1331 = extractvalue %dx.types.ResRet.f32 %1328, 2
  %1332 = fadd fast float %969, %1329
  %1333 = fadd fast float %1215, %1330
  %1334 = fadd fast float %1099, %1331
  %1335 = fsub fast float %918, %1332
  %1336 = fsub fast float %919, %1333
  %1337 = fsub fast float %920, %1334
  %1338 = call float @dx.op.dot3.f32(i32 55, float %1335, float %1336, float %1337, float %1335, float %1336, float %1337)  ; Dot3(ax,ay,az,bx,by,bz)
  %1339 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %1335, float %1336, float %1337)  ; Dot3(ax,ay,az,bx,by,bz)
  %1340 = fmul fast float %1339, 2.000000e+00
  %1341 = fsub fast float %1338, %988
  %1342 = fmul fast float %1340, %1340
  %1343 = fmul fast float %991, %1341
  %1344 = fsub fast float %1342, %1343
  %1345 = fcmp fast ult float %1344, 0.000000e+00
  br i1 %1345, label %1351, label %1346, !dx.controlflow.hints !88

; <label>:1346                                    ; preds = %1239
  %1347 = call float @dx.op.unary.f32(i32 24, float %1344)  ; Sqrt(value)
  %1348 = fsub fast float %1347, %1340
  %1349 = fmul fast float %985, 2.000000e+00
  %1350 = fdiv fast float %1348, %1349
  br label %1351

; <label>:1351                                    ; preds = %1346, %1239
  %1352 = phi float [ %1350, %1346 ], [ -1.000000e+00, %1239 ]
  %1353 = fmul fast float %1352, %769
  %1354 = fmul fast float %1352, %770
  %1355 = fmul fast float %1352, %771
  %1356 = fadd fast float %1335, %1353
  %1357 = fadd fast float %1336, %1354
  %1358 = fadd fast float %1337, %1355
  %1359 = fmul fast float %1352, %1352
  %1360 = call float @dx.op.dot3.f32(i32 55, float %1356, float %1357, float %1358, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1361 = fmul fast float %1360, %980
  %1362 = fdiv fast float %1359, %1361
  %1363 = call float @dx.op.dot3.f32(i32 55, float %1356, float %1357, float %1358, float %1356, float %1357, float %1358)  ; Dot3(ax,ay,az,bx,by,bz)
  %1364 = call float @dx.op.unary.f32(i32 25, float %1363)  ; Rsqrt(value)
  %1365 = fmul fast float %1364, %1356
  %1366 = fmul fast float %1364, %1357
  %1367 = fmul fast float %1364, %1358
  %1368 = call float @dx.op.unary.f32(i32 6, float %1365)  ; FAbs(value)
  %1369 = call float @dx.op.unary.f32(i32 6, float %1366)  ; FAbs(value)
  %1370 = call float @dx.op.unary.f32(i32 6, float %1367)  ; FAbs(value)
  %1371 = fsub fast float 1.000000e+00, %1370
  %1372 = call float @dx.op.unary.f32(i32 24, float %1371)  ; Sqrt(value)
  %1373 = call float @dx.op.binary.f32(i32 36, float %1368, float %1369)  ; FMin(a,b)
  %1374 = call float @dx.op.binary.f32(i32 35, float %1368, float %1369)  ; FMax(a,b)
  %1375 = fadd fast float %1374, 0x3BF0000000000000
  %1376 = fdiv fast float %1373, %1375
  %1377 = fmul fast float %1376, 0x3F99BE1040000000
  %1378 = fsub fast float 0x3FA5746D00000000, %1377
  %1379 = fmul fast float %1378, %1376
  %1380 = fadd fast float %1379, 0x3FB692C5C0000000
  %1381 = fmul fast float %1380, %1376
  %1382 = fadd fast float %1381, 0xBFCFA8A1C0000000
  %1383 = fmul fast float %1382, %1376
  %1384 = fadd fast float %1383, 0x3F79384B40000000
  %1385 = fmul fast float %1384, %1376
  %1386 = fadd fast float %1385, 0x3FE45BF7C0000000
  %1387 = fmul fast float %1386, %1376
  %1388 = fadd fast float %1387, 0x3ED10F8960000000
  %1389 = fcmp fast olt float %1368, %1369
  %1390 = fsub fast float 0x3FEFFFF780000000, %1387
  %1391 = select i1 %1389, float %1390, float %1388
  %1392 = fmul fast float %1391, %1372
  %1393 = fsub fast float %1372, %1392
  %1394 = fcmp fast olt float %1367, 0.000000e+00
  %1395 = fsub fast float 1.000000e+00, %1392
  %1396 = fsub fast float 1.000000e+00, %1393
  %1397 = select i1 %1394, float %1395, float %1393
  %1398 = select i1 %1394, float %1396, float %1392
  %1399 = bitcast float %1397 to i32
  %1400 = bitcast float %1398 to i32
  %1401 = bitcast float %1365 to i32
  %1402 = bitcast float %1366 to i32
  %1403 = and i32 %1401, -2147483648
  %1404 = and i32 %1402, -2147483648
  %1405 = xor i32 %1399, %1403
  %1406 = xor i32 %1400, %1404
  %1407 = bitcast i32 %1405 to float
  %1408 = bitcast i32 %1406 to float
  %1409 = fmul fast float %1407, 5.000000e-01
  %1410 = fmul fast float %1408, 5.000000e-01
  %1411 = fadd fast float %1409, 5.000000e-01
  %1412 = fadd fast float %1410, 5.000000e-01
  %1413 = and i32 %1327, %214
  %1414 = lshr i32 %1327, %1063
  %1415 = mul i32 %1413, %208
  %1416 = mul i32 %1414, %208
  %1417 = fmul fast float %1411, %1067
  %1418 = fmul fast float %1412, %1067
  %1419 = uitofp i32 %1415 to float
  %1420 = uitofp i32 %1416 to float
  %1421 = fadd fast float %1419, %1072
  %1422 = fadd fast float %1421, %1417
  %1423 = fadd fast float %1420, %1072
  %1424 = fadd fast float %1423, %1418
  %1425 = fmul fast float %1422, %211
  %1426 = fmul fast float %1424, %212
  %1427 = icmp eq i32 %1327, -1
  %1428 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1425, float %1426, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1429 = extractvalue %dx.types.ResRet.f32 %1428, 0
  %1430 = extractvalue %dx.types.ResRet.f32 %1428, 1
  %1431 = extractvalue %dx.types.ResRet.f32 %1428, 2
  %1432 = select i1 %1427, float 0.000000e+00, float %1429
  %1433 = select i1 %1427, float 0.000000e+00, float %1430
  %1434 = select i1 %1427, float 0.000000e+00, float %1431
  %1435 = fmul fast float %1432, %1362
  %1436 = fmul fast float %1433, %1362
  %1437 = fmul fast float %1434, %1362
  %1438 = add i32 %945, 1
  %1439 = add i32 %1438, %952
  %1440 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %1439, i32 %946, i32 %947, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1441 = extractvalue %dx.types.ResRet.i32 %1440, 0
  %1442 = uitofp i32 %1438 to float
  %1443 = fmul fast float %960, %1442
  %1444 = fadd fast float %1443, %966
  %1445 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %1441, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1446 = extractvalue %dx.types.ResRet.f32 %1445, 0
  %1447 = extractvalue %dx.types.ResRet.f32 %1445, 1
  %1448 = extractvalue %dx.types.ResRet.f32 %1445, 2
  %1449 = fadd fast float %1444, %1446
  %1450 = fadd fast float %970, %1447
  %1451 = fadd fast float %971, %1448
  %1452 = fsub fast float %918, %1449
  %1453 = fsub fast float %919, %1450
  %1454 = fsub fast float %920, %1451
  %1455 = call float @dx.op.dot3.f32(i32 55, float %1452, float %1453, float %1454, float %1452, float %1453, float %1454)  ; Dot3(ax,ay,az,bx,by,bz)
  %1456 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %1452, float %1453, float %1454)  ; Dot3(ax,ay,az,bx,by,bz)
  %1457 = fmul fast float %1456, 2.000000e+00
  %1458 = fsub fast float %1455, %988
  %1459 = fmul fast float %1457, %1457
  %1460 = fmul fast float %991, %1458
  %1461 = fsub fast float %1459, %1460
  %1462 = fcmp fast ult float %1461, 0.000000e+00
  br i1 %1462, label %1468, label %1463, !dx.controlflow.hints !88

; <label>:1463                                    ; preds = %1351
  %1464 = call float @dx.op.unary.f32(i32 24, float %1461)  ; Sqrt(value)
  %1465 = fsub fast float %1464, %1457
  %1466 = fmul fast float %985, 2.000000e+00
  %1467 = fdiv fast float %1465, %1466
  br label %1468

; <label>:1468                                    ; preds = %1463, %1351
  %1469 = phi float [ %1467, %1463 ], [ -1.000000e+00, %1351 ]
  %1470 = fmul fast float %1469, %769
  %1471 = fmul fast float %1469, %770
  %1472 = fmul fast float %1469, %771
  %1473 = fadd fast float %1452, %1470
  %1474 = fadd fast float %1453, %1471
  %1475 = fadd fast float %1454, %1472
  %1476 = fmul fast float %1469, %1469
  %1477 = call float @dx.op.dot3.f32(i32 55, float %1473, float %1474, float %1475, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1478 = fmul fast float %1477, %980
  %1479 = fdiv fast float %1476, %1478
  %1480 = call float @dx.op.dot3.f32(i32 55, float %1473, float %1474, float %1475, float %1473, float %1474, float %1475)  ; Dot3(ax,ay,az,bx,by,bz)
  %1481 = call float @dx.op.unary.f32(i32 25, float %1480)  ; Rsqrt(value)
  %1482 = fmul fast float %1481, %1473
  %1483 = fmul fast float %1481, %1474
  %1484 = fmul fast float %1481, %1475
  %1485 = call float @dx.op.unary.f32(i32 6, float %1482)  ; FAbs(value)
  %1486 = call float @dx.op.unary.f32(i32 6, float %1483)  ; FAbs(value)
  %1487 = call float @dx.op.unary.f32(i32 6, float %1484)  ; FAbs(value)
  %1488 = fsub fast float 1.000000e+00, %1487
  %1489 = call float @dx.op.unary.f32(i32 24, float %1488)  ; Sqrt(value)
  %1490 = call float @dx.op.binary.f32(i32 36, float %1485, float %1486)  ; FMin(a,b)
  %1491 = call float @dx.op.binary.f32(i32 35, float %1485, float %1486)  ; FMax(a,b)
  %1492 = fadd fast float %1491, 0x3BF0000000000000
  %1493 = fdiv fast float %1490, %1492
  %1494 = fmul fast float %1493, 0x3F99BE1040000000
  %1495 = fsub fast float 0x3FA5746D00000000, %1494
  %1496 = fmul fast float %1495, %1493
  %1497 = fadd fast float %1496, 0x3FB692C5C0000000
  %1498 = fmul fast float %1497, %1493
  %1499 = fadd fast float %1498, 0xBFCFA8A1C0000000
  %1500 = fmul fast float %1499, %1493
  %1501 = fadd fast float %1500, 0x3F79384B40000000
  %1502 = fmul fast float %1501, %1493
  %1503 = fadd fast float %1502, 0x3FE45BF7C0000000
  %1504 = fmul fast float %1503, %1493
  %1505 = fadd fast float %1504, 0x3ED10F8960000000
  %1506 = fcmp fast olt float %1485, %1486
  %1507 = fsub fast float 0x3FEFFFF780000000, %1504
  %1508 = select i1 %1506, float %1507, float %1505
  %1509 = fmul fast float %1508, %1489
  %1510 = fsub fast float %1489, %1509
  %1511 = fcmp fast olt float %1484, 0.000000e+00
  %1512 = fsub fast float 1.000000e+00, %1509
  %1513 = fsub fast float 1.000000e+00, %1510
  %1514 = select i1 %1511, float %1512, float %1510
  %1515 = select i1 %1511, float %1513, float %1509
  %1516 = bitcast float %1514 to i32
  %1517 = bitcast float %1515 to i32
  %1518 = bitcast float %1482 to i32
  %1519 = bitcast float %1483 to i32
  %1520 = and i32 %1518, -2147483648
  %1521 = and i32 %1519, -2147483648
  %1522 = xor i32 %1516, %1520
  %1523 = xor i32 %1517, %1521
  %1524 = bitcast i32 %1522 to float
  %1525 = bitcast i32 %1523 to float
  %1526 = fmul fast float %1524, 5.000000e-01
  %1527 = fmul fast float %1525, 5.000000e-01
  %1528 = fadd fast float %1526, 5.000000e-01
  %1529 = fadd fast float %1527, 5.000000e-01
  %1530 = and i32 %1441, %214
  %1531 = lshr i32 %1441, %1063
  %1532 = mul i32 %1530, %208
  %1533 = mul i32 %1531, %208
  %1534 = fmul fast float %1528, %1067
  %1535 = fmul fast float %1529, %1067
  %1536 = uitofp i32 %1532 to float
  %1537 = uitofp i32 %1533 to float
  %1538 = fadd fast float %1536, %1072
  %1539 = fadd fast float %1538, %1534
  %1540 = fadd fast float %1537, %1072
  %1541 = fadd fast float %1540, %1535
  %1542 = fmul fast float %1539, %211
  %1543 = fmul fast float %1541, %212
  %1544 = icmp eq i32 %1441, -1
  %1545 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1542, float %1543, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1546 = extractvalue %dx.types.ResRet.f32 %1545, 0
  %1547 = extractvalue %dx.types.ResRet.f32 %1545, 1
  %1548 = extractvalue %dx.types.ResRet.f32 %1545, 2
  %1549 = select i1 %1544, float 0.000000e+00, float %1546
  %1550 = select i1 %1544, float 0.000000e+00, float %1547
  %1551 = select i1 %1544, float 0.000000e+00, float %1548
  %1552 = fmul fast float %1549, %1479
  %1553 = fmul fast float %1550, %1479
  %1554 = fmul fast float %1551, %1479
  %1555 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %1439, i32 %946, i32 %1094, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1556 = extractvalue %dx.types.ResRet.i32 %1555, 0
  %1557 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %1556, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1558 = extractvalue %dx.types.ResRet.f32 %1557, 0
  %1559 = extractvalue %dx.types.ResRet.f32 %1557, 1
  %1560 = extractvalue %dx.types.ResRet.f32 %1557, 2
  %1561 = fadd fast float %1444, %1558
  %1562 = fadd fast float %970, %1559
  %1563 = fadd fast float %1099, %1560
  %1564 = fsub fast float %918, %1561
  %1565 = fsub fast float %919, %1562
  %1566 = fsub fast float %920, %1563
  %1567 = call float @dx.op.dot3.f32(i32 55, float %1564, float %1565, float %1566, float %1564, float %1565, float %1566)  ; Dot3(ax,ay,az,bx,by,bz)
  %1568 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %1564, float %1565, float %1566)  ; Dot3(ax,ay,az,bx,by,bz)
  %1569 = fmul fast float %1568, 2.000000e+00
  %1570 = fsub fast float %1567, %988
  %1571 = fmul fast float %1569, %1569
  %1572 = fmul fast float %991, %1570
  %1573 = fsub fast float %1571, %1572
  %1574 = fcmp fast ult float %1573, 0.000000e+00
  br i1 %1574, label %1580, label %1575, !dx.controlflow.hints !88

; <label>:1575                                    ; preds = %1468
  %1576 = call float @dx.op.unary.f32(i32 24, float %1573)  ; Sqrt(value)
  %1577 = fsub fast float %1576, %1569
  %1578 = fmul fast float %985, 2.000000e+00
  %1579 = fdiv fast float %1577, %1578
  br label %1580

; <label>:1580                                    ; preds = %1575, %1468
  %1581 = phi float [ %1579, %1575 ], [ -1.000000e+00, %1468 ]
  %1582 = fmul fast float %1581, %769
  %1583 = fmul fast float %1581, %770
  %1584 = fmul fast float %1581, %771
  %1585 = fadd fast float %1564, %1582
  %1586 = fadd fast float %1565, %1583
  %1587 = fadd fast float %1566, %1584
  %1588 = fmul fast float %1581, %1581
  %1589 = call float @dx.op.dot3.f32(i32 55, float %1585, float %1586, float %1587, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1590 = fmul fast float %1589, %980
  %1591 = fdiv fast float %1588, %1590
  %1592 = call float @dx.op.dot3.f32(i32 55, float %1585, float %1586, float %1587, float %1585, float %1586, float %1587)  ; Dot3(ax,ay,az,bx,by,bz)
  %1593 = call float @dx.op.unary.f32(i32 25, float %1592)  ; Rsqrt(value)
  %1594 = fmul fast float %1593, %1585
  %1595 = fmul fast float %1593, %1586
  %1596 = fmul fast float %1593, %1587
  %1597 = call float @dx.op.unary.f32(i32 6, float %1594)  ; FAbs(value)
  %1598 = call float @dx.op.unary.f32(i32 6, float %1595)  ; FAbs(value)
  %1599 = call float @dx.op.unary.f32(i32 6, float %1596)  ; FAbs(value)
  %1600 = fsub fast float 1.000000e+00, %1599
  %1601 = call float @dx.op.unary.f32(i32 24, float %1600)  ; Sqrt(value)
  %1602 = call float @dx.op.binary.f32(i32 36, float %1597, float %1598)  ; FMin(a,b)
  %1603 = call float @dx.op.binary.f32(i32 35, float %1597, float %1598)  ; FMax(a,b)
  %1604 = fadd fast float %1603, 0x3BF0000000000000
  %1605 = fdiv fast float %1602, %1604
  %1606 = fmul fast float %1605, 0x3F99BE1040000000
  %1607 = fsub fast float 0x3FA5746D00000000, %1606
  %1608 = fmul fast float %1607, %1605
  %1609 = fadd fast float %1608, 0x3FB692C5C0000000
  %1610 = fmul fast float %1609, %1605
  %1611 = fadd fast float %1610, 0xBFCFA8A1C0000000
  %1612 = fmul fast float %1611, %1605
  %1613 = fadd fast float %1612, 0x3F79384B40000000
  %1614 = fmul fast float %1613, %1605
  %1615 = fadd fast float %1614, 0x3FE45BF7C0000000
  %1616 = fmul fast float %1615, %1605
  %1617 = fadd fast float %1616, 0x3ED10F8960000000
  %1618 = fcmp fast olt float %1597, %1598
  %1619 = fsub fast float 0x3FEFFFF780000000, %1616
  %1620 = select i1 %1618, float %1619, float %1617
  %1621 = fmul fast float %1620, %1601
  %1622 = fsub fast float %1601, %1621
  %1623 = fcmp fast olt float %1596, 0.000000e+00
  %1624 = fsub fast float 1.000000e+00, %1621
  %1625 = fsub fast float 1.000000e+00, %1622
  %1626 = select i1 %1623, float %1624, float %1622
  %1627 = select i1 %1623, float %1625, float %1621
  %1628 = bitcast float %1626 to i32
  %1629 = bitcast float %1627 to i32
  %1630 = bitcast float %1594 to i32
  %1631 = bitcast float %1595 to i32
  %1632 = and i32 %1630, -2147483648
  %1633 = and i32 %1631, -2147483648
  %1634 = xor i32 %1628, %1632
  %1635 = xor i32 %1629, %1633
  %1636 = bitcast i32 %1634 to float
  %1637 = bitcast i32 %1635 to float
  %1638 = fmul fast float %1636, 5.000000e-01
  %1639 = fmul fast float %1637, 5.000000e-01
  %1640 = fadd fast float %1638, 5.000000e-01
  %1641 = fadd fast float %1639, 5.000000e-01
  %1642 = and i32 %1556, %214
  %1643 = lshr i32 %1556, %1063
  %1644 = mul i32 %1642, %208
  %1645 = mul i32 %1643, %208
  %1646 = fmul fast float %1640, %1067
  %1647 = fmul fast float %1641, %1067
  %1648 = uitofp i32 %1644 to float
  %1649 = uitofp i32 %1645 to float
  %1650 = fadd fast float %1648, %1072
  %1651 = fadd fast float %1650, %1646
  %1652 = fadd fast float %1649, %1072
  %1653 = fadd fast float %1652, %1647
  %1654 = fmul fast float %1651, %211
  %1655 = fmul fast float %1653, %212
  %1656 = icmp eq i32 %1556, -1
  %1657 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1654, float %1655, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1658 = extractvalue %dx.types.ResRet.f32 %1657, 0
  %1659 = extractvalue %dx.types.ResRet.f32 %1657, 1
  %1660 = extractvalue %dx.types.ResRet.f32 %1657, 2
  %1661 = select i1 %1656, float 0.000000e+00, float %1658
  %1662 = select i1 %1656, float 0.000000e+00, float %1659
  %1663 = select i1 %1656, float 0.000000e+00, float %1660
  %1664 = fmul fast float %1661, %1591
  %1665 = fmul fast float %1662, %1591
  %1666 = fmul fast float %1663, %1591
  %1667 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %1439, i32 %1210, i32 %947, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1668 = extractvalue %dx.types.ResRet.i32 %1667, 0
  %1669 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %1668, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1670 = extractvalue %dx.types.ResRet.f32 %1669, 0
  %1671 = extractvalue %dx.types.ResRet.f32 %1669, 1
  %1672 = extractvalue %dx.types.ResRet.f32 %1669, 2
  %1673 = fadd fast float %1444, %1670
  %1674 = fadd fast float %1215, %1671
  %1675 = fadd fast float %971, %1672
  %1676 = fsub fast float %918, %1673
  %1677 = fsub fast float %919, %1674
  %1678 = fsub fast float %920, %1675
  %1679 = call float @dx.op.dot3.f32(i32 55, float %1676, float %1677, float %1678, float %1676, float %1677, float %1678)  ; Dot3(ax,ay,az,bx,by,bz)
  %1680 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %1676, float %1677, float %1678)  ; Dot3(ax,ay,az,bx,by,bz)
  %1681 = fmul fast float %1680, 2.000000e+00
  %1682 = fsub fast float %1679, %988
  %1683 = fmul fast float %1681, %1681
  %1684 = fmul fast float %991, %1682
  %1685 = fsub fast float %1683, %1684
  %1686 = fcmp fast ult float %1685, 0.000000e+00
  br i1 %1686, label %1692, label %1687, !dx.controlflow.hints !88

; <label>:1687                                    ; preds = %1580
  %1688 = call float @dx.op.unary.f32(i32 24, float %1685)  ; Sqrt(value)
  %1689 = fsub fast float %1688, %1681
  %1690 = fmul fast float %985, 2.000000e+00
  %1691 = fdiv fast float %1689, %1690
  br label %1692

; <label>:1692                                    ; preds = %1687, %1580
  %1693 = phi float [ %1691, %1687 ], [ -1.000000e+00, %1580 ]
  %1694 = fmul fast float %1693, %769
  %1695 = fmul fast float %1693, %770
  %1696 = fmul fast float %1693, %771
  %1697 = fadd fast float %1676, %1694
  %1698 = fadd fast float %1677, %1695
  %1699 = fadd fast float %1678, %1696
  %1700 = fmul fast float %1693, %1693
  %1701 = call float @dx.op.dot3.f32(i32 55, float %1697, float %1698, float %1699, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1702 = fmul fast float %1701, %980
  %1703 = fdiv fast float %1700, %1702
  %1704 = call float @dx.op.dot3.f32(i32 55, float %1697, float %1698, float %1699, float %1697, float %1698, float %1699)  ; Dot3(ax,ay,az,bx,by,bz)
  %1705 = call float @dx.op.unary.f32(i32 25, float %1704)  ; Rsqrt(value)
  %1706 = fmul fast float %1705, %1697
  %1707 = fmul fast float %1705, %1698
  %1708 = fmul fast float %1705, %1699
  %1709 = call float @dx.op.unary.f32(i32 6, float %1706)  ; FAbs(value)
  %1710 = call float @dx.op.unary.f32(i32 6, float %1707)  ; FAbs(value)
  %1711 = call float @dx.op.unary.f32(i32 6, float %1708)  ; FAbs(value)
  %1712 = fsub fast float 1.000000e+00, %1711
  %1713 = call float @dx.op.unary.f32(i32 24, float %1712)  ; Sqrt(value)
  %1714 = call float @dx.op.binary.f32(i32 36, float %1709, float %1710)  ; FMin(a,b)
  %1715 = call float @dx.op.binary.f32(i32 35, float %1709, float %1710)  ; FMax(a,b)
  %1716 = fadd fast float %1715, 0x3BF0000000000000
  %1717 = fdiv fast float %1714, %1716
  %1718 = fmul fast float %1717, 0x3F99BE1040000000
  %1719 = fsub fast float 0x3FA5746D00000000, %1718
  %1720 = fmul fast float %1719, %1717
  %1721 = fadd fast float %1720, 0x3FB692C5C0000000
  %1722 = fmul fast float %1721, %1717
  %1723 = fadd fast float %1722, 0xBFCFA8A1C0000000
  %1724 = fmul fast float %1723, %1717
  %1725 = fadd fast float %1724, 0x3F79384B40000000
  %1726 = fmul fast float %1725, %1717
  %1727 = fadd fast float %1726, 0x3FE45BF7C0000000
  %1728 = fmul fast float %1727, %1717
  %1729 = fadd fast float %1728, 0x3ED10F8960000000
  %1730 = fcmp fast olt float %1709, %1710
  %1731 = fsub fast float 0x3FEFFFF780000000, %1728
  %1732 = select i1 %1730, float %1731, float %1729
  %1733 = fmul fast float %1732, %1713
  %1734 = fsub fast float %1713, %1733
  %1735 = fcmp fast olt float %1708, 0.000000e+00
  %1736 = fsub fast float 1.000000e+00, %1733
  %1737 = fsub fast float 1.000000e+00, %1734
  %1738 = select i1 %1735, float %1736, float %1734
  %1739 = select i1 %1735, float %1737, float %1733
  %1740 = bitcast float %1738 to i32
  %1741 = bitcast float %1739 to i32
  %1742 = bitcast float %1706 to i32
  %1743 = bitcast float %1707 to i32
  %1744 = and i32 %1742, -2147483648
  %1745 = and i32 %1743, -2147483648
  %1746 = xor i32 %1740, %1744
  %1747 = xor i32 %1741, %1745
  %1748 = bitcast i32 %1746 to float
  %1749 = bitcast i32 %1747 to float
  %1750 = fmul fast float %1748, 5.000000e-01
  %1751 = fmul fast float %1749, 5.000000e-01
  %1752 = fadd fast float %1750, 5.000000e-01
  %1753 = fadd fast float %1751, 5.000000e-01
  %1754 = and i32 %1668, %214
  %1755 = lshr i32 %1668, %1063
  %1756 = mul i32 %1754, %208
  %1757 = mul i32 %1755, %208
  %1758 = fmul fast float %1752, %1067
  %1759 = fmul fast float %1753, %1067
  %1760 = uitofp i32 %1756 to float
  %1761 = uitofp i32 %1757 to float
  %1762 = fadd fast float %1760, %1072
  %1763 = fadd fast float %1762, %1758
  %1764 = fadd fast float %1761, %1072
  %1765 = fadd fast float %1764, %1759
  %1766 = fmul fast float %1763, %211
  %1767 = fmul fast float %1765, %212
  %1768 = icmp eq i32 %1668, -1
  %1769 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1766, float %1767, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1770 = extractvalue %dx.types.ResRet.f32 %1769, 0
  %1771 = extractvalue %dx.types.ResRet.f32 %1769, 1
  %1772 = extractvalue %dx.types.ResRet.f32 %1769, 2
  %1773 = select i1 %1768, float 0.000000e+00, float %1770
  %1774 = select i1 %1768, float 0.000000e+00, float %1771
  %1775 = select i1 %1768, float 0.000000e+00, float %1772
  %1776 = fmul fast float %1773, %1703
  %1777 = fmul fast float %1774, %1703
  %1778 = fmul fast float %1775, %1703
  %1779 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %954, i32 0, i32 %1439, i32 %1210, i32 %1094, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1780 = extractvalue %dx.types.ResRet.i32 %1779, 0
  %1781 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %972, i32 %1780, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1782 = extractvalue %dx.types.ResRet.f32 %1781, 0
  %1783 = extractvalue %dx.types.ResRet.f32 %1781, 1
  %1784 = extractvalue %dx.types.ResRet.f32 %1781, 2
  %1785 = fadd fast float %1444, %1782
  %1786 = fadd fast float %1215, %1783
  %1787 = fadd fast float %1099, %1784
  %1788 = fsub fast float %918, %1785
  %1789 = fsub fast float %919, %1786
  %1790 = fsub fast float %920, %1787
  %1791 = call float @dx.op.dot3.f32(i32 55, float %1788, float %1789, float %1790, float %1788, float %1789, float %1790)  ; Dot3(ax,ay,az,bx,by,bz)
  %1792 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %1788, float %1789, float %1790)  ; Dot3(ax,ay,az,bx,by,bz)
  %1793 = fmul fast float %1792, 2.000000e+00
  %1794 = fsub fast float %1791, %988
  %1795 = fmul fast float %1793, %1793
  %1796 = fmul fast float %991, %1794
  %1797 = fsub fast float %1795, %1796
  %1798 = fcmp fast ult float %1797, 0.000000e+00
  br i1 %1798, label %1804, label %1799, !dx.controlflow.hints !88

; <label>:1799                                    ; preds = %1692
  %1800 = call float @dx.op.unary.f32(i32 24, float %1797)  ; Sqrt(value)
  %1801 = fsub fast float %1800, %1793
  %1802 = fmul fast float %985, 2.000000e+00
  %1803 = fdiv fast float %1801, %1802
  br label %1804

; <label>:1804                                    ; preds = %1799, %1692
  %1805 = phi float [ %1803, %1799 ], [ -1.000000e+00, %1692 ]
  %1806 = fmul fast float %1805, %769
  %1807 = fmul fast float %1805, %770
  %1808 = fmul fast float %1805, %771
  %1809 = fadd fast float %1788, %1806
  %1810 = fadd fast float %1789, %1807
  %1811 = fadd fast float %1790, %1808
  %1812 = fmul fast float %1805, %1805
  %1813 = call float @dx.op.dot3.f32(i32 55, float %1809, float %1810, float %1811, float %769, float %770, float %771)  ; Dot3(ax,ay,az,bx,by,bz)
  %1814 = fmul fast float %1813, %980
  %1815 = fdiv fast float %1812, %1814
  %1816 = call float @dx.op.dot3.f32(i32 55, float %1809, float %1810, float %1811, float %1809, float %1810, float %1811)  ; Dot3(ax,ay,az,bx,by,bz)
  %1817 = call float @dx.op.unary.f32(i32 25, float %1816)  ; Rsqrt(value)
  %1818 = fmul fast float %1817, %1809
  %1819 = fmul fast float %1817, %1810
  %1820 = fmul fast float %1817, %1811
  %1821 = call float @dx.op.unary.f32(i32 6, float %1818)  ; FAbs(value)
  %1822 = call float @dx.op.unary.f32(i32 6, float %1819)  ; FAbs(value)
  %1823 = call float @dx.op.unary.f32(i32 6, float %1820)  ; FAbs(value)
  %1824 = fsub fast float 1.000000e+00, %1823
  %1825 = call float @dx.op.unary.f32(i32 24, float %1824)  ; Sqrt(value)
  %1826 = call float @dx.op.binary.f32(i32 36, float %1821, float %1822)  ; FMin(a,b)
  %1827 = call float @dx.op.binary.f32(i32 35, float %1821, float %1822)  ; FMax(a,b)
  %1828 = fadd fast float %1827, 0x3BF0000000000000
  %1829 = fdiv fast float %1826, %1828
  %1830 = fmul fast float %1829, 0x3F99BE1040000000
  %1831 = fsub fast float 0x3FA5746D00000000, %1830
  %1832 = fmul fast float %1831, %1829
  %1833 = fadd fast float %1832, 0x3FB692C5C0000000
  %1834 = fmul fast float %1833, %1829
  %1835 = fadd fast float %1834, 0xBFCFA8A1C0000000
  %1836 = fmul fast float %1835, %1829
  %1837 = fadd fast float %1836, 0x3F79384B40000000
  %1838 = fmul fast float %1837, %1829
  %1839 = fadd fast float %1838, 0x3FE45BF7C0000000
  %1840 = fmul fast float %1839, %1829
  %1841 = fadd fast float %1840, 0x3ED10F8960000000
  %1842 = fcmp fast olt float %1821, %1822
  %1843 = fsub fast float 0x3FEFFFF780000000, %1840
  %1844 = select i1 %1842, float %1843, float %1841
  %1845 = fmul fast float %1844, %1825
  %1846 = fsub fast float %1825, %1845
  %1847 = fcmp fast olt float %1820, 0.000000e+00
  %1848 = fsub fast float 1.000000e+00, %1845
  %1849 = fsub fast float 1.000000e+00, %1846
  %1850 = select i1 %1847, float %1848, float %1846
  %1851 = select i1 %1847, float %1849, float %1845
  %1852 = bitcast float %1850 to i32
  %1853 = bitcast float %1851 to i32
  %1854 = bitcast float %1818 to i32
  %1855 = bitcast float %1819 to i32
  %1856 = and i32 %1854, -2147483648
  %1857 = and i32 %1855, -2147483648
  %1858 = xor i32 %1852, %1856
  %1859 = xor i32 %1853, %1857
  %1860 = bitcast i32 %1858 to float
  %1861 = bitcast i32 %1859 to float
  %1862 = fmul fast float %1860, 5.000000e-01
  %1863 = fmul fast float %1861, 5.000000e-01
  %1864 = fadd fast float %1862, 5.000000e-01
  %1865 = fadd fast float %1863, 5.000000e-01
  %1866 = and i32 %1780, %214
  %1867 = lshr i32 %1780, %1063
  %1868 = mul i32 %1866, %208
  %1869 = mul i32 %1867, %208
  %1870 = fmul fast float %1864, %1067
  %1871 = fmul fast float %1865, %1067
  %1872 = uitofp i32 %1868 to float
  %1873 = uitofp i32 %1869 to float
  %1874 = fadd fast float %1872, %1072
  %1875 = fadd fast float %1874, %1870
  %1876 = fadd fast float %1873, %1072
  %1877 = fadd fast float %1876, %1871
  %1878 = fmul fast float %1875, %211
  %1879 = fmul fast float %1877, %212
  %1880 = icmp eq i32 %1780, -1
  %1881 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1082, %dx.types.Handle %1083, float %1878, float %1879, float undef, float undef, i32 0, i32 0, i32 undef, float %935)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1882 = extractvalue %dx.types.ResRet.f32 %1881, 0
  %1883 = extractvalue %dx.types.ResRet.f32 %1881, 1
  %1884 = extractvalue %dx.types.ResRet.f32 %1881, 2
  %1885 = select i1 %1880, float 0.000000e+00, float %1882
  %1886 = select i1 %1880, float 0.000000e+00, float %1883
  %1887 = select i1 %1880, float 0.000000e+00, float %1884
  %1888 = fmul fast float %1885, %1815
  %1889 = fmul fast float %1886, %1815
  %1890 = fmul fast float %1887, %1815
  %1891 = fsub fast float %1207, %1091
  %1892 = fsub fast float %1208, %1092
  %1893 = fsub fast float %1209, %1093
  %1894 = fmul fast float %1891, %950
  %1895 = fmul fast float %1892, %950
  %1896 = fmul fast float %1893, %950
  %1897 = fadd fast float %1894, %1091
  %1898 = fadd fast float %1895, %1092
  %1899 = fadd fast float %1896, %1093
  %1900 = fsub fast float %1435, %1323
  %1901 = fsub fast float %1436, %1324
  %1902 = fsub fast float %1437, %1325
  %1903 = fmul fast float %1900, %950
  %1904 = fmul fast float %1901, %950
  %1905 = fmul fast float %1902, %950
  %1906 = fsub fast float %1664, %1552
  %1907 = fsub fast float %1665, %1553
  %1908 = fsub fast float %1666, %1554
  %1909 = fmul fast float %1906, %950
  %1910 = fmul fast float %1907, %950
  %1911 = fmul fast float %1908, %950
  %1912 = fadd fast float %1909, %1552
  %1913 = fadd fast float %1910, %1553
  %1914 = fadd fast float %1911, %1554
  %1915 = fsub fast float %1888, %1776
  %1916 = fsub fast float %1889, %1777
  %1917 = fsub fast float %1890, %1778
  %1918 = fmul fast float %1915, %950
  %1919 = fmul fast float %1916, %950
  %1920 = fmul fast float %1917, %950
  %1921 = fsub fast float %1323, %1897
  %1922 = fadd fast float %1921, %1903
  %1923 = fsub fast float %1324, %1898
  %1924 = fadd fast float %1923, %1904
  %1925 = fsub fast float %1325, %1899
  %1926 = fadd fast float %1925, %1905
  %1927 = fmul fast float %1922, %949
  %1928 = fmul fast float %1924, %949
  %1929 = fmul fast float %1926, %949
  %1930 = fadd fast float %1927, %1897
  %1931 = fadd fast float %1928, %1898
  %1932 = fadd fast float %1929, %1899
  %1933 = fsub fast float %1776, %1912
  %1934 = fadd fast float %1933, %1918
  %1935 = fsub fast float %1777, %1913
  %1936 = fadd fast float %1935, %1919
  %1937 = fsub fast float %1778, %1914
  %1938 = fadd fast float %1937, %1920
  %1939 = fmul fast float %1934, %949
  %1940 = fmul fast float %1936, %949
  %1941 = fmul fast float %1938, %949
  %1942 = fsub fast float %1912, %1930
  %1943 = fadd fast float %1942, %1939
  %1944 = fsub fast float %1913, %1931
  %1945 = fadd fast float %1944, %1940
  %1946 = fsub fast float %1914, %1932
  %1947 = fadd fast float %1946, %1941
  %1948 = fmul fast float %1943, %948
  %1949 = fmul fast float %1945, %948
  %1950 = fmul fast float %1947, %948
  %1951 = fadd fast float %1948, %1930
  %1952 = fadd fast float %1949, %1931
  %1953 = fadd fast float %1950, %1932
  br label %2282

; <label>:1954                                    ; preds = %912
  %1955 = add i32 %759, %77
  %1956 = add i32 %1955, %763
  %1957 = shl i32 %1956, 1
  %1958 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1959 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1958, i32 %1957, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1960 = extractvalue %dx.types.ResRet.i32 %1959, 0
  %1961 = call i32 @dx.op.binary.i32(i32 40, i32 %1960, i32 %76)  ; UMin(a,b)
  %1962 = or i32 %1957, 1
  %1963 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1958, i32 %1962, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1964 = extractvalue %dx.types.ResRet.i32 %1963, 0
  %1965 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 192)  ; CBufferLoadLegacy(handle,regIndex)
  %1966 = extractvalue %dx.types.CBufRet.f32 %1965, 2
  %1967 = call float @dx.op.binary.f32(i32 35, float %504, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1968 = call float @dx.op.unary.f32(i32 23, float %1967)  ; Log(value)
  %1969 = fmul fast float %1968, 0x3FF3333340000000
  %1970 = fadd fast float %1966, -2.000000e+00
  %1971 = fadd fast float %1970, %1969
  %1972 = icmp eq i32 %1961, 0
  br i1 %1972, label %2213, label %1973

; <label>:1973                                    ; preds = %1954
  br label %1974

; <label>:1974                                    ; preds = %2201, %1973
  %1975 = phi float [ %2202, %2201 ], [ 0.000000e+00, %1973 ]
  %1976 = phi float [ %2203, %2201 ], [ 0.000000e+00, %1973 ]
  %1977 = phi float [ %2204, %2201 ], [ 0.000000e+00, %1973 ]
  %1978 = phi float [ %2205, %2201 ], [ 1.000000e+00, %1973 ]
  %1979 = phi i32 [ %2206, %2201 ], [ 0, %1973 ]
  %1980 = fcmp fast olt float %1978, 0x3F50624DE0000000
  br i1 %1980, label %2208, label %1981, !dx.controlflow.hints !89

; <label>:1981                                    ; preds = %1974
  %1982 = add i32 %1979, %1964
  %1983 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1984 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1983, i32 %1982, i32 undef)  ; BufferLoad(srv,index,wot)
  %1985 = extractvalue %dx.types.ResRet.i32 %1984, 0
  %1986 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %1985)  ; CBufferLoadLegacy(handle,regIndex)
  %1987 = extractvalue %dx.types.CBufRet.f32 %1986, 0
  %1988 = extractvalue %dx.types.CBufRet.f32 %1986, 1
  %1989 = extractvalue %dx.types.CBufRet.f32 %1986, 2
  %1990 = add i32 %1985, 341
  %1991 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %1990)  ; CBufferLoadLegacy(handle,regIndex)
  %1992 = extractvalue %dx.types.CBufRet.f32 %1991, 0
  %1993 = extractvalue %dx.types.CBufRet.f32 %1991, 1
  %1994 = extractvalue %dx.types.CBufRet.f32 %1991, 2
  %1995 = fadd fast float %1987, %322
  %1996 = fadd fast float %1988, %323
  %1997 = fadd fast float %1989, %324
  %1998 = fsub fast float %1992, %300
  %1999 = fsub fast float %1993, %301
  %2000 = fsub fast float %1994, %302
  %2001 = fmul fast float %1998, 2.097152e+06
  %2002 = fmul fast float %1999, 2.097152e+06
  %2003 = fmul fast float %2000, 2.097152e+06
  %2004 = fadd fast float %1995, %2001
  %2005 = fadd fast float %1996, %2002
  %2006 = fadd fast float %1997, %2003
  %2007 = extractvalue %dx.types.CBufRet.f32 %1986, 3
  %2008 = add i32 %1985, 682
  %2009 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %2008)  ; CBufferLoadLegacy(handle,regIndex)
  %2010 = extractvalue %dx.types.CBufRet.f32 %2009, 0
  %2011 = extractvalue %dx.types.CBufRet.f32 %2009, 1
  %2012 = fsub fast float %401, %2004
  %2013 = fsub fast float %402, %2005
  %2014 = fsub fast float %403, %2006
  %2015 = call float @dx.op.dot3.f32(i32 55, float %2012, float %2013, float %2014, float %2012, float %2013, float %2014)  ; Dot3(ax,ay,az,bx,by,bz)
  %2016 = call float @dx.op.unary.f32(i32 24, float %2015)  ; Sqrt(value)
  %2017 = fdiv fast float %2016, %2007
  %2018 = call float @dx.op.unary.f32(i32 7, float %2017)  ; Saturate(value)
  %2019 = fcmp fast olt float %2016, %2007
  br i1 %2019, label %2020, label %2201, !dx.controlflow.hints !90

; <label>:2020                                    ; preds = %1981
  %2021 = extractvalue %dx.types.CBufRet.f32 %2009, 2
  %2022 = add i32 %1985, 1023
  %2023 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %2022)  ; CBufferLoadLegacy(handle,regIndex)
  %2024 = extractvalue %dx.types.CBufRet.f32 %2023, 0
  %2025 = extractvalue %dx.types.CBufRet.f32 %2023, 1
  %2026 = extractvalue %dx.types.CBufRet.f32 %2023, 2
  %2027 = fcmp fast ogt float %2021, 0.000000e+00
  br i1 %2027, label %2028, label %2151, !dx.controlflow.hints !91

; <label>:2028                                    ; preds = %2020
  %2029 = add i32 %1985, 2728
  %2030 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %2029)  ; CBufferLoadLegacy(handle,regIndex)
  %2031 = extractvalue %dx.types.CBufRet.f32 %2030, 0
  %2032 = extractvalue %dx.types.CBufRet.f32 %2030, 1
  %2033 = extractvalue %dx.types.CBufRet.f32 %2030, 2
  %2034 = extractvalue %dx.types.CBufRet.f32 %2030, 3
  %2035 = shl i32 %1985, 2
  %2036 = add i32 %2035, 1364
  %2037 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %2036)  ; CBufferLoadLegacy(handle,regIndex)
  %2038 = extractvalue %dx.types.CBufRet.f32 %2037, 0
  %2039 = extractvalue %dx.types.CBufRet.f32 %2037, 1
  %2040 = extractvalue %dx.types.CBufRet.f32 %2037, 2
  %2041 = add i32 %2035, 1365
  %2042 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %2041)  ; CBufferLoadLegacy(handle,regIndex)
  %2043 = extractvalue %dx.types.CBufRet.f32 %2042, 0
  %2044 = extractvalue %dx.types.CBufRet.f32 %2042, 1
  %2045 = extractvalue %dx.types.CBufRet.f32 %2042, 2
  %2046 = add i32 %2035, 1366
  %2047 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %2046)  ; CBufferLoadLegacy(handle,regIndex)
  %2048 = extractvalue %dx.types.CBufRet.f32 %2047, 0
  %2049 = extractvalue %dx.types.CBufRet.f32 %2047, 1
  %2050 = extractvalue %dx.types.CBufRet.f32 %2047, 2
  %2051 = add i32 %2035, 1367
  %2052 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 %2051)  ; CBufferLoadLegacy(handle,regIndex)
  %2053 = extractvalue %dx.types.CBufRet.f32 %2052, 0
  %2054 = extractvalue %dx.types.CBufRet.f32 %2052, 1
  %2055 = extractvalue %dx.types.CBufRet.f32 %2052, 2
  %2056 = fmul fast float %2038, %2012
  %2057 = call float @dx.op.tertiary.f32(i32 46, float %2013, float %2043, float %2056)  ; FMad(a,b,c)
  %2058 = call float @dx.op.tertiary.f32(i32 46, float %2014, float %2048, float %2057)  ; FMad(a,b,c)
  %2059 = fadd fast float %2058, %2053
  %2060 = fmul fast float %2039, %2012
  %2061 = call float @dx.op.tertiary.f32(i32 46, float %2013, float %2044, float %2060)  ; FMad(a,b,c)
  %2062 = call float @dx.op.tertiary.f32(i32 46, float %2014, float %2049, float %2061)  ; FMad(a,b,c)
  %2063 = fadd fast float %2062, %2054
  %2064 = fmul fast float %2040, %2012
  %2065 = call float @dx.op.tertiary.f32(i32 46, float %2013, float %2045, float %2064)  ; FMad(a,b,c)
  %2066 = call float @dx.op.tertiary.f32(i32 46, float %2014, float %2050, float %2065)  ; FMad(a,b,c)
  %2067 = fadd fast float %2066, %2055
  %2068 = fmul fast float %2038, %769
  %2069 = call float @dx.op.tertiary.f32(i32 46, float %770, float %2043, float %2068)  ; FMad(a,b,c)
  %2070 = call float @dx.op.tertiary.f32(i32 46, float %771, float %2048, float %2069)  ; FMad(a,b,c)
  %2071 = fmul fast float %2039, %769
  %2072 = call float @dx.op.tertiary.f32(i32 46, float %770, float %2044, float %2071)  ; FMad(a,b,c)
  %2073 = call float @dx.op.tertiary.f32(i32 46, float %771, float %2049, float %2072)  ; FMad(a,b,c)
  %2074 = fmul fast float %2040, %769
  %2075 = call float @dx.op.tertiary.f32(i32 46, float %770, float %2045, float %2074)  ; FMad(a,b,c)
  %2076 = call float @dx.op.tertiary.f32(i32 46, float %771, float %2050, float %2075)  ; FMad(a,b,c)
  %2077 = fdiv fast float 1.000000e+00, %2070
  %2078 = fdiv fast float 1.000000e+00, %2073
  %2079 = fdiv fast float 1.000000e+00, %2076
  %2080 = fsub fast float -0.000000e+00, %2077
  %2081 = fsub fast float -0.000000e+00, %2078
  %2082 = fsub fast float -0.000000e+00, %2079
  %2083 = fmul fast float %2077, %2059
  %2084 = fmul fast float %2078, %2063
  %2085 = fmul fast float %2079, %2067
  %2086 = fsub fast float %2080, %2083
  %2087 = fsub fast float %2081, %2084
  %2088 = fsub fast float %2082, %2085
  %2089 = fsub fast float %2077, %2083
  %2090 = fsub fast float %2078, %2084
  %2091 = fsub fast float %2079, %2085
  %2092 = call float @dx.op.binary.f32(i32 35, float %2086, float %2089)  ; FMax(a,b)
  %2093 = call float @dx.op.binary.f32(i32 35, float %2087, float %2090)  ; FMax(a,b)
  %2094 = call float @dx.op.binary.f32(i32 35, float %2088, float %2091)  ; FMax(a,b)
  %2095 = call float @dx.op.binary.f32(i32 36, float %2093, float %2094)  ; FMin(a,b)
  %2096 = call float @dx.op.binary.f32(i32 36, float %2092, float %2095)  ; FMin(a,b)
  %2097 = fmul fast float %2096, %769
  %2098 = fmul fast float %2096, %770
  %2099 = fmul fast float %2096, %771
  %2100 = fsub fast float %2012, %2024
  %2101 = fadd fast float %2100, %2097
  %2102 = fsub fast float %2013, %2025
  %2103 = fadd fast float %2102, %2098
  %2104 = fsub fast float %2014, %2026
  %2105 = fadd fast float %2104, %2099
  %2106 = fmul fast float %2059, %2031
  %2107 = fmul fast float %2063, %2032
  %2108 = fmul fast float %2067, %2033
  %2109 = fmul fast float %2034, 5.000000e-01
  %2110 = fsub fast float %2031, %2109
  %2111 = fsub fast float %2032, %2109
  %2112 = fsub fast float %2033, %2109
  %2113 = fsub fast float -0.000000e+00, %2110
  %2114 = fsub fast float -0.000000e+00, %2111
  %2115 = fsub fast float -0.000000e+00, %2112
  %2116 = fadd fast float %2106, %2110
  %2117 = fadd fast float %2107, %2111
  %2118 = fadd fast float %2108, %2112
  %2119 = call float @dx.op.unary.f32(i32 6, float %2116)  ; FAbs(value)
  %2120 = call float @dx.op.unary.f32(i32 6, float %2117)  ; FAbs(value)
  %2121 = call float @dx.op.unary.f32(i32 6, float %2118)  ; FAbs(value)
  %2122 = fcmp fast olt float %2106, %2113
  %2123 = fcmp fast olt float %2107, %2114
  %2124 = fcmp fast olt float %2108, %2115
  %2125 = select i1 %2122, float %2119, float 0.000000e+00
  %2126 = select i1 %2123, float %2120, float 0.000000e+00
  %2127 = select i1 %2124, float %2121, float 0.000000e+00
  %2128 = fsub fast float %2106, %2110
  %2129 = fsub fast float %2107, %2111
  %2130 = fsub fast float %2108, %2112
  %2131 = call float @dx.op.unary.f32(i32 6, float %2128)  ; FAbs(value)
  %2132 = call float @dx.op.unary.f32(i32 6, float %2129)  ; FAbs(value)
  %2133 = call float @dx.op.unary.f32(i32 6, float %2130)  ; FAbs(value)
  %2134 = fcmp fast ogt float %2106, %2110
  %2135 = fcmp fast ogt float %2107, %2111
  %2136 = fcmp fast ogt float %2108, %2112
  %2137 = select i1 %2134, float %2131, float 0.000000e+00
  %2138 = select i1 %2135, float %2132, float 0.000000e+00
  %2139 = select i1 %2136, float %2133, float 0.000000e+00
  %2140 = call float @dx.op.dot3.f32(i32 55, float %2125, float %2126, float %2127, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %2141 = call float @dx.op.dot3.f32(i32 55, float %2137, float %2138, float %2139, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %2142 = fadd fast float %2141, %2140
  %2143 = fmul fast float %2034, 0x3FE6666660000000
  %2144 = fdiv fast float %2142, %2143
  %2145 = call float @dx.op.unary.f32(i32 7, float %2144)  ; Saturate(value)
  %2146 = fmul fast float %2145, 2.000000e+00
  %2147 = fsub fast float 3.000000e+00, %2146
  %2148 = fmul fast float %2145, %2145
  %2149 = fmul fast float %2148, %2147
  %2150 = fsub fast float 1.000000e+00, %2149
  br label %2178

; <label>:2151                                    ; preds = %2020
  %2152 = fmul fast float %2007, %2007
  %2153 = call float @dx.op.dot3.f32(i32 55, float %769, float %770, float %771, float %2012, float %2013, float %2014)  ; Dot3(ax,ay,az,bx,by,bz)
  %2154 = fsub fast float %2015, %2152
  %2155 = fmul fast float %2153, %2153
  %2156 = fsub fast float %2155, %2154
  %2157 = fcmp fast ult float %2156, 0.000000e+00
  br i1 %2157, label %2178, label %2158, !dx.controlflow.hints !92

; <label>:2158                                    ; preds = %2151
  %2159 = call float @dx.op.unary.f32(i32 24, float %2156)  ; Sqrt(value)
  %2160 = fsub fast float %2159, %2153
  %2161 = fmul fast float %2160, %769
  %2162 = fmul fast float %2160, %770
  %2163 = fmul fast float %2160, %771
  %2164 = fsub fast float %2012, %2024
  %2165 = fadd fast float %2164, %2161
  %2166 = fsub fast float %2013, %2025
  %2167 = fadd fast float %2166, %2162
  %2168 = fsub fast float %2014, %2026
  %2169 = fadd fast float %2168, %2163
  %2170 = fmul fast float %2018, 2.500000e+00
  %2171 = fadd fast float %2170, -1.500000e+00
  %2172 = call float @dx.op.unary.f32(i32 7, float %2171)  ; Saturate(value)
  %2173 = fmul fast float %2172, %2172
  %2174 = fmul fast float %2172, 2.000000e+00
  %2175 = fsub fast float 3.000000e+00, %2174
  %2176 = fmul fast float %2173, %2175
  %2177 = fsub fast float 1.000000e+00, %2176
  br label %2178

; <label>:2178                                    ; preds = %2158, %2151, %2028
  %2179 = phi float [ %2101, %2028 ], [ %2165, %2158 ], [ %769, %2151 ]
  %2180 = phi float [ %2103, %2028 ], [ %2167, %2158 ], [ %770, %2151 ]
  %2181 = phi float [ %2105, %2028 ], [ %2169, %2158 ], [ %771, %2151 ]
  %2182 = phi float [ %2150, %2028 ], [ %2177, %2158 ], [ 0.000000e+00, %2151 ]
  %2183 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 9, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCubeArray<4xF32>
  %2184 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2185 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2183, %dx.types.Handle %2184, float %2179, float %2180, float %2181, float %2011, i32 undef, i32 undef, i32 undef, float %1971)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2186 = extractvalue %dx.types.ResRet.f32 %2185, 0
  %2187 = extractvalue %dx.types.ResRet.f32 %2185, 1
  %2188 = extractvalue %dx.types.ResRet.f32 %2185, 2
  %2189 = extractvalue %dx.types.ResRet.f32 %2185, 3
  %2190 = fmul fast float %2189, %2182
  %2191 = fmul fast float %2010, %1978
  %2192 = fmul fast float %2191, %2182
  %2193 = fmul fast float %2192, %2186
  %2194 = fmul fast float %2192, %2187
  %2195 = fmul fast float %2192, %2188
  %2196 = fadd fast float %2193, %1975
  %2197 = fadd fast float %2194, %1976
  %2198 = fadd fast float %2195, %1977
  %2199 = fsub fast float 1.000000e+00, %2190
  %2200 = fmul fast float %2199, %1978
  br label %2201

; <label>:2201                                    ; preds = %2178, %1981
  %2202 = phi float [ %2196, %2178 ], [ %1975, %1981 ]
  %2203 = phi float [ %2197, %2178 ], [ %1976, %1981 ]
  %2204 = phi float [ %2198, %2178 ], [ %1977, %1981 ]
  %2205 = phi float [ %2200, %2178 ], [ %1978, %1981 ]
  %2206 = add nuw i32 %1979, 1
  %2207 = icmp ult i32 %2206, %1961
  br i1 %2207, label %1974, label %2208, !llvm.loop !93

; <label>:2208                                    ; preds = %2201, %1974
  %2209 = phi float [ %2202, %2201 ], [ %1975, %1974 ]
  %2210 = phi float [ %2203, %2201 ], [ %1976, %1974 ]
  %2211 = phi float [ %2204, %2201 ], [ %1977, %1974 ]
  %2212 = phi float [ %2205, %2201 ], [ %1978, %1974 ]
  br label %2213

; <label>:2213                                    ; preds = %2208, %1954
  %2214 = phi float [ 0.000000e+00, %1954 ], [ %2209, %2208 ]
  %2215 = phi float [ 0.000000e+00, %1954 ], [ %2210, %2208 ]
  %2216 = phi float [ 0.000000e+00, %1954 ], [ %2211, %2208 ]
  %2217 = phi float [ 1.000000e+00, %1954 ], [ %2212, %2208 ]
  %2218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 156)  ; CBufferLoadLegacy(handle,regIndex)
  %2219 = extractvalue %dx.types.CBufRet.f32 %2218, 0
  %2220 = extractvalue %dx.types.CBufRet.f32 %2218, 1
  %2221 = extractvalue %dx.types.CBufRet.f32 %2218, 2
  %2222 = fmul fast float %2219, %2214
  %2223 = fmul fast float %2220, %2215
  %2224 = fmul fast float %2221, %2216
  %2225 = fcmp fast ogt float %90, 0.000000e+00
  br i1 %2225, label %2226, label %2250, !dx.controlflow.hints !95

; <label>:2226                                    ; preds = %2213
  %2227 = fadd fast float %89, -2.000000e+00
  %2228 = fadd fast float %2227, %1969
  %2229 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2230 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2231 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2229, %dx.types.Handle %2230, float %769, float %770, float %771, float undef, i32 undef, i32 undef, i32 undef, float %2228)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2232 = extractvalue %dx.types.ResRet.f32 %2231, 0
  %2233 = extractvalue %dx.types.ResRet.f32 %2231, 1
  %2234 = extractvalue %dx.types.ResRet.f32 %2231, 2
  %2235 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %2236 = extractvalue %dx.types.CBufRet.f32 %2235, 0
  %2237 = extractvalue %dx.types.CBufRet.f32 %2235, 1
  %2238 = extractvalue %dx.types.CBufRet.f32 %2235, 2
  %2239 = fmul fast float %2236, %2232
  %2240 = fmul fast float %2237, %2233
  %2241 = fmul fast float %2238, %2234
  %2242 = fcmp fast olt float %91, 1.000000e+00
  br i1 %2242, label %2243, label %2250, !dx.controlflow.hints !96

; <label>:2243                                    ; preds = %2226
  %2244 = fmul fast float %2239, %2217
  %2245 = fmul fast float %2240, %2217
  %2246 = fmul fast float %2241, %2217
  %2247 = fadd fast float %2244, %2222
  %2248 = fadd fast float %2245, %2223
  %2249 = fadd fast float %2246, %2224
  br label %2250

; <label>:2250                                    ; preds = %2243, %2226, %2213
  %2251 = phi float [ 0.000000e+00, %2243 ], [ 0.000000e+00, %2213 ], [ %2239, %2226 ]
  %2252 = phi float [ 0.000000e+00, %2243 ], [ 0.000000e+00, %2213 ], [ %2240, %2226 ]
  %2253 = phi float [ 0.000000e+00, %2243 ], [ 0.000000e+00, %2213 ], [ %2241, %2226 ]
  %2254 = phi float [ %2247, %2243 ], [ %2222, %2213 ], [ %2222, %2226 ]
  %2255 = phi float [ %2248, %2243 ], [ %2223, %2213 ], [ %2223, %2226 ]
  %2256 = phi float [ %2249, %2243 ], [ %2224, %2213 ], [ %2224, %2226 ]
  %2257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 194)  ; CBufferLoadLegacy(handle,regIndex)
  %2258 = extractvalue %dx.types.CBufRet.f32 %2257, 0
  %2259 = fmul fast float %2258, %504
  %2260 = extractvalue %dx.types.CBufRet.f32 %2257, 1
  %2261 = fadd fast float %2259, %2260
  %2262 = call float @dx.op.unary.f32(i32 7, float %2261)  ; Saturate(value)
  %2263 = call float @dx.op.unary.f32(i32 7, float %2262)  ; Saturate(value)
  %2264 = fmul fast float %2263, 2.000000e+00
  %2265 = fsub fast float 3.000000e+00, %2264
  %2266 = fmul fast float %2263, %2263
  %2267 = fmul fast float %2266, %2265
  %2268 = extractvalue %dx.types.CBufRet.f32 %2257, 2
  %2269 = call float @dx.op.binary.f32(i32 36, float 0.000000e+00, float %2268)  ; FMin(a,b)
  %2270 = fadd fast float %2269, -1.000000e+00
  %2271 = fmul fast float %2267, %2270
  %2272 = fadd fast float %2271, 1.000000e+00
  %2273 = fmul fast float %2272, %2254
  %2274 = fmul fast float %2272, %2255
  %2275 = fmul fast float %2272, %2256
  %2276 = fmul fast float %2251, %2217
  %2277 = fmul fast float %2252, %2217
  %2278 = fmul fast float %2253, %2217
  %2279 = fadd fast float %2273, %2276
  %2280 = fadd fast float %2274, %2277
  %2281 = fadd fast float %2275, %2278
  br label %2282

; <label>:2282                                    ; preds = %2250, %1804, %884
  %2283 = phi float [ %909, %884 ], [ %1951, %1804 ], [ %2279, %2250 ]
  %2284 = phi float [ %910, %884 ], [ %1952, %1804 ], [ %2280, %2250 ]
  %2285 = phi float [ %911, %884 ], [ %1953, %1804 ], [ %2281, %2250 ]
  %2286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 142)  ; CBufferLoadLegacy(handle,regIndex)
  %2287 = extractvalue %dx.types.CBufRet.f32 %2286, 1
  %2288 = fcmp fast oeq float %2287, 0.000000e+00
  %2289 = icmp sgt i32 %196, 0
  %2290 = and i1 %2289, %2288
  %2291 = and i1 %2290, %808
  br i1 %2291, label %2292, label %2658

; <label>:2292                                    ; preds = %2282
  %2293 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2294 = extractvalue %dx.types.CBufRet.i32 %2293, 1
  %2295 = uitofp i32 %2294 to float
  %2296 = fmul fast float %2295, 0x4040551EC0000000
  %2297 = fmul fast float %2295, 0x4027A147A0000000
  %2298 = fadd fast float %2296, %60
  %2299 = fadd fast float %2297, %61
  %2300 = call float @dx.op.dot2.f32(i32 54, float %2298, float %2299, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %2301 = call float @dx.op.unary.f32(i32 22, float %2300)  ; Frc(value)
  %2302 = fmul fast float %2301, 0x404A7DD040000000
  %2303 = call float @dx.op.unary.f32(i32 22, float %2302)  ; Frc(value)
  %2304 = fadd fast float %2303, -5.000000e-01
  %2305 = call float @dx.op.binary.f32(i32 36, float %63, float 1.000000e+06)  ; FMin(a,b)
  %2306 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %2307 = extractvalue %dx.types.CBufRet.f32 %2306, 2
  %2308 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %2309 = extractvalue %dx.types.CBufRet.f32 %2308, 2
  %2310 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %2311 = extractvalue %dx.types.CBufRet.f32 %2310, 2
  %2312 = fmul fast float %2307, %769
  %2313 = call float @dx.op.tertiary.f32(i32 46, float %770, float %2309, float %2312)  ; FMad(a,b,c)
  %2314 = call float @dx.op.tertiary.f32(i32 46, float %771, float %2311, float %2313)  ; FMad(a,b,c)
  %2315 = fcmp fast olt float %2314, 0.000000e+00
  %2316 = fmul fast float %63, 0xBFEE666660000000
  %2317 = fdiv fast float %2316, %2314
  %2318 = call float @dx.op.binary.f32(i32 36, float %2317, float %2305)  ; FMin(a,b)
  %2319 = select i1 %2315, float %2318, float %2305
  %2320 = fmul fast float %2319, %769
  %2321 = fmul fast float %2319, %770
  %2322 = fmul fast float %2319, %771
  %2323 = fadd fast float %2320, %401
  %2324 = fadd fast float %2321, %402
  %2325 = fadd fast float %2322, %403
  %2326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2327 = extractvalue %dx.types.CBufRet.f32 %2326, 0
  %2328 = extractvalue %dx.types.CBufRet.f32 %2326, 1
  %2329 = extractvalue %dx.types.CBufRet.f32 %2326, 2
  %2330 = extractvalue %dx.types.CBufRet.f32 %2326, 3
  %2331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2332 = extractvalue %dx.types.CBufRet.f32 %2331, 0
  %2333 = extractvalue %dx.types.CBufRet.f32 %2331, 1
  %2334 = extractvalue %dx.types.CBufRet.f32 %2331, 2
  %2335 = extractvalue %dx.types.CBufRet.f32 %2331, 3
  %2336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2337 = extractvalue %dx.types.CBufRet.f32 %2336, 0
  %2338 = extractvalue %dx.types.CBufRet.f32 %2336, 1
  %2339 = extractvalue %dx.types.CBufRet.f32 %2336, 2
  %2340 = extractvalue %dx.types.CBufRet.f32 %2336, 3
  %2341 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2342 = extractvalue %dx.types.CBufRet.f32 %2341, 0
  %2343 = extractvalue %dx.types.CBufRet.f32 %2341, 1
  %2344 = extractvalue %dx.types.CBufRet.f32 %2341, 2
  %2345 = extractvalue %dx.types.CBufRet.f32 %2341, 3
  %2346 = fmul fast float %2327, %401
  %2347 = call float @dx.op.tertiary.f32(i32 46, float %402, float %2332, float %2346)  ; FMad(a,b,c)
  %2348 = call float @dx.op.tertiary.f32(i32 46, float %403, float %2337, float %2347)  ; FMad(a,b,c)
  %2349 = fadd fast float %2348, %2342
  %2350 = fmul fast float %2328, %401
  %2351 = call float @dx.op.tertiary.f32(i32 46, float %402, float %2333, float %2350)  ; FMad(a,b,c)
  %2352 = call float @dx.op.tertiary.f32(i32 46, float %403, float %2338, float %2351)  ; FMad(a,b,c)
  %2353 = fadd fast float %2352, %2343
  %2354 = fmul fast float %2329, %401
  %2355 = call float @dx.op.tertiary.f32(i32 46, float %402, float %2334, float %2354)  ; FMad(a,b,c)
  %2356 = call float @dx.op.tertiary.f32(i32 46, float %403, float %2339, float %2355)  ; FMad(a,b,c)
  %2357 = fadd fast float %2356, %2344
  %2358 = fmul fast float %2330, %401
  %2359 = call float @dx.op.tertiary.f32(i32 46, float %402, float %2335, float %2358)  ; FMad(a,b,c)
  %2360 = call float @dx.op.tertiary.f32(i32 46, float %403, float %2340, float %2359)  ; FMad(a,b,c)
  %2361 = fadd fast float %2360, %2345
  %2362 = fmul fast float %2327, %2323
  %2363 = call float @dx.op.tertiary.f32(i32 46, float %2324, float %2332, float %2362)  ; FMad(a,b,c)
  %2364 = call float @dx.op.tertiary.f32(i32 46, float %2325, float %2337, float %2363)  ; FMad(a,b,c)
  %2365 = fadd fast float %2364, %2342
  %2366 = fmul fast float %2328, %2323
  %2367 = call float @dx.op.tertiary.f32(i32 46, float %2324, float %2333, float %2366)  ; FMad(a,b,c)
  %2368 = call float @dx.op.tertiary.f32(i32 46, float %2325, float %2338, float %2367)  ; FMad(a,b,c)
  %2369 = fadd fast float %2368, %2343
  %2370 = fmul fast float %2329, %2323
  %2371 = call float @dx.op.tertiary.f32(i32 46, float %2324, float %2334, float %2370)  ; FMad(a,b,c)
  %2372 = call float @dx.op.tertiary.f32(i32 46, float %2325, float %2339, float %2371)  ; FMad(a,b,c)
  %2373 = fadd fast float %2372, %2344
  %2374 = fmul fast float %2330, %2323
  %2375 = call float @dx.op.tertiary.f32(i32 46, float %2324, float %2335, float %2374)  ; FMad(a,b,c)
  %2376 = call float @dx.op.tertiary.f32(i32 46, float %2325, float %2340, float %2375)  ; FMad(a,b,c)
  %2377 = fadd fast float %2376, %2345
  %2378 = fdiv fast float 1.000000e+00, %2361
  %2379 = fmul fast float %2378, %2349
  %2380 = fmul fast float %2378, %2353
  %2381 = fmul fast float %2378, %2357
  %2382 = fdiv fast float 1.000000e+00, %2377
  %2383 = fmul fast float %2382, %2365
  %2384 = fmul fast float %2382, %2369
  %2385 = fmul fast float %2382, %2373
  %2386 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %2387 = extractvalue %dx.types.CBufRet.f32 %2386, 2
  %2388 = extractvalue %dx.types.CBufRet.f32 %2386, 3
  %2389 = call float @dx.op.tertiary.f32(i32 46, float %2319, float %2387, float 0.000000e+00)  ; FMad(a,b,c)
  %2390 = call float @dx.op.tertiary.f32(i32 46, float %2319, float %2388, float 0.000000e+00)  ; FMad(a,b,c)
  %2391 = fadd fast float %2389, %2357
  %2392 = fadd fast float %2390, %2361
  %2393 = fdiv fast float 1.000000e+00, %2392
  %2394 = fmul fast float %2393, %2391
  %2395 = fsub fast float %2383, %2379
  %2396 = fsub fast float %2384, %2380
  %2397 = fsub fast float %2385, %2381
  %2398 = fmul fast float %2395, %2395
  %2399 = fmul fast float %2396, %2396
  %2400 = fadd fast float %2398, %2399
  %2401 = call float @dx.op.unary.f32(i32 24, float %2400)  ; Sqrt(value)
  %2402 = fmul fast float %2401, 5.000000e-01
  %2403 = fmul fast float %2402, %2379
  %2404 = fmul fast float %2402, %2380
  %2405 = fadd fast float %2403, %2395
  %2406 = fadd fast float %2404, %2396
  %2407 = call float @dx.op.unary.f32(i32 6, float %2405)  ; FAbs(value)
  %2408 = call float @dx.op.unary.f32(i32 6, float %2406)  ; FAbs(value)
  %2409 = fsub fast float %2407, %2402
  %2410 = fsub fast float %2408, %2402
  %2411 = call float @dx.op.binary.f32(i32 35, float %2409, float 0.000000e+00)  ; FMax(a,b)
  %2412 = call float @dx.op.binary.f32(i32 35, float %2410, float 0.000000e+00)  ; FMax(a,b)
  %2413 = call float @dx.op.unary.f32(i32 6, float %2395)  ; FAbs(value)
  %2414 = call float @dx.op.unary.f32(i32 6, float %2396)  ; FAbs(value)
  %2415 = fdiv fast float %2411, %2413
  %2416 = fdiv fast float %2412, %2414
  %2417 = fsub fast float 1.000000e+00, %2415
  %2418 = fsub fast float 1.000000e+00, %2416
  %2419 = call float @dx.op.binary.f32(i32 36, float %2417, float %2418)  ; FMin(a,b)
  %2420 = fdiv fast float %2419, %2402
  %2421 = fmul fast float %2420, %2397
  %2422 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %2423 = extractvalue %dx.types.CBufRet.f32 %2422, 3
  %2424 = bitcast float %2423 to i32
  %2425 = icmp eq i32 %2424, 0
  %2426 = fsub fast float %2381, %2394
  %2427 = fmul fast float %2426, 4.000000e+00
  br i1 %2425, label %2430, label %2428

; <label>:2428                                    ; preds = %2292
  %2429 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2427)  ; FMax(a,b)
  br label %2433

; <label>:2430                                    ; preds = %2292
  %2431 = call float @dx.op.unary.f32(i32 6, float %2421)  ; FAbs(value)
  %2432 = call float @dx.op.binary.f32(i32 35, float %2431, float %2427)  ; FMax(a,b)
  br label %2433

; <label>:2433                                    ; preds = %2430, %2428
  %2434 = phi float [ %2429, %2428 ], [ %2432, %2430 ]
  %2435 = fmul fast float %2379, 5.000000e-01
  %2436 = fmul fast float %2380, 5.000000e-01
  %2437 = fadd fast float %2435, 5.000000e-01
  %2438 = fsub fast float 5.000000e-01, %2436
  %2439 = fmul fast float %2437, %179
  %2440 = fmul fast float %2438, %180
  %2441 = fmul fast float %2434, 0x3FB5555560000000
  %2442 = fmul fast float %179, 0x3FA5555560000000
  %2443 = fmul fast float %2442, %2395
  %2444 = fmul fast float %2443, %2420
  %2445 = fmul fast float %180, 0xBFA5555560000000
  %2446 = fmul fast float %2445, %2396
  %2447 = fmul fast float %2446, %2420
  %2448 = fmul fast float %2421, 0x3FB5555560000000
  %2449 = fmul fast float %2444, %2304
  %2450 = fmul fast float %2447, %2304
  %2451 = fmul fast float %2448, %2304
  %2452 = fadd fast float %2449, %2439
  %2453 = fadd fast float %2450, %2440
  %2454 = fadd fast float %2451, %2381
  br label %2455

; <label>:2455                                    ; preds = %2519, %2433
  %2456 = phi float [ %2520, %2519 ], [ 1.000000e+00, %2433 ]
  %2457 = phi float [ %2503, %2519 ], [ 0.000000e+00, %2433 ]
  %2458 = phi i32 [ %2521, %2519 ], [ 0, %2433 ]
  %2459 = uitofp i32 %2458 to float
  %2460 = fadd fast float %2459, 1.000000e+00
  %2461 = fmul fast float %2460, %2444
  %2462 = fmul fast float %2460, %2447
  %2463 = fadd fast float %2461, %2452
  %2464 = fadd fast float %2462, %2453
  %2465 = fmul fast float %2460, %2448
  %2466 = fadd fast float %2465, %2454
  %2467 = fadd fast float %2459, 2.000000e+00
  %2468 = fmul fast float %2467, %2444
  %2469 = fmul fast float %2467, %2447
  %2470 = fadd fast float %2468, %2452
  %2471 = fadd fast float %2469, %2453
  %2472 = fmul fast float %2467, %2448
  %2473 = fadd fast float %2472, %2454
  %2474 = fadd fast float %2459, 3.000000e+00
  %2475 = fmul fast float %2474, %2444
  %2476 = fmul fast float %2474, %2447
  %2477 = fadd fast float %2475, %2452
  %2478 = fadd fast float %2476, %2453
  %2479 = fmul fast float %2474, %2448
  %2480 = fadd fast float %2479, %2454
  %2481 = fadd fast float %2459, 4.000000e+00
  %2482 = fmul fast float %2481, %2444
  %2483 = fmul fast float %2481, %2447
  %2484 = fadd fast float %2482, %2452
  %2485 = fadd fast float %2483, %2453
  %2486 = fmul fast float %2481, %2448
  %2487 = fadd fast float %2486, %2454
  %2488 = fmul fast float %504, 0x3FE5555560000000
  %2489 = fadd fast float %2456, %2488
  %2490 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2492 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2490, %dx.types.Handle %2491, float %2463, float %2464, float undef, float undef, i32 0, i32 0, i32 undef, float %2456)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2493 = extractvalue %dx.types.ResRet.f32 %2492, 0
  %2494 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2490, %dx.types.Handle %2491, float %2470, float %2471, float undef, float undef, i32 0, i32 0, i32 undef, float %2456)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2495 = extractvalue %dx.types.ResRet.f32 %2494, 0
  %2496 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2490, %dx.types.Handle %2491, float %2477, float %2478, float undef, float undef, i32 0, i32 0, i32 undef, float %2489)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2497 = extractvalue %dx.types.ResRet.f32 %2496, 0
  %2498 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2490, %dx.types.Handle %2491, float %2484, float %2485, float undef, float undef, i32 0, i32 0, i32 undef, float %2489)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2499 = extractvalue %dx.types.ResRet.f32 %2498, 0
  %2500 = fsub fast float %2466, %2493
  %2501 = fsub fast float %2473, %2495
  %2502 = fsub fast float %2480, %2497
  %2503 = fsub fast float %2487, %2499
  %2504 = fadd fast float %2500, %2441
  %2505 = fadd fast float %2501, %2441
  %2506 = fadd fast float %2502, %2441
  %2507 = fadd fast float %2503, %2441
  %2508 = call float @dx.op.unary.f32(i32 6, float %2504)  ; FAbs(value)
  %2509 = call float @dx.op.unary.f32(i32 6, float %2505)  ; FAbs(value)
  %2510 = call float @dx.op.unary.f32(i32 6, float %2506)  ; FAbs(value)
  %2511 = call float @dx.op.unary.f32(i32 6, float %2507)  ; FAbs(value)
  %2512 = fcmp fast olt float %2508, %2441
  %2513 = fcmp fast olt float %2509, %2441
  %2514 = fcmp fast olt float %2510, %2441
  %2515 = fcmp fast olt float %2511, %2441
  %2516 = or i1 %2512, %2513
  %2517 = or i1 %2516, %2514
  %2518 = or i1 %2517, %2515
  br i1 %2518, label %2523, label %2519, !dx.controlflow.hints !97

; <label>:2519                                    ; preds = %2455
  %2520 = fadd fast float %2489, %2488
  %2521 = add nuw nsw i32 %2458, 4
  %2522 = icmp ult i32 %2521, 12
  br i1 %2522, label %2455, label %2523, !llvm.loop !98

; <label>:2523                                    ; preds = %2519, %2455
  %2524 = phi i1 [ false, %2519 ], [ true, %2455 ]
  %2525 = phi i1 [ false, %2519 ], [ %2514, %2455 ]
  %2526 = phi i1 [ false, %2519 ], [ %2513, %2455 ]
  %2527 = phi i1 [ false, %2519 ], [ %2512, %2455 ]
  %2528 = phi float [ %2503, %2519 ], [ %2457, %2455 ]
  %2529 = phi i32 [ %2521, %2519 ], [ %2458, %2455 ]
  %2530 = uitofp i32 %2529 to float
  br i1 %2524, label %2531, label %2546, !dx.controlflow.hints !99

; <label>:2531                                    ; preds = %2523
  %2532 = select i1 %2525, float %2501, float %2502
  %2533 = select i1 %2525, float %2502, float %2503
  %2534 = select i1 %2525, float 2.000000e+00, float 3.000000e+00
  %2535 = select i1 %2526, float %2500, float %2532
  %2536 = select i1 %2526, float %2501, float %2533
  %2537 = select i1 %2526, float 1.000000e+00, float %2534
  %2538 = select i1 %2527, float %2528, float %2535
  %2539 = select i1 %2527, float %2500, float %2536
  %2540 = select i1 %2527, float 0.000000e+00, float %2537
  %2541 = fadd fast float %2530, %2540
  %2542 = fsub fast float %2538, %2539
  %2543 = fdiv fast float %2538, %2542
  %2544 = call float @dx.op.unary.f32(i32 7, float %2543)  ; Saturate(value)
  %2545 = fadd fast float %2541, %2544
  br label %2546

; <label>:2546                                    ; preds = %2531, %2523
  %2547 = phi float [ %2545, %2531 ], [ %2530, %2523 ]
  %2548 = fmul fast float %2547, %2448
  %2549 = fadd fast float %2548, %2454
  %2550 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  br i1 %2524, label %2551, label %2658, !dx.controlflow.hints !100

; <label>:2551                                    ; preds = %2546
  %2552 = fmul fast float %2547, %2447
  %2553 = fadd fast float %2552, %2453
  %2554 = fmul fast float %182, 2.000000e+00
  %2555 = fmul fast float %2554, %2553
  %2556 = fsub fast float 1.000000e+00, %2555
  %2557 = extractvalue %dx.types.CBufRet.f32 %2550, 1
  %2558 = fmul fast float %2556, %2557
  %2559 = fmul fast float %2547, %2444
  %2560 = fadd fast float %2559, %2452
  %2561 = fmul fast float %181, 2.000000e+00
  %2562 = fmul fast float %2561, %2560
  %2563 = fadd fast float %2562, -1.000000e+00
  %2564 = extractvalue %dx.types.CBufRet.f32 %2550, 0
  %2565 = fmul fast float %2563, %2564
  %2566 = fdiv fast float %2565, %2564
  %2567 = fdiv fast float %2558, %2557
  %2568 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 113)  ; CBufferLoadLegacy(handle,regIndex)
  %2569 = extractvalue %dx.types.CBufRet.f32 %2568, 0
  %2570 = extractvalue %dx.types.CBufRet.f32 %2568, 1
  %2571 = extractvalue %dx.types.CBufRet.f32 %2568, 3
  %2572 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %2573 = extractvalue %dx.types.CBufRet.f32 %2572, 0
  %2574 = extractvalue %dx.types.CBufRet.f32 %2572, 1
  %2575 = extractvalue %dx.types.CBufRet.f32 %2572, 3
  %2576 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 115)  ; CBufferLoadLegacy(handle,regIndex)
  %2577 = extractvalue %dx.types.CBufRet.f32 %2576, 0
  %2578 = extractvalue %dx.types.CBufRet.f32 %2576, 1
  %2579 = extractvalue %dx.types.CBufRet.f32 %2576, 3
  %2580 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %2581 = extractvalue %dx.types.CBufRet.f32 %2580, 0
  %2582 = extractvalue %dx.types.CBufRet.f32 %2580, 1
  %2583 = extractvalue %dx.types.CBufRet.f32 %2580, 3
  %2584 = fmul fast float %2569, %2566
  %2585 = call float @dx.op.tertiary.f32(i32 46, float %2567, float %2573, float %2584)  ; FMad(a,b,c)
  %2586 = call float @dx.op.tertiary.f32(i32 46, float %2549, float %2577, float %2585)  ; FMad(a,b,c)
  %2587 = fadd fast float %2586, %2581
  %2588 = fmul fast float %2570, %2566
  %2589 = call float @dx.op.tertiary.f32(i32 46, float %2567, float %2574, float %2588)  ; FMad(a,b,c)
  %2590 = call float @dx.op.tertiary.f32(i32 46, float %2549, float %2578, float %2589)  ; FMad(a,b,c)
  %2591 = fadd fast float %2590, %2582
  %2592 = fmul fast float %2571, %2566
  %2593 = call float @dx.op.tertiary.f32(i32 46, float %2567, float %2575, float %2592)  ; FMad(a,b,c)
  %2594 = call float @dx.op.tertiary.f32(i32 46, float %2549, float %2579, float %2593)  ; FMad(a,b,c)
  %2595 = fadd fast float %2594, %2583
  %2596 = fdiv fast float %2587, %2595
  %2597 = fdiv fast float %2591, %2595
  %2598 = fmul fast float %2596, %184
  %2599 = fmul fast float %2597, %185
  %2600 = fadd fast float %2598, %186
  %2601 = fadd fast float %2599, %187
  %2602 = call float @dx.op.unary.f32(i32 6, float %2596)  ; FAbs(value)
  %2603 = call float @dx.op.unary.f32(i32 6, float %2597)  ; FAbs(value)
  %2604 = fmul fast float %2602, 5.000000e+00
  %2605 = fmul fast float %2603, 5.000000e+00
  %2606 = fadd fast float %2604, -4.000000e+00
  %2607 = fadd fast float %2605, -4.000000e+00
  %2608 = call float @dx.op.unary.f32(i32 7, float %2606)  ; Saturate(value)
  %2609 = call float @dx.op.unary.f32(i32 7, float %2607)  ; Saturate(value)
  %2610 = call float @dx.op.dot2.f32(i32 54, float %2608, float %2609, float %2608, float %2609)  ; Dot2(ax,ay,bx,by)
  %2611 = fsub fast float 1.000000e+00, %2610
  %2612 = call float @dx.op.unary.f32(i32 7, float %2611)  ; Saturate(value)
  %2613 = call float @dx.op.unary.f32(i32 6, float %2566)  ; FAbs(value)
  %2614 = call float @dx.op.unary.f32(i32 6, float %2567)  ; FAbs(value)
  %2615 = fmul fast float %2613, 5.000000e+00
  %2616 = fmul fast float %2614, 5.000000e+00
  %2617 = fadd fast float %2615, -4.000000e+00
  %2618 = fadd fast float %2616, -4.000000e+00
  %2619 = call float @dx.op.unary.f32(i32 7, float %2617)  ; Saturate(value)
  %2620 = call float @dx.op.unary.f32(i32 7, float %2618)  ; Saturate(value)
  %2621 = call float @dx.op.dot2.f32(i32 54, float %2619, float %2620, float %2619, float %2620)  ; Dot2(ax,ay,bx,by)
  %2622 = fsub fast float 1.000000e+00, %2621
  %2623 = call float @dx.op.unary.f32(i32 7, float %2622)  ; Saturate(value)
  %2624 = call float @dx.op.binary.f32(i32 36, float %2623, float %2612)  ; FMin(a,b)
  %2625 = call float @dx.op.binary.f32(i32 35, float %2600, float %189)  ; FMax(a,b)
  %2626 = call float @dx.op.binary.f32(i32 35, float %2601, float %190)  ; FMax(a,b)
  %2627 = call float @dx.op.binary.f32(i32 36, float %2625, float %191)  ; FMin(a,b)
  %2628 = call float @dx.op.binary.f32(i32 36, float %2626, float %192)  ; FMin(a,b)
  %2629 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2630 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2631 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2629, %dx.types.Handle %2630, float %2627, float %2628, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2632 = extractvalue %dx.types.ResRet.f32 %2631, 0
  %2633 = extractvalue %dx.types.ResRet.f32 %2631, 1
  %2634 = extractvalue %dx.types.ResRet.f32 %2631, 2
  %2635 = fsub fast float -0.000000e+00, %2632
  %2636 = fsub fast float -0.000000e+00, %2633
  %2637 = fsub fast float -0.000000e+00, %2634
  %2638 = call float @dx.op.binary.f32(i32 36, float %2635, float 0.000000e+00)  ; FMin(a,b)
  %2639 = call float @dx.op.binary.f32(i32 36, float %2636, float 0.000000e+00)  ; FMin(a,b)
  %2640 = call float @dx.op.binary.f32(i32 36, float %2637, float 0.000000e+00)  ; FMin(a,b)
  %2641 = fmul fast float %504, 0x401A666660000000
  %2642 = fsub fast float 2.000000e+00, %2641
  %2643 = call float @dx.op.unary.f32(i32 7, float %2642)  ; Saturate(value)
  %2644 = fmul fast float %2643, %2624
  %2645 = fmul fast float %2638, %194
  %2646 = fmul fast float %2645, %2644
  %2647 = fmul fast float %2639, %194
  %2648 = fmul fast float %2647, %2644
  %2649 = fmul fast float %2640, %194
  %2650 = fmul fast float %2649, %2644
  %2651 = fsub fast float 1.000000e+00, %2644
  %2652 = fmul fast float %2651, %2283
  %2653 = fmul fast float %2651, %2284
  %2654 = fmul fast float %2651, %2285
  %2655 = fsub fast float %2652, %2646
  %2656 = fsub fast float %2653, %2648
  %2657 = fsub fast float %2654, %2650
  br label %2658

; <label>:2658                                    ; preds = %2551, %2546, %2282
  %2659 = phi float [ %2655, %2551 ], [ %2283, %2546 ], [ %2283, %2282 ]
  %2660 = phi float [ %2656, %2551 ], [ %2284, %2546 ], [ %2284, %2282 ]
  %2661 = phi float [ %2657, %2551 ], [ %2285, %2546 ], [ %2285, %2282 ]
  %2662 = call float @dx.op.dot3.f32(i32 55, float %93, float %94, float %95, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %2663 = call float @dx.op.unary.f32(i32 6, float %2662)  ; FAbs(value)
  %2664 = fcmp fast ogt float %2663, 0x3F1A36E2E0000000
  br i1 %2664, label %2665, label %2829, !dx.controlflow.hints !101

; <label>:2665                                    ; preds = %2658
  %2666 = call float @dx.op.dot4.f32(i32 56, float %93, float %94, float %95, float %96, float %401, float %402, float %403, float -1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2667 = call float @dx.op.unary.f32(i32 6, float %2666)  ; FAbs(value)
  %2668 = fmul fast float %2667, %124
  %2669 = fadd fast float %2668, %125
  %2670 = call float @dx.op.unary.f32(i32 7, float %2669)  ; Saturate(value)
  %2671 = fsub fast float 1.000000e+00, %2670
  %2672 = fsub fast float %401, %98
  %2673 = fsub fast float %402, %99
  %2674 = fsub fast float %403, %100
  %2675 = call float @dx.op.dot3.f32(i32 55, float %2672, float %2673, float %2674, float %102, float %103, float %104)  ; Dot3(ax,ay,az,bx,by,bz)
  %2676 = call float @dx.op.unary.f32(i32 6, float %2675)  ; FAbs(value)
  %2677 = fsub fast float %105, %2676
  %2678 = fmul fast float %2677, %124
  %2679 = call float @dx.op.unary.f32(i32 7, float %2678)  ; Saturate(value)
  %2680 = call float @dx.op.dot3.f32(i32 55, float %2672, float %2673, float %2674, float %107, float %108, float %109)  ; Dot3(ax,ay,az,bx,by,bz)
  %2681 = call float @dx.op.unary.f32(i32 6, float %2680)  ; FAbs(value)
  %2682 = fsub fast float %110, %2681
  %2683 = fmul fast float %2682, %124
  %2684 = call float @dx.op.unary.f32(i32 7, float %2683)  ; Saturate(value)
  %2685 = call float @dx.op.dot3.f32(i32 55, float %93, float %94, float %95, float %451, float %452, float %453)  ; Dot3(ax,ay,az,bx,by,bz)
  %2686 = fmul fast float %2685, %128
  %2687 = fadd fast float %2686, %129
  %2688 = call float @dx.op.unary.f32(i32 7, float %2687)  ; Saturate(value)
  %2689 = fadd fast float %504, 0xBFC99999A0000000
  %2690 = fmul fast float %2689, 1.000000e+01
  %2691 = call float @dx.op.unary.f32(i32 7, float %2690)  ; Saturate(value)
  %2692 = fsub fast float 1.000000e+00, %2691
  %2693 = fmul fast float %2679, %2671
  %2694 = fmul fast float %2693, %2684
  %2695 = fmul fast float %2694, %2688
  %2696 = fmul fast float %2695, %2692
  %2697 = fcmp fast ogt float %2696, 0.000000e+00
  br i1 %2697, label %2698, label %2817, !dx.controlflow.hints !102

; <label>:2698                                    ; preds = %2665
  %2699 = fsub fast float %401, %318
  %2700 = fsub fast float %402, %319
  %2701 = fsub fast float %403, %320
  %2702 = call float @dx.op.dot3.f32(i32 55, float %2699, float %2700, float %2701, float %2699, float %2700, float %2701)  ; Dot3(ax,ay,az,bx,by,bz)
  %2703 = call float @dx.op.unary.f32(i32 25, float %2702)  ; Rsqrt(value)
  %2704 = fmul fast float %2703, %2699
  %2705 = fmul fast float %2703, %2700
  %2706 = fmul fast float %2703, %2701
  %2707 = fsub fast float -0.000000e+00, %93
  %2708 = fsub fast float -0.000000e+00, %94
  %2709 = fsub fast float -0.000000e+00, %95
  %2710 = call float @dx.op.dot3.f32(i32 55, float %2704, float %2705, float %2706, float %2707, float %2708, float %2709)  ; Dot3(ax,ay,az,bx,by,bz)
  %2711 = fmul fast float %2710, 2.000000e+00
  %2712 = fmul fast float %2711, %2707
  %2713 = fmul fast float %2711, %2708
  %2714 = fmul fast float %2711, %2709
  %2715 = fsub fast float %2704, %2712
  %2716 = fsub fast float %2705, %2713
  %2717 = fsub fast float %2706, %2714
  %2718 = fmul fast float %451, %112
  %2719 = call float @dx.op.tertiary.f32(i32 46, float %452, float %116, float %2718)  ; FMad(a,b,c)
  %2720 = call float @dx.op.tertiary.f32(i32 46, float %453, float %120, float %2719)  ; FMad(a,b,c)
  %2721 = fmul fast float %451, %113
  %2722 = call float @dx.op.tertiary.f32(i32 46, float %452, float %117, float %2721)  ; FMad(a,b,c)
  %2723 = call float @dx.op.tertiary.f32(i32 46, float %453, float %121, float %2722)  ; FMad(a,b,c)
  %2724 = fmul fast float %451, %114
  %2725 = call float @dx.op.tertiary.f32(i32 46, float %452, float %118, float %2724)  ; FMad(a,b,c)
  %2726 = call float @dx.op.tertiary.f32(i32 46, float %453, float %122, float %2725)  ; FMad(a,b,c)
  %2727 = call float @dx.op.dot3.f32(i32 55, float %2715, float %2716, float %2717, float %2720, float %2723, float %2726)  ; Dot3(ax,ay,az,bx,by,bz)
  %2728 = fmul fast float %2727, 2.000000e+00
  %2729 = fmul fast float %2728, %2720
  %2730 = fmul fast float %2728, %2723
  %2731 = fmul fast float %2728, %2726
  %2732 = fsub fast float %2715, %2729
  %2733 = fsub fast float %2716, %2730
  %2734 = fsub fast float %2717, %2731
  %2735 = fmul fast float %2732, %126
  %2736 = fmul fast float %2733, %126
  %2737 = fmul fast float %2734, %126
  %2738 = fadd fast float %2735, %401
  %2739 = fadd fast float %2736, %402
  %2740 = fadd fast float %2737, %403
  %2741 = fmul fast float %2738, %262
  %2742 = call float @dx.op.tertiary.f32(i32 46, float %2739, float %266, float %2741)  ; FMad(a,b,c)
  %2743 = call float @dx.op.tertiary.f32(i32 46, float %2740, float %270, float %2742)  ; FMad(a,b,c)
  %2744 = fadd fast float %2743, %274
  %2745 = fmul fast float %2738, %263
  %2746 = call float @dx.op.tertiary.f32(i32 46, float %2739, float %267, float %2745)  ; FMad(a,b,c)
  %2747 = call float @dx.op.tertiary.f32(i32 46, float %2740, float %271, float %2746)  ; FMad(a,b,c)
  %2748 = fadd fast float %2747, %275
  %2749 = fmul fast float %2738, %264
  %2750 = call float @dx.op.tertiary.f32(i32 46, float %2739, float %268, float %2749)  ; FMad(a,b,c)
  %2751 = call float @dx.op.tertiary.f32(i32 46, float %2740, float %272, float %2750)  ; FMad(a,b,c)
  %2752 = fadd fast float %2751, %276
  %2753 = shl i32 %360, 2
  %2754 = add i32 %2753, 104
  %2755 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %2754)  ; CBufferLoadLegacy(handle,regIndex)
  %2756 = extractvalue %dx.types.CBufRet.f32 %2755, 0
  %2757 = extractvalue %dx.types.CBufRet.f32 %2755, 1
  %2758 = extractvalue %dx.types.CBufRet.f32 %2755, 3
  %2759 = add i32 %2753, 105
  %2760 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %2759)  ; CBufferLoadLegacy(handle,regIndex)
  %2761 = extractvalue %dx.types.CBufRet.f32 %2760, 0
  %2762 = extractvalue %dx.types.CBufRet.f32 %2760, 1
  %2763 = extractvalue %dx.types.CBufRet.f32 %2760, 3
  %2764 = add i32 %2753, 106
  %2765 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %2764)  ; CBufferLoadLegacy(handle,regIndex)
  %2766 = extractvalue %dx.types.CBufRet.f32 %2765, 0
  %2767 = extractvalue %dx.types.CBufRet.f32 %2765, 1
  %2768 = extractvalue %dx.types.CBufRet.f32 %2765, 3
  %2769 = add i32 %2753, 107
  %2770 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %2769)  ; CBufferLoadLegacy(handle,regIndex)
  %2771 = extractvalue %dx.types.CBufRet.f32 %2770, 0
  %2772 = extractvalue %dx.types.CBufRet.f32 %2770, 1
  %2773 = extractvalue %dx.types.CBufRet.f32 %2770, 3
  %2774 = fmul fast float %2756, %2744
  %2775 = call float @dx.op.tertiary.f32(i32 46, float %2748, float %2761, float %2774)  ; FMad(a,b,c)
  %2776 = call float @dx.op.tertiary.f32(i32 46, float %2752, float %2766, float %2775)  ; FMad(a,b,c)
  %2777 = fadd fast float %2776, %2771
  %2778 = fmul fast float %2757, %2744
  %2779 = call float @dx.op.tertiary.f32(i32 46, float %2748, float %2762, float %2778)  ; FMad(a,b,c)
  %2780 = call float @dx.op.tertiary.f32(i32 46, float %2752, float %2767, float %2779)  ; FMad(a,b,c)
  %2781 = fadd fast float %2780, %2772
  %2782 = fmul fast float %2758, %2744
  %2783 = call float @dx.op.tertiary.f32(i32 46, float %2748, float %2763, float %2782)  ; FMad(a,b,c)
  %2784 = call float @dx.op.tertiary.f32(i32 46, float %2752, float %2768, float %2783)  ; FMad(a,b,c)
  %2785 = fadd fast float %2784, %2773
  %2786 = icmp ne i32 %134, 0
  %2787 = fsub fast float -0.000000e+00, %131
  %2788 = fsub fast float -0.000000e+00, %132
  %2789 = fdiv fast float %2777, %2785
  %2790 = fdiv fast float %2781, %2785
  %2791 = call float @dx.op.binary.f32(i32 35, float %2789, float %2787)  ; FMax(a,b)
  %2792 = call float @dx.op.binary.f32(i32 35, float %2790, float %2788)  ; FMax(a,b)
  %2793 = call float @dx.op.binary.f32(i32 36, float %2791, float %131)  ; FMin(a,b)
  %2794 = call float @dx.op.binary.f32(i32 36, float %2792, float %132)  ; FMin(a,b)
  %2795 = add i32 %360, 112
  %2796 = select i1 %2786, i32 %2795, i32 112
  %2797 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 %2796)  ; CBufferLoadLegacy(handle,regIndex)
  %2798 = extractvalue %dx.types.CBufRet.f32 %2797, 0
  %2799 = extractvalue %dx.types.CBufRet.f32 %2797, 1
  %2800 = fmul fast float %2798, %2793
  %2801 = fmul fast float %2799, %2794
  %2802 = extractvalue %dx.types.CBufRet.f32 %2797, 2
  %2803 = extractvalue %dx.types.CBufRet.f32 %2797, 3
  %2804 = fadd fast float %2800, %2802
  %2805 = fadd fast float %2801, %2803
  %2806 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2807 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2808 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2806, %dx.types.Handle %2807, float %2804, float %2805, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2809 = extractvalue %dx.types.ResRet.f32 %2808, 0
  %2810 = extractvalue %dx.types.ResRet.f32 %2808, 1
  %2811 = extractvalue %dx.types.ResRet.f32 %2808, 2
  %2812 = extractvalue %dx.types.ResRet.f32 %2808, 3
  %2813 = fmul fast float %2812, %2696
  %2814 = fmul fast float %2809, %2692
  %2815 = fmul fast float %2810, %2692
  %2816 = fmul fast float %2811, %2692
  br label %2817

; <label>:2817                                    ; preds = %2698, %2665
  %2818 = phi float [ %2814, %2698 ], [ 0.000000e+00, %2665 ]
  %2819 = phi float [ %2815, %2698 ], [ 0.000000e+00, %2665 ]
  %2820 = phi float [ %2816, %2698 ], [ 0.000000e+00, %2665 ]
  %2821 = phi float [ %2813, %2698 ], [ 0.000000e+00, %2665 ]
  %2822 = fsub fast float 1.000000e+00, %2821
  %2823 = fmul fast float %2822, %2659
  %2824 = fmul fast float %2822, %2660
  %2825 = fmul fast float %2822, %2661
  %2826 = fadd fast float %2823, %2818
  %2827 = fadd fast float %2824, %2819
  %2828 = fadd fast float %2825, %2820
  br label %2829

; <label>:2829                                    ; preds = %2817, %2658
  %2830 = phi float [ %2826, %2817 ], [ %2659, %2658 ]
  %2831 = phi float [ %2827, %2817 ], [ %2660, %2658 ]
  %2832 = phi float [ %2828, %2817 ], [ %2661, %2658 ]
  %2833 = fmul fast float %504, 0x3F9C28F5C0000000
  %2834 = fmul fast float %504, 0x3FE24DD300000000
  %2835 = fmul fast float %504, 0x3F96872B00000000
  %2836 = fsub fast float 1.000000e+00, %504
  %2837 = fsub fast float 0x3FA5C28F60000000, %2833
  %2838 = fsub fast float 0x3FF0A3D700000000, %2834
  %2839 = fadd fast float %2835, 0xBFA47AE140000000
  %2840 = fmul fast float %773, 0xC0228F5C20000000
  %2841 = call float @dx.op.unary.f32(i32 21, float %2840)  ; Exp(value)
  %2842 = fmul fast float %2836, %2836
  %2843 = call float @dx.op.binary.f32(i32 36, float %2842, float %2841)  ; FMin(a,b)
  %2844 = fmul fast float %2843, %2836
  %2845 = fadd fast float %2844, %2837
  %2846 = fmul fast float %2845, 0x3FF0A3D700000000
  %2847 = fsub fast float %2838, %2846
  %2848 = fadd fast float %2839, %2846
  %2849 = fmul fast float %557, 5.000000e+01
  %2850 = call float @dx.op.unary.f32(i32 7, float %2849)  ; Saturate(value)
  %2851 = fmul fast float %2847, %556
  %2852 = fmul fast float %2847, %557
  %2853 = fmul fast float %2847, %558
  %2854 = fmul fast float %2848, %2850
  %2855 = fadd fast float %2851, %2854
  %2856 = fadd fast float %2852, %2854
  %2857 = fadd fast float %2853, %2854
  %2858 = fmul fast float %556, 0x400052BD40000000
  %2859 = fmul fast float %557, 0x400052BD40000000
  %2860 = fmul fast float %558, 0x400052BD40000000
  %2861 = fadd fast float %2858, 0xBFD5460AA0000000
  %2862 = fadd fast float %2859, 0xBFD5460AA0000000
  %2863 = fadd fast float %2860, 0xBFD5460AA0000000
  %2864 = fmul fast float %556, 0x40132E2EC0000000
  %2865 = fmul fast float %557, 0x40132E2EC0000000
  %2866 = fmul fast float %558, 0x40132E2EC0000000
  %2867 = fsub fast float 0x3FE488CE80000000, %2864
  %2868 = fsub fast float 0x3FE488CE80000000, %2865
  %2869 = fsub fast float 0x3FE488CE80000000, %2866
  %2870 = fmul fast float %556, 0x40060AA640000000
  %2871 = fmul fast float %557, 0x40060AA640000000
  %2872 = fmul fast float %558, 0x40060AA640000000
  %2873 = fadd fast float %2870, 0x3FE616F000000000
  %2874 = fadd fast float %2871, 0x3FE616F000000000
  %2875 = fadd fast float %2872, 0x3FE616F000000000
  %2876 = fmul fast float %2861, %506
  %2877 = fmul fast float %2862, %506
  %2878 = fmul fast float %2863, %506
  %2879 = fadd fast float %2867, %2876
  %2880 = fadd fast float %2868, %2877
  %2881 = fadd fast float %2869, %2878
  %2882 = fmul fast float %2879, %506
  %2883 = fmul fast float %2880, %506
  %2884 = fmul fast float %2881, %506
  %2885 = fadd fast float %2873, %2882
  %2886 = fadd fast float %2874, %2883
  %2887 = fadd fast float %2875, %2884
  %2888 = fmul fast float %2885, %506
  %2889 = fmul fast float %2886, %506
  %2890 = fmul fast float %2887, %506
  %2891 = call float @dx.op.binary.f32(i32 35, float %506, float %2888)  ; FMax(a,b)
  %2892 = call float @dx.op.binary.f32(i32 35, float %506, float %2889)  ; FMax(a,b)
  %2893 = call float @dx.op.binary.f32(i32 35, float %506, float %2890)  ; FMax(a,b)
  %2894 = fmul fast float %2891, %2830
  %2895 = fmul fast float %2894, %2855
  %2896 = fmul fast float %2892, %2831
  %2897 = fmul fast float %2896, %2856
  %2898 = fmul fast float %2893, %2832
  %2899 = fmul fast float %2898, %2857
  %2900 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 62)  ; CBufferLoadLegacy(handle,regIndex)
  %2901 = extractvalue %dx.types.CBufRet.f32 %2900, 0
  %2902 = extractvalue %dx.types.CBufRet.f32 %2900, 1
  %2903 = extractvalue %dx.types.CBufRet.f32 %2900, 2
  %2904 = call float @dx.op.dot3.f32(i32 55, float %401, float %402, float %403, float %401, float %402, float %403)  ; Dot3(ax,ay,az,bx,by,bz)
  %2905 = call float @dx.op.unary.f32(i32 25, float %2904)  ; Rsqrt(value)
  %2906 = fmul fast float %2905, %401
  %2907 = fmul fast float %2905, %402
  %2908 = fmul fast float %2905, %403
  %2909 = call float @dx.op.dot3.f32(i32 55, float %2906, float %2907, float %2908, float %2901, float %2902, float %2903)  ; Dot3(ax,ay,az,bx,by,bz)
  %2910 = fcmp fast ogt float %2909, 0x3F50624DE0000000
  %2911 = fdiv fast float 1.000000e+00, %2909
  %2912 = select i1 %2910, float %2911, float 0.000000e+00
  %2913 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %2914 = extractvalue %dx.types.CBufRet.f32 %2913, 0
  %2915 = fmul fast float %2914, %2912
  %2916 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %2917 = extractvalue %dx.types.CBufRet.f32 %2916, 2
  %2918 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %2919 = extractvalue %dx.types.CBufRet.f32 %2918, 2
  %2920 = fmul fast float %2917, 2.097152e+06
  %2921 = fadd fast float %2920, %2919
  %2922 = call float @dx.op.binary.f32(i32 36, float %2921, float %138)  ; FMin(a,b)
  %2923 = fsub fast float %403, %2922
  %2924 = fadd fast float %2923, %2919
  %2925 = fadd fast float %2924, %2920
  %2926 = call float @dx.op.dot3.f32(i32 55, float %401, float %402, float %2925, float %401, float %402, float %2925)  ; Dot3(ax,ay,az,bx,by,bz)
  %2927 = call float @dx.op.binary.f32(i32 35, float %2926, float 0x3E45798EE0000000)  ; FMax(a,b)
  %2928 = call float @dx.op.unary.f32(i32 25, float %2927)  ; Rsqrt(value)
  %2929 = fmul fast float %2928, %2926
  %2930 = fmul fast float %2928, %401
  %2931 = fmul fast float %2928, %402
  %2932 = fmul fast float %2925, %2928
  %2933 = call float @dx.op.binary.f32(i32 35, float %2915, float %139)  ; FMax(a,b)
  %2934 = fcmp fast ogt float %2933, 0.000000e+00
  br i1 %2934, label %2935, label %2954

; <label>:2935                                    ; preds = %2829
  %2936 = fmul fast float %2933, %2928
  %2937 = fmul fast float %2936, %2925
  %2938 = fadd fast float %2937, %2922
  %2939 = fsub fast float %2925, %2937
  %2940 = fsub fast float 1.000000e+00, %2936
  %2941 = fmul fast float %2940, %2929
  %2942 = fsub fast float %2938, %152
  %2943 = fmul fast float %2942, %137
  %2944 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2943)  ; FMax(a,b)
  %2945 = fsub fast float -0.000000e+00, %2944
  %2946 = call float @dx.op.unary.f32(i32 21, float %2945)  ; Exp(value)
  %2947 = fmul fast float %2946, %151
  %2948 = fsub fast float %2938, %144
  %2949 = fmul fast float %2948, %142
  %2950 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2949)  ; FMax(a,b)
  %2951 = fsub fast float -0.000000e+00, %2950
  %2952 = call float @dx.op.unary.f32(i32 21, float %2951)  ; Exp(value)
  %2953 = fmul fast float %2952, %143
  br label %2954

; <label>:2954                                    ; preds = %2935, %2829
  %2955 = phi float [ %2947, %2935 ], [ %136, %2829 ]
  %2956 = phi float [ %2953, %2935 ], [ %141, %2829 ]
  %2957 = phi float [ %2941, %2935 ], [ %2929, %2829 ]
  %2958 = phi float [ %2939, %2935 ], [ %2925, %2829 ]
  %2959 = fmul fast float %2958, %137
  %2960 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2959)  ; FMax(a,b)
  %2961 = fsub fast float -0.000000e+00, %2960
  %2962 = call float @dx.op.unary.f32(i32 21, float %2961)  ; Exp(value)
  %2963 = fsub fast float 1.000000e+00, %2962
  %2964 = fdiv fast float %2963, %2960
  %2965 = fmul fast float %2960, 0x3FCEBFBE00000000
  %2966 = fsub fast float 0x3FE62E4300000000, %2965
  %2967 = call float @dx.op.unary.f32(i32 6, float %2960)  ; FAbs(value)
  %2968 = fcmp fast ogt float %2967, 0x3F847AE140000000
  %2969 = select i1 %2968, float %2964, float %2966
  %2970 = fmul fast float %2969, %2955
  %2971 = fmul fast float %2958, %142
  %2972 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2971)  ; FMax(a,b)
  %2973 = fsub fast float -0.000000e+00, %2972
  %2974 = call float @dx.op.unary.f32(i32 21, float %2973)  ; Exp(value)
  %2975 = fsub fast float 1.000000e+00, %2974
  %2976 = fdiv fast float %2975, %2972
  %2977 = fmul fast float %2972, 0x3FCEBFBE00000000
  %2978 = fsub fast float 0x3FE62E4300000000, %2977
  %2979 = call float @dx.op.unary.f32(i32 6, float %2972)  ; FAbs(value)
  %2980 = fcmp fast ogt float %2979, 0x3F847AE140000000
  %2981 = select i1 %2980, float %2976, float %2978
  %2982 = fmul fast float %2981, %2956
  %2983 = fadd fast float %2982, %2970
  %2984 = fcmp fast ogt float %153, 0.000000e+00
  br i1 %2984, label %2985, label %3014, !dx.controlflow.hints !103

; <label>:2985                                    ; preds = %2954
  %2986 = fmul fast float %2929, %170
  %2987 = fadd fast float %2986, %171
  %2988 = call float @dx.op.unary.f32(i32 7, float %2987)  ; Saturate(value)
  %2989 = fsub fast float -0.000000e+00, %167
  %2990 = call float @dx.op.dot2.f32(i32 54, float %401, float %402, float %168, float %2989)  ; Dot2(ax,ay,bx,by)
  %2991 = call float @dx.op.dot2.f32(i32 54, float %401, float %402, float %167, float %168)  ; Dot2(ax,ay,bx,by)
  %2992 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2993 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2994 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2992, %dx.types.Handle %2993, float %2990, float %2991, float %2925, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2995 = extractvalue %dx.types.ResRet.f32 %2994, 0
  %2996 = extractvalue %dx.types.ResRet.f32 %2994, 1
  %2997 = extractvalue %dx.types.ResRet.f32 %2994, 2
  %2998 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2992, %dx.types.Handle %2993, float %2990, float %2991, float %2925, float undef, i32 undef, i32 undef, i32 undef, float %172)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2999 = extractvalue %dx.types.ResRet.f32 %2998, 0
  %3000 = extractvalue %dx.types.ResRet.f32 %2998, 1
  %3001 = extractvalue %dx.types.ResRet.f32 %2998, 2
  %3002 = fsub fast float %2995, %2999
  %3003 = fsub fast float %2996, %3000
  %3004 = fsub fast float %2997, %3001
  %3005 = fmul fast float %3002, %2988
  %3006 = fmul fast float %3003, %2988
  %3007 = fmul fast float %3004, %2988
  %3008 = fadd fast float %3005, %2999
  %3009 = fadd fast float %3006, %3000
  %3010 = fadd fast float %3007, %3001
  %3011 = fmul fast float %3008, %146
  %3012 = fmul fast float %3009, %147
  %3013 = fmul fast float %3010, %148
  br label %3014

; <label>:3014                                    ; preds = %2985, %2954
  %3015 = phi float [ %3011, %2985 ], [ %146, %2954 ]
  %3016 = phi float [ %3012, %2985 ], [ %147, %2954 ]
  %3017 = phi float [ %3013, %2985 ], [ %148, %2954 ]
  %3018 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %3019 = extractvalue %dx.types.CBufRet.f32 %3018, 1
  %3020 = fmul fast float %3019, %156
  %3021 = fmul fast float %3019, %157
  %3022 = fmul fast float %3019, %158
  %3023 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3024 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %48, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3025 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3023, %dx.types.Handle %3024, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3026 = extractvalue %dx.types.ResRet.f32 %3025, 0
  %3027 = extractvalue %dx.types.ResRet.f32 %3025, 1
  %3028 = extractvalue %dx.types.ResRet.f32 %3025, 2
  %3029 = fmul fast float %3020, %3026
  %3030 = fmul fast float %3021, %3027
  %3031 = fmul fast float %3022, %3028
  %3032 = fadd fast float %3029, %3015
  %3033 = fadd fast float %3030, %3016
  %3034 = fadd fast float %3031, %3017
  %3035 = fcmp fast oge float %160, 0.000000e+00
  %3036 = fcmp fast oeq float %153, 0.000000e+00
  %3037 = and i1 %3036, %3035
  br i1 %3037, label %3038, label %3104, !dx.controlflow.hints !104

; <label>:3038                                    ; preds = %3014
  %3039 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %3040 = extractvalue %dx.types.CBufRet.f32 %3039, 0
  %3041 = extractvalue %dx.types.CBufRet.f32 %3039, 1
  %3042 = extractvalue %dx.types.CBufRet.f32 %3039, 2
  %3043 = fmul fast float %3019, 0x3FB45F3060000000
  %3044 = fmul fast float %3043, %3040
  %3045 = fmul fast float %3043, %3041
  %3046 = fmul fast float %3043, %3042
  %3047 = fadd fast float %3044, %162
  %3048 = fadd fast float %3045, %163
  %3049 = fadd fast float %3046, %164
  %3050 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %3051 = extractvalue %dx.types.CBufRet.f32 %3050, 0
  %3052 = extractvalue %dx.types.CBufRet.f32 %3050, 1
  %3053 = extractvalue %dx.types.CBufRet.f32 %3050, 2
  %3054 = call float @dx.op.dot3.f32(i32 55, float %2930, float %2931, float %2932, float %3051, float %3052, float %3053)  ; Dot3(ax,ay,az,bx,by,bz)
  %3055 = call float @dx.op.unary.f32(i32 7, float %3054)  ; Saturate(value)
  %3056 = call float @dx.op.unary.f32(i32 23, float %3055)  ; Log(value)
  %3057 = fmul fast float %3056, %165
  %3058 = call float @dx.op.unary.f32(i32 21, float %3057)  ; Exp(value)
  %3059 = fmul fast float %3058, %3047
  %3060 = fmul fast float %3058, %3048
  %3061 = fmul fast float %3058, %3049
  %3062 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %3063 = extractvalue %dx.types.CBufRet.f32 %3062, 3
  %3064 = fcmp fast ogt float %3063, 0.000000e+00
  br i1 %3064, label %3065, label %3090

; <label>:3065                                    ; preds = %3038
  %3066 = extractvalue %dx.types.CBufRet.f32 %3062, 0
  %3067 = extractvalue %dx.types.CBufRet.f32 %3062, 1
  %3068 = extractvalue %dx.types.CBufRet.f32 %3062, 2
  %3069 = fmul fast float %3043, %3066
  %3070 = fmul fast float %3043, %3067
  %3071 = fmul fast float %3043, %3068
  %3072 = fadd fast float %3069, %162
  %3073 = fadd fast float %3070, %163
  %3074 = fadd fast float %3071, %164
  %3075 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %3076 = extractvalue %dx.types.CBufRet.f32 %3075, 0
  %3077 = extractvalue %dx.types.CBufRet.f32 %3075, 1
  %3078 = extractvalue %dx.types.CBufRet.f32 %3075, 2
  %3079 = call float @dx.op.dot3.f32(i32 55, float %2930, float %2931, float %2932, float %3076, float %3077, float %3078)  ; Dot3(ax,ay,az,bx,by,bz)
  %3080 = call float @dx.op.unary.f32(i32 7, float %3079)  ; Saturate(value)
  %3081 = call float @dx.op.unary.f32(i32 23, float %3080)  ; Log(value)
  %3082 = fmul fast float %3081, %165
  %3083 = call float @dx.op.unary.f32(i32 21, float %3082)  ; Exp(value)
  %3084 = fmul fast float %3083, %3072
  %3085 = fmul fast float %3083, %3073
  %3086 = fmul fast float %3083, %3074
  %3087 = fadd fast float %3084, %3059
  %3088 = fadd fast float %3085, %3060
  %3089 = fadd fast float %3086, %3061
  br label %3090

; <label>:3090                                    ; preds = %3065, %3038
  %3091 = phi float [ %3087, %3065 ], [ %3059, %3038 ]
  %3092 = phi float [ %3088, %3065 ], [ %3060, %3038 ]
  %3093 = phi float [ %3089, %3065 ], [ %3061, %3038 ]
  %3094 = fsub fast float %2957, %160
  %3095 = call float @dx.op.binary.f32(i32 35, float %3094, float 0.000000e+00)  ; FMax(a,b)
  %3096 = fmul fast float %2983, %3095
  %3097 = fsub fast float -0.000000e+00, %3096
  %3098 = call float @dx.op.unary.f32(i32 21, float %3097)  ; Exp(value)
  %3099 = call float @dx.op.unary.f32(i32 7, float %3098)  ; Saturate(value)
  %3100 = fsub fast float 1.000000e+00, %3099
  %3101 = fmul fast float %3100, %3091
  %3102 = fmul fast float %3100, %3092
  %3103 = fmul fast float %3100, %3093
  br label %3104

; <label>:3104                                    ; preds = %3090, %3014
  %3105 = phi float [ %3101, %3090 ], [ 0.000000e+00, %3014 ]
  %3106 = phi float [ %3102, %3090 ], [ 0.000000e+00, %3014 ]
  %3107 = phi float [ %3103, %3090 ], [ 0.000000e+00, %3014 ]
  %3108 = fmul fast float %2957, %2983
  %3109 = fsub fast float -0.000000e+00, %3108
  %3110 = call float @dx.op.unary.f32(i32 21, float %3109)  ; Exp(value)
  %3111 = call float @dx.op.unary.f32(i32 7, float %3110)  ; Saturate(value)
  %3112 = call float @dx.op.binary.f32(i32 35, float %3111, float %149)  ; FMax(a,b)
  %3113 = fcmp fast ogt float %154, 0.000000e+00
  %3114 = fcmp fast ogt float %2929, %154
  %3115 = and i1 %3113, %3114
  %3116 = select i1 %3115, float 0.000000e+00, float %3105
  %3117 = select i1 %3115, float 0.000000e+00, float %3106
  %3118 = select i1 %3115, float 0.000000e+00, float %3107
  %3119 = select i1 %3115, float 1.000000e+00, float %3112
  %3120 = fsub fast float 1.000000e+00, %3119
  %3121 = fmul fast float %3120, %3032
  %3122 = fmul fast float %3120, %3033
  %3123 = fmul fast float %3120, %3034
  %3124 = fadd fast float %3121, %3116
  %3125 = fadd fast float %3122, %3117
  %3126 = fadd fast float %3123, %3118
  %3127 = fcmp fast ogt float %173, 0.000000e+00
  br i1 %3127, label %3128, label %3205

; <label>:3128                                    ; preds = %3104
  %3129 = fsub fast float %300, %304
  %3130 = fsub fast float %301, %305
  %3131 = fsub fast float %302, %306
  %3132 = fmul fast float %3129, 2.097152e+06
  %3133 = fmul fast float %3130, 2.097152e+06
  %3134 = fmul fast float %3131, 2.097152e+06
  %3135 = fadd fast float %404, %3132
  %3136 = fadd fast float %405, %3133
  %3137 = fadd fast float %406, %3134
  %3138 = fmul fast float %3135, %248
  %3139 = call float @dx.op.tertiary.f32(i32 46, float %3136, float %252, float %3138)  ; FMad(a,b,c)
  %3140 = call float @dx.op.tertiary.f32(i32 46, float %3137, float %256, float %3139)  ; FMad(a,b,c)
  %3141 = fadd fast float %3140, %260
  %3142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %3143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %3144 = extractvalue %dx.types.CBufRet.f32 %3143, 0
  %3145 = fmul fast float %3144, %3141
  %3146 = extractvalue %dx.types.CBufRet.f32 %3143, 1
  %3147 = fadd fast float %3145, %3146
  %3148 = call float @dx.op.unary.f32(i32 23, float %3147)  ; Log(value)
  %3149 = extractvalue %dx.types.CBufRet.f32 %3143, 2
  %3150 = fmul fast float %3149, %3148
  %3151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 225)  ; CBufferLoadLegacy(handle,regIndex)
  %3152 = extractvalue %dx.types.CBufRet.f32 %3151, 2
  %3153 = fmul fast float %3150, %3152
  %3154 = call float @dx.op.binary.f32(i32 36, float %3153, float 1.000000e+00)  ; FMin(a,b)
  %3155 = fmul fast float %3135, %247
  %3156 = call float @dx.op.tertiary.f32(i32 46, float %3136, float %251, float %3155)  ; FMad(a,b,c)
  %3157 = call float @dx.op.tertiary.f32(i32 46, float %3137, float %255, float %3156)  ; FMad(a,b,c)
  %3158 = fadd fast float %3157, %259
  %3159 = fdiv fast float %3158, %3141
  %3160 = fmul fast float %3159, 5.000000e-01
  %3161 = fsub fast float 5.000000e-01, %3160
  %3162 = extractvalue %dx.types.CBufRet.f32 %3142, 1
  %3163 = fmul fast float %3161, %3162
  %3164 = extractvalue %dx.types.CBufRet.f32 %3142, 3
  %3165 = call float @dx.op.binary.f32(i32 36, float %3163, float %3164)  ; FMin(a,b)
  %3166 = fmul fast float %3135, %246
  %3167 = call float @dx.op.tertiary.f32(i32 46, float %3136, float %250, float %3166)  ; FMad(a,b,c)
  %3168 = call float @dx.op.tertiary.f32(i32 46, float %3137, float %254, float %3167)  ; FMad(a,b,c)
  %3169 = fadd fast float %3168, %258
  %3170 = fdiv fast float %3169, %3141
  %3171 = fmul fast float %3170, 5.000000e-01
  %3172 = fadd fast float %3171, 5.000000e-01
  %3173 = extractvalue %dx.types.CBufRet.f32 %3142, 0
  %3174 = fmul fast float %3172, %3173
  %3175 = extractvalue %dx.types.CBufRet.f32 %3142, 2
  %3176 = call float @dx.op.binary.f32(i32 36, float %3174, float %3175)  ; FMin(a,b)
  %3177 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %49, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3179 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3177, %dx.types.Handle %3178, float %3176, float %3165, float %3154, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3180 = extractvalue %dx.types.ResRet.f32 %3179, 0
  %3181 = extractvalue %dx.types.ResRet.f32 %3179, 1
  %3182 = extractvalue %dx.types.ResRet.f32 %3179, 2
  %3183 = extractvalue %dx.types.ResRet.f32 %3179, 3
  %3184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %3185 = extractvalue %dx.types.CBufRet.f32 %3184, 3
  %3186 = fmul fast float %3185, %3180
  %3187 = fmul fast float %3185, %3181
  %3188 = fmul fast float %3185, %3182
  %3189 = fadd float %3183, -1.000000e+00
  %3190 = fsub fast float %63, %175
  %3191 = fmul fast float %3190, 1.000000e+08
  %3192 = call float @dx.op.unary.f32(i32 7, float %3191)  ; Saturate(value)
  %3193 = fmul fast float %3192, %3186
  %3194 = fmul fast float %3192, %3187
  %3195 = fmul fast float %3192, %3188
  %3196 = fmul fast float %3192, %3189
  %3197 = fadd fast float %3196, 1.000000e+00
  %3198 = fmul fast float %3197, %3124
  %3199 = fmul fast float %3197, %3125
  %3200 = fmul fast float %3197, %3126
  %3201 = fadd fast float %3198, %3193
  %3202 = fadd fast float %3199, %3194
  %3203 = fadd fast float %3200, %3195
  %3204 = fmul fast float %3197, %3119
  br label %3205

; <label>:3205                                    ; preds = %3128, %3104
  %3206 = phi float [ %3201, %3128 ], [ %3124, %3104 ]
  %3207 = phi float [ %3202, %3128 ], [ %3125, %3104 ]
  %3208 = phi float [ %3203, %3128 ], [ %3126, %3104 ]
  %3209 = phi float [ %3204, %3128 ], [ %3119, %3104 ]
  %3210 = fmul fast float %401, %230
  %3211 = call float @dx.op.tertiary.f32(i32 46, float %402, float %234, float %3210)  ; FMad(a,b,c)
  %3212 = call float @dx.op.tertiary.f32(i32 46, float %403, float %238, float %3211)  ; FMad(a,b,c)
  %3213 = fadd fast float %3212, %242
  %3214 = fmul fast float %401, %231
  %3215 = call float @dx.op.tertiary.f32(i32 46, float %402, float %235, float %3214)  ; FMad(a,b,c)
  %3216 = call float @dx.op.tertiary.f32(i32 46, float %403, float %239, float %3215)  ; FMad(a,b,c)
  %3217 = fadd fast float %3216, %243
  %3218 = fmul fast float %401, %232
  %3219 = call float @dx.op.tertiary.f32(i32 46, float %402, float %236, float %3218)  ; FMad(a,b,c)
  %3220 = call float @dx.op.tertiary.f32(i32 46, float %403, float %240, float %3219)  ; FMad(a,b,c)
  %3221 = fadd fast float %3220, %244
  %3222 = fcmp fast ogt float %352, 0.000000e+00
  br i1 %3222, label %3223, label %3305

; <label>:3223                                    ; preds = %3205
  %3224 = fmul fast float %401, 0x3EE4F8B580000000
  %3225 = fmul fast float %402, 0x3EE4F8B580000000
  %3226 = fmul fast float %403, 0x3EE4F8B580000000
  %3227 = fcmp fast une float %354, 0.000000e+00
  %3228 = fdiv fast float %3213, %3221
  %3229 = fdiv fast float %3217, %3221
  %3230 = fmul fast float %3228, 5.000000e-01
  %3231 = fmul fast float %3229, 5.000000e-01
  %3232 = fadd fast float %3230, 5.000000e-01
  %3233 = fsub fast float 5.000000e-01, %3231
  %3234 = fmul fast float %3224, %3224
  %3235 = fmul fast float %3225, %3225
  %3236 = fadd fast float %3235, %3234
  %3237 = fmul fast float %3226, %3226
  %3238 = fadd fast float %3236, %3237
  %3239 = call float @dx.op.unary.f32(i32 24, float %3238)  ; Sqrt(value)
  %3240 = fsub fast float %3239, %347
  %3241 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3240)  ; FMax(a,b)
  %3242 = fmul fast float %351, %349
  %3243 = fmul fast float %3242, %3241
  %3244 = call float @dx.op.unary.f32(i32 24, float %3243)  ; Sqrt(value)
  %3245 = fmul fast float %3244, %348
  %3246 = fcmp fast olt float %3245, 0x3FE6A09E60000000
  br i1 %3246, label %3247, label %3251

; <label>:3247                                    ; preds = %3223
  %3248 = fmul fast float %3245, %3245
  %3249 = fmul fast float %3248, 2.000000e+00
  %3250 = call float @dx.op.unary.f32(i32 7, float %3249)  ; Saturate(value)
  br label %3251

; <label>:3251                                    ; preds = %3247, %3223
  %3252 = phi float [ %3250, %3247 ], [ 1.000000e+00, %3223 ]
  %3253 = fmul fast float %3241, 1.000000e+05
  %3254 = call float @dx.op.unary.f32(i32 7, float %3253)  ; Saturate(value)
  %3255 = fmul fast float %3254, %3252
  br i1 %3227, label %3256, label %3283

; <label>:3256                                    ; preds = %3251
  %3257 = call float @dx.op.dot3.f32(i32 55, float %3224, float %3225, float %3226, float %3224, float %3225, float %3226)  ; Dot3(ax,ay,az,bx,by,bz)
  %3258 = call float @dx.op.unary.f32(i32 25, float %3257)  ; Rsqrt(value)
  %3259 = fmul fast float %3258, %3224
  %3260 = fmul fast float %3258, %3225
  %3261 = fmul fast float %3258, %3226
  %3262 = fmul fast float %3261, %3261
  %3263 = fsub fast float 1.000000e+00, %3262
  %3264 = call float @dx.op.unary.f32(i32 24, float %3263)  ; Sqrt(value)
  %3265 = fdiv fast float %3259, %3264
  %3266 = fdiv fast float %3260, %3264
  %3267 = call float @dx.op.unary.f32(i32 15, float %3265)  ; Acos(value)
  %3268 = fcmp fast olt float %3266, 0.000000e+00
  %3269 = fsub fast float 0x401921FB60000000, %3267
  %3270 = select i1 %3268, float %3269, float %3267
  %3271 = fmul fast float %3270, 0x3FC45F3060000000
  %3272 = fmul fast float %344, 5.000000e-01
  %3273 = fadd fast float %3271, %3272
  %3274 = fadd fast float %3261, %345
  %3275 = fmul fast float %3274, 5.000000e-01
  %3276 = fadd fast float %3275, 5.000000e-01
  %3277 = fadd fast float %342, 1.000000e+00
  %3278 = fadd fast float %343, 1.000000e+00
  %3279 = fdiv fast float %342, %3277
  %3280 = fdiv fast float %343, %3278
  %3281 = fmul fast float %3273, %3279
  %3282 = fmul fast float %3280, %3276
  br label %3283

; <label>:3283                                    ; preds = %3256, %3251
  %3284 = phi float [ %3281, %3256 ], [ %3232, %3251 ]
  %3285 = phi float [ %3282, %3256 ], [ %3233, %3251 ]
  %3286 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3287 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %47, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3288 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3286, %dx.types.Handle %3287, float %3284, float %3285, float %3244, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3289 = extractvalue %dx.types.ResRet.f32 %3288, 0
  %3290 = extractvalue %dx.types.ResRet.f32 %3288, 1
  %3291 = extractvalue %dx.types.ResRet.f32 %3288, 2
  %3292 = extractvalue %dx.types.ResRet.f32 %3288, 3
  %3293 = fsub fast float 1.000000e+00, %3292
  %3294 = fmul fast float %3293, %3255
  %3295 = fsub fast float 1.000000e+00, %3294
  %3296 = fmul fast float %3209, %332
  %3297 = fmul fast float %3296, %3255
  %3298 = fmul fast float %3297, %3289
  %3299 = fmul fast float %3297, %3290
  %3300 = fmul fast float %3297, %3291
  %3301 = fadd fast float %3298, %3206
  %3302 = fadd fast float %3299, %3207
  %3303 = fadd fast float %3300, %3208
  %3304 = fmul fast float %3295, %3209
  br label %3305

; <label>:3305                                    ; preds = %3283, %3205
  %3306 = phi float [ %3301, %3283 ], [ %3206, %3205 ]
  %3307 = phi float [ %3302, %3283 ], [ %3207, %3205 ]
  %3308 = phi float [ %3303, %3283 ], [ %3208, %3205 ]
  %3309 = phi float [ %3304, %3283 ], [ %3209, %3205 ]
  %3310 = fcmp fast ogt float %198, 0.000000e+00
  br i1 %3310, label %3311, label %3366

; <label>:3311                                    ; preds = %3305
  %3312 = fdiv fast float %3213, %3221
  %3313 = fdiv fast float %3217, %3221
  %3314 = fmul fast float %3312, 5.000000e-01
  %3315 = fmul fast float %3313, 5.000000e-01
  %3316 = fadd fast float %3314, 5.000000e-01
  %3317 = fsub fast float 5.000000e-01, %3315
  %3318 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3319 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3320 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %3318, %dx.types.Handle %3319, float %3316, float %3317, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %3321 = extractvalue %dx.types.ResRet.f32 %3320, 0
  %3322 = extractvalue %dx.types.ResRet.f32 %3320, 1
  %3323 = extractvalue %dx.types.ResRet.f32 %3320, 2
  %3324 = extractvalue %dx.types.ResRet.f32 %3320, 3
  %3325 = call float @dx.op.binary.f32(i32 36, float %3323, float %3324)  ; FMin(a,b)
  %3326 = call float @dx.op.binary.f32(i32 36, float %3321, float %3322)  ; FMin(a,b)
  %3327 = call float @dx.op.binary.f32(i32 36, float %3326, float %3325)  ; FMin(a,b)
  %3328 = fsub fast float %404, %314
  %3329 = fsub fast float %405, %315
  %3330 = fsub fast float %406, %316
  %3331 = fmul fast float %3328, %3328
  %3332 = fmul fast float %3329, %3329
  %3333 = fadd fast float %3332, %3331
  %3334 = fmul fast float %3330, %3330
  %3335 = fadd fast float %3333, %3334
  %3336 = call float @dx.op.unary.f32(i32 24, float %3335)  ; Sqrt(value)
  %3337 = fmul fast float %3336, 0x3EE4F8B580000000
  %3338 = fsub fast float %3337, %3327
  %3339 = fcmp fast ogt float %3338, 0.000000e+00
  br i1 %3339, label %3340, label %3366

; <label>:3340                                    ; preds = %3311
  %3341 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3342 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3343 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3341, %dx.types.Handle %3342, float %3316, float %3317, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %3344 = extractvalue %dx.types.ResRet.f32 %3343, 0
  %3345 = extractvalue %dx.types.ResRet.f32 %3343, 1
  %3346 = extractvalue %dx.types.ResRet.f32 %3343, 2
  %3347 = extractvalue %dx.types.ResRet.f32 %3343, 3
  %3348 = fmul fast float %3344, %332
  %3349 = fmul fast float %3345, %332
  %3350 = fmul fast float %3346, %332
  %3351 = fdiv fast float %3338, %199
  %3352 = call float @dx.op.unary.f32(i32 7, float %3351)  ; Saturate(value)
  %3353 = fadd fast float %3347, -1.000000e+00
  %3354 = fmul fast float %3348, %3352
  %3355 = fmul fast float %3349, %3352
  %3356 = fmul fast float %3350, %3352
  %3357 = fmul fast float %3352, %3353
  %3358 = fadd fast float %3357, 1.000000e+00
  %3359 = fmul fast float %3358, %3306
  %3360 = fmul fast float %3358, %3307
  %3361 = fmul fast float %3358, %3308
  %3362 = fadd fast float %3359, %3354
  %3363 = fadd fast float %3360, %3355
  %3364 = fadd fast float %3361, %3356
  %3365 = fmul fast float %3358, %3309
  br label %3366

; <label>:3366                                    ; preds = %3340, %3311, %3305
  %3367 = phi float [ %3306, %3305 ], [ %3362, %3340 ], [ %3306, %3311 ]
  %3368 = phi float [ %3307, %3305 ], [ %3363, %3340 ], [ %3307, %3311 ]
  %3369 = phi float [ %3308, %3305 ], [ %3364, %3340 ], [ %3308, %3311 ]
  %3370 = phi float [ %3309, %3305 ], [ %3365, %3340 ], [ %3309, %3311 ]
  %3371 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %3372 = extractvalue %dx.types.CBufRet.f32 %3371, 0
  %3373 = extractvalue %dx.types.CBufRet.f32 %3371, 1
  %3374 = extractvalue %dx.types.CBufRet.f32 %3371, 2
  %3375 = fsub fast float %401, %3372
  %3376 = fsub fast float %402, %3373
  %3377 = fsub fast float %403, %3374
  %3378 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 147)  ; CBufferLoadLegacy(handle,regIndex)
  %3379 = extractvalue %dx.types.CBufRet.f32 %3378, 0
  %3380 = extractvalue %dx.types.CBufRet.f32 %3378, 1
  %3381 = extractvalue %dx.types.CBufRet.f32 %3378, 2
  %3382 = fmul fast float %3375, %3379
  %3383 = fmul fast float %3376, %3380
  %3384 = fmul fast float %3377, %3381
  %3385 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 146)  ; CBufferLoadLegacy(handle,regIndex)
  %3386 = extractvalue %dx.types.CBufRet.f32 %3385, 0
  %3387 = extractvalue %dx.types.CBufRet.f32 %3385, 1
  %3388 = extractvalue %dx.types.CBufRet.f32 %3385, 2
  %3389 = fsub fast float %401, %3386
  %3390 = fsub fast float %402, %3387
  %3391 = fsub fast float %403, %3388
  %3392 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 148)  ; CBufferLoadLegacy(handle,regIndex)
  %3393 = extractvalue %dx.types.CBufRet.f32 %3392, 0
  %3394 = extractvalue %dx.types.CBufRet.f32 %3392, 1
  %3395 = extractvalue %dx.types.CBufRet.f32 %3392, 2
  %3396 = fmul fast float %3389, %3393
  %3397 = fmul fast float %3390, %3394
  %3398 = fmul fast float %3391, %3395
  %3399 = fadd fast float %3382, -5.000000e-01
  %3400 = fadd fast float %3383, -5.000000e-01
  %3401 = fadd fast float %3384, -5.000000e-01
  %3402 = call float @dx.op.unary.f32(i32 6, float %3399)  ; FAbs(value)
  %3403 = call float @dx.op.unary.f32(i32 6, float %3400)  ; FAbs(value)
  %3404 = call float @dx.op.unary.f32(i32 6, float %3401)  ; FAbs(value)
  %3405 = fsub fast float 5.000000e-01, %3402
  %3406 = fsub fast float 5.000000e-01, %3403
  %3407 = fsub fast float 5.000000e-01, %3404
  %3408 = fmul fast float %3405, 6.000000e+00
  %3409 = fmul fast float %3406, 6.000000e+00
  %3410 = fmul fast float %3407, 6.000000e+00
  %3411 = call float @dx.op.unary.f32(i32 7, float %3408)  ; Saturate(value)
  %3412 = call float @dx.op.unary.f32(i32 7, float %3409)  ; Saturate(value)
  %3413 = call float @dx.op.unary.f32(i32 7, float %3410)  ; Saturate(value)
  %3414 = fmul fast float %3412, %3411
  %3415 = fmul fast float %3414, %3413
  %3416 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3417 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %49, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3418 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3416, %dx.types.Handle %3417, float %3382, float %3383, float %3384, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3419 = extractvalue %dx.types.ResRet.f32 %3418, 0
  %3420 = extractvalue %dx.types.ResRet.f32 %3418, 1
  %3421 = extractvalue %dx.types.ResRet.f32 %3418, 2
  %3422 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3423 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3422, %dx.types.Handle %3417, float %3396, float %3397, float %3398, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3424 = extractvalue %dx.types.ResRet.f32 %3423, 0
  %3425 = extractvalue %dx.types.ResRet.f32 %3423, 1
  %3426 = extractvalue %dx.types.ResRet.f32 %3423, 2
  %3427 = fsub fast float %3419, %3424
  %3428 = fsub fast float %3420, %3425
  %3429 = fsub fast float %3421, %3426
  %3430 = fmul fast float %3427, %3415
  %3431 = fmul fast float %3428, %3415
  %3432 = fmul fast float %3429, %3415
  %3433 = fadd fast float %3430, %3424
  %3434 = fadd fast float %3431, %3425
  %3435 = fadd fast float %3432, %3426
  %3436 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3437 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3436, %dx.types.Handle %3417, float %3382, float %3383, float %3384, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3438 = extractvalue %dx.types.ResRet.f32 %3437, 0
  %3439 = extractvalue %dx.types.ResRet.f32 %3437, 1
  %3440 = extractvalue %dx.types.ResRet.f32 %3437, 2
  %3441 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3442 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3441, %dx.types.Handle %3417, float %3396, float %3397, float %3398, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3443 = extractvalue %dx.types.ResRet.f32 %3442, 0
  %3444 = extractvalue %dx.types.ResRet.f32 %3442, 1
  %3445 = extractvalue %dx.types.ResRet.f32 %3442, 2
  %3446 = fsub fast float %3438, %3443
  %3447 = fsub fast float %3439, %3444
  %3448 = fsub fast float %3440, %3445
  %3449 = fmul fast float %3446, %3415
  %3450 = fmul fast float %3447, %3415
  %3451 = fmul fast float %3448, %3415
  %3452 = fadd fast float %3449, %3443
  %3453 = fadd fast float %3450, %3444
  %3454 = fadd fast float %3451, %3445
  %3455 = call float @dx.op.dot3.f32(i32 55, float %3433, float %3434, float %3435, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3456 = fadd fast float %3455, 0x3EE4F8B580000000
  %3457 = fdiv fast float %3433, %3456
  %3458 = fdiv fast float %3434, %3456
  %3459 = fdiv fast float %3435, %3456
  %3460 = fmul fast float %3452, %3457
  %3461 = fmul fast float %3453, %3457
  %3462 = fmul fast float %3454, %3457
  %3463 = fmul fast float %3452, %3458
  %3464 = fmul fast float %3453, %3458
  %3465 = fmul fast float %3454, %3458
  %3466 = fmul fast float %3452, %3459
  %3467 = fmul fast float %3453, %3459
  %3468 = fmul fast float %3454, %3459
  %3469 = fmul fast float %452, 0xBFF05F8CE0000000
  %3470 = fmul fast float %453, 0x3FF05F8CE0000000
  %3471 = fmul fast float %451, 0xBFF05F8CE0000000
  %3472 = call float @dx.op.dot4.f32(i32 56, float %3433, float %3460, float %3461, float %3462, float 0x3FEC5BF9E0000000, float %3469, float %3470, float %3471)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3473 = call float @dx.op.dot4.f32(i32 56, float %3434, float %3463, float %3464, float %3465, float 0x3FEC5BF9E0000000, float %3469, float %3470, float %3471)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3474 = call float @dx.op.dot4.f32(i32 56, float %3435, float %3466, float %3467, float %3468, float 0x3FEC5BF9E0000000, float %3469, float %3470, float %3471)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3475 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3472)  ; FMax(a,b)
  %3476 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3473)  ; FMax(a,b)
  %3477 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3474)  ; FMax(a,b)
  %3478 = fmul fast float %3475, %553
  %3479 = fmul fast float %3476, %554
  %3480 = fmul fast float %3477, %555
  %3481 = fadd fast float %3478, %2895
  %3482 = fadd fast float %3479, %2897
  %3483 = fadd fast float %3480, %2899
  %3484 = fmul fast float %556, 0x3FDCCCCCC0000000
  %3485 = fmul fast float %557, 0x3FDCCCCCC0000000
  %3486 = fmul fast float %558, 0x3FDCCCCCC0000000
  %3487 = fadd fast float %553, %3484
  %3488 = fadd fast float %554, %3485
  %3489 = fadd fast float %555, %3486
  %3490 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 142)  ; CBufferLoadLegacy(handle,regIndex)
  %3491 = extractvalue %dx.types.CBufRet.f32 %3490, 2
  %3492 = fsub fast float %3487, %3481
  %3493 = fsub fast float %3488, %3482
  %3494 = fsub fast float %3489, %3483
  %3495 = fmul fast float %3491, %3492
  %3496 = fmul fast float %3491, %3493
  %3497 = fmul fast float %3494, %3491
  %3498 = call float @dx.op.binary.f32(i32 35, float %473, float 0.000000e+00)  ; FMax(a,b)
  %3499 = call float @dx.op.binary.f32(i32 35, float %474, float 0.000000e+00)  ; FMax(a,b)
  %3500 = call float @dx.op.binary.f32(i32 35, float %475, float 0.000000e+00)  ; FMax(a,b)
  %3501 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %3502 = extractvalue %dx.types.CBufRet.f32 %3501, 0
  %3503 = fcmp fast ogt float %3502, 0.000000e+00
  br i1 %3503, label %3504, label %3587, !dx.controlflow.hints !105

; <label>:3504                                    ; preds = %3366
  %3505 = mul i32 %67, 41
  %3506 = add i32 %3505, 1
  %3507 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3508 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3507, i32 %3506, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3509 = extractvalue %dx.types.ResRet.f32 %3508, 0
  %3510 = extractvalue %dx.types.ResRet.f32 %3508, 1
  %3511 = extractvalue %dx.types.ResRet.f32 %3508, 2
  %3512 = add i32 %3505, 18
  %3513 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3507, i32 %3512, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3514 = extractvalue %dx.types.ResRet.f32 %3513, 0
  %3515 = extractvalue %dx.types.ResRet.f32 %3513, 1
  %3516 = extractvalue %dx.types.ResRet.f32 %3513, 2
  %3517 = add i32 %3505, 17
  %3518 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3507, i32 %3517, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3519 = extractvalue %dx.types.ResRet.f32 %3518, 3
  %3520 = add i32 %3505, 24
  %3521 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3507, i32 %3520, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3522 = extractvalue %dx.types.ResRet.f32 %3521, 3
  %3523 = add i32 %3505, 25
  %3524 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3507, i32 %3523, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3525 = extractvalue %dx.types.ResRet.f32 %3524, 3
  %3526 = add i32 %3505, 31
  %3527 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3507, i32 %3526, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3528 = extractvalue %dx.types.ResRet.f32 %3527, 0
  %3529 = fsub fast float %300, %3509
  %3530 = fsub fast float %301, %3510
  %3531 = fsub fast float %302, %3511
  %3532 = fmul fast float %3529, 2.097152e+06
  %3533 = fmul fast float %3530, 2.097152e+06
  %3534 = fmul fast float %3531, 2.097152e+06
  %3535 = fadd fast float %3532, %404
  %3536 = fsub fast float %3535, %3514
  %3537 = fadd fast float %3533, %405
  %3538 = fsub fast float %3537, %3515
  %3539 = fadd fast float %3534, %406
  %3540 = fsub fast float %3539, %3516
  %3541 = call float @dx.op.unary.f32(i32 6, float %3536)  ; FAbs(value)
  %3542 = call float @dx.op.unary.f32(i32 6, float %3538)  ; FAbs(value)
  %3543 = call float @dx.op.unary.f32(i32 6, float %3540)  ; FAbs(value)
  %3544 = fadd fast float %3519, 1.000000e+00
  %3545 = fadd fast float %3522, 1.000000e+00
  %3546 = fadd fast float %3525, 1.000000e+00
  %3547 = fcmp fast ogt float %3541, %3544
  %3548 = fcmp fast ogt float %3542, %3545
  %3549 = fcmp fast ogt float %3543, %3546
  %3550 = or i1 %3547, %3548
  %3551 = or i1 %3550, %3549
  br i1 %3551, label %3552, label %3565

; <label>:3552                                    ; preds = %3504
  %3553 = fadd fast float %405, %404
  %3554 = fadd fast float %300, %301
  %3555 = fadd fast float %3553, %406
  %3556 = fadd fast float %3554, %302
  %3557 = fmul fast float %3555, 0x3F52E83A20000000
  %3558 = fmul fast float %3556, 0x40A2E83A20000000
  %3559 = call float @dx.op.unary.f32(i32 22, float %3558)  ; Frc(value)
  %3560 = fadd fast float %3559, %3557
  %3561 = call float @dx.op.unary.f32(i32 22, float %3560)  ; Frc(value)
  %3562 = fcmp fast ogt float %3561, 5.000000e-01
  %3563 = uitofp i1 %3562 to float
  %3564 = fsub fast float 1.000000e+00, %3563
  br label %3587

; <label>:3565                                    ; preds = %3504
  %3566 = fcmp fast ogt float %3528, 0.000000e+00
  br i1 %3566, label %3567, label %3587

; <label>:3567                                    ; preds = %3565
  %3568 = fsub fast float %401, %64
  %3569 = fsub fast float %402, %65
  %3570 = fsub fast float %403, %66
  %3571 = call float @dx.op.unary.f32(i32 6, float %3568)  ; FAbs(value)
  %3572 = call float @dx.op.unary.f32(i32 6, float %3569)  ; FAbs(value)
  %3573 = call float @dx.op.unary.f32(i32 6, float %3570)  ; FAbs(value)
  %3574 = call float @dx.op.binary.f32(i32 35, float %3572, float %3573)  ; FMax(a,b)
  %3575 = call float @dx.op.binary.f32(i32 35, float %3571, float %3574)  ; FMax(a,b)
  %3576 = fsub fast float %3575, %3528
  %3577 = call float @dx.op.unary.f32(i32 6, float %3576)  ; FAbs(value)
  %3578 = fmul fast float %3577, 2.000000e+01
  %3579 = call float @dx.op.unary.f32(i32 7, float %3578)  ; Saturate(value)
  %3580 = fsub fast float 1.000000e+00, %3579
  %3581 = fcmp fast ogt float %3580, 0.000000e+00
  %3582 = fcmp fast olt float %3580, 0.000000e+00
  %3583 = zext i1 %3581 to i32
  %3584 = zext i1 %3582 to i32
  %3585 = sub nsw i32 %3583, %3584
  %3586 = sitofp i32 %3585 to float
  br label %3587

; <label>:3587                                    ; preds = %3567, %3565, %3552, %3366
  %3588 = phi float [ 1.000000e+00, %3552 ], [ %3586, %3567 ], [ %505, %3565 ], [ %505, %3366 ]
  %3589 = phi float [ %3564, %3552 ], [ %3580, %3567 ], [ %3498, %3565 ], [ %3498, %3366 ]
  %3590 = phi float [ 1.000000e+00, %3552 ], [ 0.000000e+00, %3567 ], [ %3499, %3565 ], [ %3499, %3366 ]
  %3591 = phi float [ %3563, %3552 ], [ %3580, %3567 ], [ %3500, %3565 ], [ %3500, %3366 ]
  %3592 = fadd fast float %3481, %740
  %3593 = fadd fast float %3592, %3495
  %3594 = fadd fast float %3593, %3589
  %3595 = fadd fast float %3482, %741
  %3596 = fadd fast float %3595, %3496
  %3597 = fadd fast float %3596, %3590
  %3598 = fadd fast float %3483, %742
  %3599 = fadd fast float %3598, %3497
  %3600 = fadd fast float %3599, %3591
  %3601 = fmul fast float %3594, %3370
  %3602 = fmul fast float %3597, %3370
  %3603 = fmul fast float %3600, %3370
  %3604 = fadd fast float %3601, %3367
  %3605 = fadd fast float %3602, %3368
  %3606 = fadd fast float %3603, %3369
  %3607 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %3608 = extractvalue %dx.types.CBufRet.f32 %3607, 2
  %3609 = fmul fast float %3608, %3604
  %3610 = fmul fast float %3605, %3608
  %3611 = fmul fast float %3606, %3608
  %3612 = call float @dx.op.binary.f32(i32 36, float %3609, float 3.225600e+04)  ; FMin(a,b)
  %3613 = call float @dx.op.binary.f32(i32 36, float %3610, float 3.225600e+04)  ; FMin(a,b)
  %3614 = call float @dx.op.binary.f32(i32 36, float %3611, float 3.225600e+04)  ; FMin(a,b)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %3612)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %3613)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %3614)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %3588)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleBias.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!67}
!dx.entryPoints = !{!68}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !42, !47}
!5 = !{!6, !8, !10, !11, !12, !14, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !7}
!12 = !{i32 4, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 4}
!14 = !{i32 5, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 10, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 6, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 5, i32 0, !9}
!17 = !{i32 7, %"class.TextureCubeArray<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 9, i32 0, !9}
!18 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!19 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !9}
!20 = !{i32 10, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 4, i32 0, !9}
!21 = !{i32 11, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 4, i32 0, !9}
!22 = !{i32 12, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 4, i32 0, !9}
!23 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !9}
!24 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !9}
!25 = !{i32 15, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 15, i32 1, i32 4, i32 0, !15}
!26 = !{i32 16, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!27 = !{i32 17, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 12, i32 0, !7}
!28 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!29 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!30 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!31 = !{i32 21, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 4, i32 0, !9}
!32 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!33 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!34 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!35 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 25, i32 1, i32 2, i32 0, !9}
!36 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!37 = !{i32 27, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 27, i32 1, i32 2, i32 0, !9}
!38 = !{i32 28, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 28, i32 1, i32 2, i32 0, !9}
!39 = !{i32 29, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 29, i32 1, i32 2, i32 0, !9}
!40 = !{i32 30, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 30, i32 1, i32 2, i32 0, !9}
!41 = !{i32 31, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 31, i32 1, i32 2, i32 0, !9}
!42 = !{!43, !44, !45, !46}
!43 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5484, null}
!44 = !{i32 1, %hostlayout.UniformBufferConstants_TranslucentBasePass* undef, !"", i32 0, i32 1, i32 1, i32 3404, null}
!45 = !{i32 2, %hostlayout.UniformBufferConstants_ReflectionCaptureSM5* undef, !"", i32 0, i32 2, i32 1, i32 49104, null}
!46 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 156, null}
!47 = !{!48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66}
!48 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!49 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!50 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!51 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!52 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!53 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!54 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!55 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!56 = !{i32 8, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!57 = !{i32 9, %struct.SamplerState* undef, !"", i32 0, i32 7, i32 1, i32 0, null}
!58 = !{i32 10, %struct.SamplerState* undef, !"", i32 0, i32 8, i32 1, i32 0, null}
!59 = !{i32 11, %struct.SamplerState* undef, !"", i32 0, i32 9, i32 1, i32 0, null}
!60 = !{i32 12, %struct.SamplerState* undef, !"", i32 0, i32 10, i32 1, i32 0, null}
!61 = !{i32 13, %struct.SamplerState* undef, !"", i32 0, i32 11, i32 1, i32 0, null}
!62 = !{i32 14, %struct.SamplerState* undef, !"", i32 0, i32 12, i32 1, i32 0, null}
!63 = !{i32 15, %struct.SamplerState* undef, !"", i32 0, i32 13, i32 1, i32 0, null}
!64 = !{i32 16, %struct.SamplerState* undef, !"", i32 0, i32 14, i32 1, i32 0, null}
!65 = !{i32 17, %struct.SamplerState* undef, !"", i32 0, i32 15, i32 1, i32 0, null}
!66 = !{i32 18, %struct.SamplerState* undef, !"", i32 0, i32 16, i32 1, i32 0, null}
!67 = !{[26 x i32] [i32 24, i32 4, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 7, i32 15, i32 15, i32 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 0, i32 15, i32 15, i32 15, i32 7]}
!68 = !{void ()* @MainPS, !"MainPS", !69, !4, !86}
!69 = !{!70, !84, null}
!70 = !{!71, !74, !76, !78, !80, !82, !83}
!71 = !{i32 0, !"TEXCOORD10_centroid", i8 9, i8 0, !72, i8 2, i32 1, i8 4, i32 0, i8 0, !73}
!72 = !{i32 0}
!73 = !{i32 3, i32 7}
!74 = !{i32 1, !"TEXCOORD11_centroid", i8 9, i8 0, !72, i8 2, i32 1, i8 4, i32 1, i8 0, !75}
!75 = !{i32 3, i32 15}
!76 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !72, i8 2, i32 1, i8 4, i32 2, i8 0, !77}
!77 = !{i32 3, i32 3}
!78 = !{i32 3, !"PRIMITIVE_ID", i8 5, i8 0, !72, i8 1, i32 1, i8 1, i32 3, i8 0, !79}
!79 = !{i32 3, i32 1}
!80 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !81, i8 2, i32 1, i8 3, i32 4, i8 0, !73}
!81 = !{i32 9}
!82 = !{i32 5, !"SV_Position", i8 9, i8 3, !72, i8 4, i32 1, i8 4, i32 5, i8 0, !75}
!83 = !{i32 6, !"SV_IsFrontFace", i8 5, i8 13, !72, i8 1, i32 1, i8 1, i32 3, i8 1, null}
!84 = !{!85}
!85 = !{i32 0, !"SV_Target", i8 9, i8 16, !72, i8 0, i32 1, i8 4, i32 0, i8 0, !75}
!86 = !{i32 0, i64 16, i32 5, !72}
!87 = distinct !{!87, !"dx.controlflow.hints", i32 2}
!88 = distinct !{!88, !"dx.controlflow.hints", i32 2}
!89 = distinct !{!89, !"dx.controlflow.hints", i32 1}
!90 = distinct !{!90, !"dx.controlflow.hints", i32 1}
!91 = distinct !{!91, !"dx.controlflow.hints", i32 1}
!92 = distinct !{!92, !"dx.controlflow.hints", i32 2}
!93 = distinct !{!93, !94}
!94 = !{!"llvm.loop.unroll.disable"}
!95 = distinct !{!95, !"dx.controlflow.hints", i32 1}
!96 = distinct !{!96, !"dx.controlflow.hints", i32 2}
!97 = distinct !{!97, !"dx.controlflow.hints", i32 1}
!98 = distinct !{!98, !94}
!99 = distinct !{!99, !"dx.controlflow.hints", i32 1}
!100 = distinct !{!100, !"dx.controlflow.hints", i32 1}
!101 = distinct !{!101, !"dx.controlflow.hints", i32 1}
!102 = distinct !{!102, !"dx.controlflow.hints", i32 1}
!103 = distinct !{!103, !"dx.controlflow.hints", i32 1}
!104 = distinct !{!104, !"dx.controlflow.hints", i32 1}
!105 = distinct !{!105, !"dx.controlflow.hints", i32 1}
